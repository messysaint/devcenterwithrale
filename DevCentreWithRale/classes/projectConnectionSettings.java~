/*
 * projectOpen.java
 *
 * Created on December 16, 2002, 7:05 AM
 */
import java.io.*;
import javax.swing.*;
import javax.swing.tree.*;
import javax.swing.filechooser.*;

import java.awt.*;
//import java.io.File;
import java.awt.event.*;
import java.beans.*;
import java.util.*;

import java.io.*;
import java.awt.Point;
import java.net.*;

import HTTPClient.*;
import java.io.*;
import encryptor.*;
/**
 *
 * @author  test1
 */
public class projectConnectionSettings extends javax.swing.JDialog {
    
    /** Creates new form projectOpen */
    public projectConnectionSettings(mainForm parent, boolean modal) {
        super(parent, modal);
        initComponents();
        myParent = parent;
        
        previewer = new FilePreviewer( chooser );
        try {
            UIManager.setLookAndFeel( LnF );
            SwingUtilities.updateComponentTreeUI( this );
            //if(chooser != null) {
            SwingUtilities.updateComponentTreeUI( chooser );
            //}
        } catch (UnsupportedLookAndFeelException exc) {
        } catch (IllegalAccessException exc) {
            myParent.printMessage("IllegalAccessException Error:" + exc);
        } catch (ClassNotFoundException exc) {
            myParent.printMessage("ClassNotFoundException Error:" + exc);
        } catch (InstantiationException exc) {
            myParent.printMessage("InstantiateException Error:" + exc);
        }
                
        clientSetting client = new clientSetting( myParent.getBuildDirectory() + "\\client.properties" );
        if( client.exists() ) {
            
            if( client.readSetting() ) {
                                
                loaderUserName.setText( client.getLoaderUserName() );
                loaderPassword.setText( client.getLoaderPassword() );
                loaderPort.setText( new Integer( client.getReloadPort() ).toString() );
                sshUserName.setText( client.getSSHUserName() );
                sshPassword.setText( client.getSSHPassword() );
                sshServerHost.setText( client.getServerName() );
                sshPort.setText( new Integer( client.getSSHPort() ).toString() );
                sshRemoteDirectory.setText( client.getSSHRemoteDirectory() );
                                
            } else {
                myParent.printMessage( "Error: Reading " + myParent.getBuildDirectory() + "\\client.properties" );
            }
        } else {
            myParent.printMessage( "Error: File not found " + myParent.getBuildDirectory() + "\\client.properties" );
        }
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        chooser = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel111 = new javax.swing.JLabel();
        jLabel112 = new javax.swing.JLabel();
        loaderUserName = new javax.swing.JTextField();
        loaderPassword = new javax.swing.JPasswordField();
        jLabel1122 = new javax.swing.JLabel();
        loaderPort = new javax.swing.JTextField();
        jPanel61 = new javax.swing.JPanel();
        jLabel1111 = new javax.swing.JLabel();
        jLabel1121 = new javax.swing.JLabel();
        sshUserName = new javax.swing.JTextField();
        sshPassword = new javax.swing.JPasswordField();
        jLabel112212 = new javax.swing.JLabel();
        jLabel11221 = new javax.swing.JLabel();
        sshServerHost = new javax.swing.JTextField();
        sshPort = new javax.swing.JTextField();
        jLabel112211 = new javax.swing.JLabel();
        sshRemoteDirectory = new javax.swing.JTextField();
        getWebAppDirButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        ok = new javax.swing.JButton();
        cancel = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();

        chooser.setDialogTitle("Select Build.xml Directory");
        chooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        chooser.setFont(new java.awt.Font("Default", 0, 11));
        chooser.setMultiSelectionEnabled(true);

        setTitle("Connection Settings");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel6.setLayout(new java.awt.GridBagLayout());

        jPanel6.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.EtchedBorder(), "Likha Remote Loader Connection Setting:"));
        jLabel111.setFont(new java.awt.Font("Default", 0, 11));
        jLabel111.setText("User Name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel6.add(jLabel111, gridBagConstraints);

        jLabel112.setFont(new java.awt.Font("Default", 0, 11));
        jLabel112.setText("Password:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel6.add(jLabel112, gridBagConstraints);

        loaderUserName.setBackground(new java.awt.Color(255, 255, 255));
        loaderUserName.setFont(new java.awt.Font("Default", 0, 11));
        loaderUserName.setPreferredSize(new java.awt.Dimension(150, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel6.add(loaderUserName, gridBagConstraints);

        loaderPassword.setFont(new java.awt.Font("Default", 0, 11));
        loaderPassword.setPreferredSize(new java.awt.Dimension(150, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel6.add(loaderPassword, gridBagConstraints);

        jLabel1122.setFont(new java.awt.Font("Default", 0, 11));
        jLabel1122.setText("Server Port:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel6.add(jLabel1122, gridBagConstraints);

        loaderPort.setBackground(new java.awt.Color(255, 255, 255));
        loaderPort.setFont(new java.awt.Font("Default", 0, 11));
        loaderPort.setText("9002");
        loaderPort.setPreferredSize(new java.awt.Dimension(50, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel6.add(loaderPort, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jPanel6, gridBagConstraints);

        jPanel61.setLayout(new java.awt.GridBagLayout());

        jPanel61.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.EtchedBorder(), "SSH Server Connection Setting:"));
        jLabel1111.setFont(new java.awt.Font("Default", 0, 11));
        jLabel1111.setText("User Name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel61.add(jLabel1111, gridBagConstraints);

        jLabel1121.setFont(new java.awt.Font("Default", 0, 11));
        jLabel1121.setText("Password:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel61.add(jLabel1121, gridBagConstraints);

        sshUserName.setBackground(new java.awt.Color(255, 255, 255));
        sshUserName.setFont(new java.awt.Font("Default", 0, 11));
        sshUserName.setPreferredSize(new java.awt.Dimension(150, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel61.add(sshUserName, gridBagConstraints);

        sshPassword.setFont(new java.awt.Font("Default", 0, 11));
        sshPassword.setPreferredSize(new java.awt.Dimension(150, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel61.add(sshPassword, gridBagConstraints);

        jLabel112212.setFont(new java.awt.Font("Default", 0, 11));
        jLabel112212.setText("Server Host:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel61.add(jLabel112212, gridBagConstraints);

        jLabel11221.setFont(new java.awt.Font("Default", 0, 11));
        jLabel11221.setText("Server Port:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel61.add(jLabel11221, gridBagConstraints);

        sshServerHost.setBackground(new java.awt.Color(255, 255, 255));
        sshServerHost.setFont(new java.awt.Font("Default", 0, 11));
        sshServerHost.setPreferredSize(new java.awt.Dimension(150, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel61.add(sshServerHost, gridBagConstraints);

        sshPort.setBackground(new java.awt.Color(255, 255, 255));
        sshPort.setFont(new java.awt.Font("Default", 0, 11));
        sshPort.setText("22");
        sshPort.setPreferredSize(new java.awt.Dimension(50, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel61.add(sshPort, gridBagConstraints);

        jLabel112211.setFont(new java.awt.Font("Default", 0, 11));
        jLabel112211.setText("Remote Directory:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel61.add(jLabel112211, gridBagConstraints);

        sshRemoteDirectory.setBackground(new java.awt.Color(255, 255, 255));
        sshRemoteDirectory.setEditable(false);
        sshRemoteDirectory.setFont(new java.awt.Font("Default", 0, 11));
        sshRemoteDirectory.setPreferredSize(new java.awt.Dimension(300, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel61.add(sshRemoteDirectory, gridBagConstraints);

        getWebAppDirButton.setFont(new java.awt.Font("Default", 0, 11));
        getWebAppDirButton.setText("...");
        getWebAppDirButton.setBorder(new javax.swing.border.EtchedBorder());
        getWebAppDirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getWebAppDirButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 4;
        jPanel61.add(getWebAppDirButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jPanel61, gridBagConstraints);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.NORTH);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        ok.setFont(new java.awt.Font("Default", 0, 11));
        ok.setText("Ok");
        ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okActionPerformed(evt);
            }
        });

        jPanel3.add(ok);

        cancel.setFont(new java.awt.Font("Default", 0, 11));
        cancel.setText("Cancel");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        jPanel3.add(cancel);

        getContentPane().add(jPanel3, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanel4, java.awt.BorderLayout.EAST);

        getContentPane().add(jPanel5, java.awt.BorderLayout.WEST);

        pack();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setSize(new java.awt.Dimension(555, 443));
        setLocation((screenSize.width-555)/2,(screenSize.height-443)/2);
    }//GEN-END:initComponents

    private void getWebAppDirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getWebAppDirButtonActionPerformed
        // Add your handling code here:
        myParent.printMessage( "Getting web application directory from server" );
        String server = sshServerHost.getText().trim();
        int port = new Integer( loaderPort.getText() ).intValue();
        String user = loaderUserName.getText().trim();
        String password = loaderPassword.getText().trim();
        getWebAppDir2 gwad = new getWebAppDir2( myParent, this, false, "getwebapplicationdir", "dummy" , server, port, user, password );
        gwad.show();
    }//GEN-LAST:event_getWebAppDirButtonActionPerformed
    
    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        // Add your handling code here:
        setVisible(false);
        dispose();
    }//GEN-LAST:event_cancelActionPerformed
    
    private void okActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okActionPerformed
        // Add your handling code here:
 
        DESedeEncryptor psec = new DESedeEncryptor();
        
        // check directory for src, metadata, lib, classes, build.xml, client.properties
        String selectedDirectory = myParent.getBuildDirectory();                                
        
        if( loaderUserName.getText().trim().length() == 0 ) {
            myParent.printMessage( "Loader user name is invalid" );
            return;
        }
        
        if( loaderPassword.getText().trim().length() == 0 ) {
            myParent.printMessage( "Loader user password is invalid" );
            return;
        }
        
        try {
            int port = Integer.parseInt( loaderPort.getText().trim() );
            if( port < 1 || port > 65535 ) {
                myParent.printMessage( "Loader port is invalid" );
                return;
            }
        } catch( NumberFormatException nfe ) {
            myParent.printMessage( "Loader port is invalid" );
            return;
        }
        
        //sshUserName
        if( sshUserName.getText().trim().length() == 0 ) {
            myParent.printMessage( "SSH user name is invalid" );
            return;
        }
        
        //sshPassword
        if( sshPassword.getText().trim().length() == 0 ) {
            myParent.printMessage( "SSH user password is invalid" );
            return;
        }
        
        //sshServerHost
        if( sshServerHost.getText().trim().length() == 0 ) {
            myParent.printMessage( "SSH server host name is invalid" );
            return;
        }
        
        //sshPort
        try {
            int port = Integer.parseInt( sshPort.getText().trim() );
            if( port < 1 || port > 65535 ) {
                myParent.printMessage( "SSH port is invalid" );
                return;
            }
        } catch( NumberFormatException nfe ) {
            myParent.printMessage( "SSH port is invalid" );
            return;
        }
        
        //sshRemoteDirectory
        if( sshRemoteDirectory.getText().trim().length() == 0 ) {
            myParent.printMessage( "SSH remote directory is invalid" );
            return;
        }
        
        if( sshRemoteDirectory.getText().trim().endsWith("/") ) {
            String remoteDir = sshRemoteDirectory.getText().trim();
            sshRemoteDirectory.setText( remoteDir.substring(0,remoteDir.lastIndexOf( '/' ) ) );
        }
                
        // create client.properties        
        String key = new String();
        String[] configline = new String[11];
        configline[0] = "# SSH Server connection settings:";
        key = getKey();
        configline[1] = "sshServerHost = " + key+psec.encryptToBase64( sshServerHost.getText().trim(), key );
        key = getKey();
        configline[2] = "sshPort = " + key+psec.encryptToBase64( sshPort.getText().trim(), key );
        key = getKey();
        configline[3] = "sshRemoteDirectory = " + key+psec.encryptToBase64( sshRemoteDirectory.getText().trim(), key );
        key = getKey();
        configline[4] = "sshUserName = " + key+psec.encryptToBase64( sshUserName.getText().trim(), key );
        key = getKey();
        configline[5] = "sshPassword = " + key+psec.encryptToBase64( sshPassword.getText().trim(), key );        
        configline[6] = " ";
        configline[7] = "# Likha Remote Loader connection settings:";
        key = getKey();
        configline[8] = "loaderPort = " + key+psec.encryptToBase64( loaderPort.getText().trim(), key );
        key = getKey();
        configline[9] = "loaderUserName = " + key+psec.encryptToBase64( loaderUserName.getText().trim(), key );
        key = getKey();
        configline[10] = "loaderPassword = " + key+psec.encryptToBase64( loaderPassword.getText().trim(), key );
        
        createConfigFile( selectedDirectory + "\\client.properties", configline );                        
                                
        setVisible(false);
        dispose();
    }//GEN-LAST:event_okActionPerformed
        
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new projectConnectionSettings( new mainForm(), true ).show();
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel4;
    private javax.swing.JButton ok;
    private javax.swing.JTextField loaderUserName;
    private javax.swing.JTextField sshPort;
    private javax.swing.JPanel jPanel61;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTextField loaderPort;
    private javax.swing.JTextField sshServerHost;
    private javax.swing.JTextField sshUserName;
    private javax.swing.JLabel jLabel112212;
    private javax.swing.JLabel jLabel11221;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JLabel jLabel112211;
    private javax.swing.JButton cancel;
    private javax.swing.JButton getWebAppDirButton;
    private javax.swing.JLabel jLabel111;
    private javax.swing.JLabel jLabel1122;
    private javax.swing.JLabel jLabel1111;
    private javax.swing.JLabel jLabel112;
    private javax.swing.JPasswordField loaderPassword;
    private javax.swing.JLabel jLabel1121;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JFileChooser chooser;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPasswordField sshPassword;
    public static javax.swing.JTextField sshRemoteDirectory;
    // End of variables declaration//GEN-END:variables
       
    private FilePreviewer previewer;
    private String LnF = "com.sun.java.swing.plaf.windows.WindowsLookAndFeel";
    
    mainForm myParent; // mainForm parent
    
    
    class FilePreviewer extends JComponent implements PropertyChangeListener {
        ImageIcon thumbnail = null;
        
        public FilePreviewer(JFileChooser fc) {
            setPreferredSize(new Dimension(100, 50));
            fc.addPropertyChangeListener(this);
        }
        
        public void loadImage(File f) {
            if (f == null) {
                thumbnail = null;
            } else {
                ImageIcon tmpIcon = new ImageIcon(f.getPath());
                if(tmpIcon.getIconWidth() > 90) {
                    thumbnail = new ImageIcon(
                    tmpIcon.getImage().getScaledInstance(90, -1, Image.SCALE_DEFAULT));
                } else {
                    thumbnail = tmpIcon;
                }
            }
        }
        
        public void propertyChange(PropertyChangeEvent e) {
            String prop = e.getPropertyName();
            if(prop == JFileChooser.SELECTED_FILE_CHANGED_PROPERTY) {
                if(isShowing()) {
                    loadImage((File) e.getNewValue());
                    repaint();
                }
            }
        }
        
    }
    
    
    private boolean createConfigFile( String filename, String[] configline ) {
        
        boolean rvalue = false;
        
        try {
            FileWriter fw = new FileWriter( filename, false);
            BufferedWriter br = new BufferedWriter(fw);
            PrintWriter pw = new PrintWriter(br);
            
            for( int i = 0 ; i < configline.length ; i++ ) {
                pw.println( configline[i] );
            }
            
            pw.close();
            br.close();
            fw.close();
            
        } catch (IOException io) {
            myParent.printMessage( io.toString() );
        } catch (Exception e) {
            myParent.printMessage( e.toString() );
        }
        
        return rvalue;
    }
    
    public String getKey() {
        DESedeKeyGenerator kgen = new DESedeKeyGenerator();                
        return kgen.generate();
    }
    
}
