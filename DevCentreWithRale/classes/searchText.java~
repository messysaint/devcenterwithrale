/*
 * searchText.java
 *
 * Created on March 22, 2003, 1:15 PM
 */
import javax.swing.*;
/**
 *
 * @author  test1
 */
public class searchText extends javax.swing.JDialog {
    
    /** Creates new form searchText */
    public searchText( mainForm parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        myParent = parent;
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        searchTextField = new javax.swing.JTextField();
        replaceTextField = new javax.swing.JTextField();
        downCheckBox = new javax.swing.JCheckBox();
        upCheckBox = new javax.swing.JCheckBox();
        findButton = new javax.swing.JButton();
        replaceButton = new javax.swing.JButton();
        caseCheckBox = new javax.swing.JCheckBox();
        replaceAllButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        closeButton = new javax.swing.JButton();

        setTitle("Find");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Default", 0, 11));
        jLabel1.setText("Search Text:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jLabel1, gridBagConstraints);

        jLabel11.setFont(new java.awt.Font("Default", 0, 11));
        jLabel11.setText("Replace with:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jLabel11, gridBagConstraints);

        searchTextField.setFont(new java.awt.Font("Default", 0, 11));
        searchTextField.setPreferredSize(new java.awt.Dimension(250, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(searchTextField, gridBagConstraints);

        replaceTextField.setFont(new java.awt.Font("Default", 0, 11));
        replaceTextField.setPreferredSize(new java.awt.Dimension(250, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(replaceTextField, gridBagConstraints);

        downCheckBox.setFont(new java.awt.Font("Default", 0, 11));
        downCheckBox.setSelected(true);
        downCheckBox.setText("downward");
        buttonGroup1.add(downCheckBox);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(downCheckBox, gridBagConstraints);

        upCheckBox.setFont(new java.awt.Font("Default", 0, 11));
        upCheckBox.setText("upward");
        buttonGroup1.add(upCheckBox);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(upCheckBox, gridBagConstraints);

        findButton.setFont(new java.awt.Font("Default", 0, 11));
        findButton.setText("Find Next");
        findButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(findButton, gridBagConstraints);

        replaceButton.setFont(new java.awt.Font("Default", 0, 11));
        replaceButton.setText("Replace");
        replaceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                replaceButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(replaceButton, gridBagConstraints);

        caseCheckBox.setFont(new java.awt.Font("Default", 0, 11));
        caseCheckBox.setSelected(true);
        caseCheckBox.setText("case-sensitive");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(caseCheckBox, gridBagConstraints);

        replaceAllButton.setFont(new java.awt.Font("Default", 0, 11));
        replaceAllButton.setText("Replace All");
        replaceAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                replaceAllButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(replaceAllButton, gridBagConstraints);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        closeButton.setFont(new java.awt.Font("Default", 0, 11));
        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        jPanel3.add(closeButton);

        getContentPane().add(jPanel3, java.awt.BorderLayout.SOUTH);

        pack();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setSize(new java.awt.Dimension(475, 185));
        setLocation((screenSize.width-475)/2,(screenSize.height-185)/2);
    }//GEN-END:initComponents

    private void replaceAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_replaceAllButtonActionPerformed
        // Add your handling code here:
        replaceAll();
    }//GEN-LAST:event_replaceAllButtonActionPerformed
    
    private void replaceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_replaceButtonActionPerformed
        // Add your handling code here:
        replace();
    }//GEN-LAST:event_replaceButtonActionPerformed
    
    private void findButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findButtonActionPerformed
        // Add your handling code here:
        searchText();
    }//GEN-LAST:event_findButtonActionPerformed
    
    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        // Add your handling code here:
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeButtonActionPerformed
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        //new searchText(new javax.swing.JFrame(), true).show();
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField searchTextField;
    private javax.swing.JCheckBox upCheckBox;
    private javax.swing.JButton replaceAllButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JButton replaceButton;
    private javax.swing.JButton findButton;
    private javax.swing.JTextField replaceTextField;
    private javax.swing.JLabel jLabel11;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JCheckBox downCheckBox;
    private javax.swing.JButton closeButton;
    private javax.swing.JCheckBox caseCheckBox;
    // End of variables declaration//GEN-END:variables
    
    mainForm myParent;
    int lastPos = 0;
    
    // searching text
    public boolean searchText() {
        
        boolean rvalue = false;
        boolean down = downCheckBox.isSelected();
        boolean caseSense = caseCheckBox.isSelected();
        String srcTxt = new String();
        String srchTxt = searchTextField.getText().trim();
        int txtPos = 0;
        
        if( srchTxt.length() > 0 ) {
            
            if( myParent.hasOpenIF() ) {
                
                String className = myParent.getSelectedFrame().getClass().toString();
                
                if( className.endsWith( "mvcController" ) ) {
                    mvcController frame = (mvcController) myParent.getSelectedFrame();
                    srcTxt = frame.getText();
                    txtPos = srcTxt.length() > lastPos ? ++txtPos : txtPos;
                    if( down ) { // down search
                        lastPos = txtPos = frame.getCaretTextPosition();
                        String fromTxt = srcTxt.substring( txtPos );
                        if( !caseSense ) {
                            fromTxt = fromTxt.toUpperCase();
                            srchTxt = srchTxt.toUpperCase();
                        }
                        int newPos = fromTxt.indexOf( srchTxt);
                        if( newPos < 0 ) { // not found
                            frame.setCaretTextPosition( lastPos ); // do not move anywhere
                        } else { // found
                            lastPos = txtPos + newPos;
                            frame.setSelection( lastPos, lastPos + srchTxt.length() );
                            rvalue = true;
                        }
                    } else { // up search
                        int[] pos = frame.getTextPosition();
                        lastPos = txtPos = pos[0] < pos[1] ? pos[0] : pos[1];
                        String fromTxt = srcTxt.substring( 0, txtPos );
                        if( !caseSense ) {
                            fromTxt = fromTxt.toUpperCase();
                            srchTxt = srchTxt.toUpperCase();
                        }
                        int newPos = fromTxt.lastIndexOf( srchTxt);
                        if( newPos < 0 ) { // not found
                            frame.setCaretTextPosition( lastPos ); // do not move anywhere
                        } else { // found
                            lastPos = newPos;
                            frame.setSelection(  lastPos,  lastPos + srchTxt.length());
                            rvalue = true;
                        }
                    }
                } else if( className.endsWith( "mvcWappDescriptor" ) ) {
                    mvcWappDescriptor frame = (mvcWappDescriptor) myParent.getSelectedFrame();
                    srcTxt = frame.getText();
                    txtPos = srcTxt.length() > lastPos ? ++txtPos : txtPos;
                    if( down ) { // down search
                        lastPos = txtPos = frame.getCaretTextPosition();
                        String fromTxt = srcTxt.substring( txtPos );
                        if( !caseSense ) {
                            fromTxt = fromTxt.toUpperCase();
                            srchTxt = srchTxt.toUpperCase();
                        }
                        int newPos = fromTxt.indexOf( srchTxt);
                        if( newPos < 0 ) { // not found
                            frame.setCaretTextPosition( lastPos ); // do not move anywhere
                        } else { // found
                            lastPos = txtPos + newPos;
                            frame.setSelection( lastPos, lastPos + srchTxt.length() );
                            rvalue = true;
                        }
                    } else { // up search
                        int[] pos = frame.getTextPosition();
                        lastPos = txtPos = pos[0] < pos[1] ? pos[0] : pos[1];
                        String fromTxt = srcTxt.substring( 0, txtPos );
                        if( !caseSense ) {
                            fromTxt = fromTxt.toUpperCase();
                            srchTxt = srchTxt.toUpperCase();
                        }
                        int newPos = fromTxt.lastIndexOf( srchTxt);
                        if( newPos < 0 ) {
                            frame.setCaretTextPosition( lastPos ); // do not move anywhere
                        } else {
                            lastPos = newPos;
                            frame.setSelection(  lastPos,  lastPos + srchTxt.length());
                            rvalue = true;
                        }
                    }
                } else if( className.endsWith( "mvcControllerSettingIF" ) ) {
                    mvcControllerSettingIF frame = (mvcControllerSettingIF) myParent.getSelectedFrame();
                    srcTxt = frame.getText();
                    txtPos = srcTxt.length() > lastPos ? ++txtPos : txtPos;
                    if( down ) { // down search
                        lastPos = txtPos = frame.getCaretTextPosition();
                        String fromTxt = srcTxt.substring( txtPos );
                        if( !caseSense ) {
                            fromTxt = fromTxt.toUpperCase();
                            srchTxt = srchTxt.toUpperCase();
                        }
                        int newPos = fromTxt.indexOf( srchTxt);
                        if( newPos < 0 ) { // not found
                            frame.setCaretTextPosition( lastPos ); // do not move anywhere
                        } else { // found
                            lastPos = txtPos + newPos;
                            frame.setSelection( lastPos, lastPos + srchTxt.length() );
                            rvalue = true;
                        }
                    } else { // up search
                        int[] pos = frame.getTextPosition();
                        lastPos = txtPos = pos[0] < pos[1] ? pos[0] : pos[1];
                        String fromTxt = srcTxt.substring( 0, txtPos );
                        if( !caseSense ) {
                            fromTxt = fromTxt.toUpperCase();
                            srchTxt = srchTxt.toUpperCase();
                        }
                        int newPos = fromTxt.lastIndexOf( srchTxt);
                        if( newPos < 0 ) {
                            frame.setCaretTextPosition( lastPos ); // do not move anywhere
                        } else {
                            lastPos = newPos;
                            frame.setSelection(  lastPos,  lastPos + srchTxt.length());
                            rvalue = true;
                        }
                    }
                } else if( className.endsWith( "mvcDBConnectionPoolIF" ) ) {
                    mvcDBConnectionPoolIF frame = (mvcDBConnectionPoolIF) myParent.getSelectedFrame();
                    srcTxt = frame.getText();
                    txtPos = srcTxt.length() > lastPos ? ++txtPos : txtPos;
                    if( down ) { // down search
                        lastPos = txtPos = frame.getCaretTextPosition();
                        String fromTxt = srcTxt.substring( txtPos );
                        if( !caseSense ) {
                            fromTxt = fromTxt.toUpperCase();
                            srchTxt = srchTxt.toUpperCase();
                        }
                        int newPos = fromTxt.indexOf( srchTxt);
                        if( newPos < 0 ) { // not found
                            frame.setCaretTextPosition( lastPos ); // do not move anywhere
                        } else { // found
                            lastPos = txtPos + newPos;
                            frame.setSelection( lastPos, lastPos + srchTxt.length() );
                            rvalue = true;
                        }
                    } else { // up search
                        int[] pos = frame.getTextPosition();
                        lastPos = txtPos = pos[0] < pos[1] ? pos[0] : pos[1];
                        String fromTxt = srcTxt.substring( 0, txtPos );
                        if( !caseSense ) {
                            fromTxt = fromTxt.toUpperCase();
                            srchTxt = srchTxt.toUpperCase();
                        }
                        int newPos = fromTxt.lastIndexOf( srchTxt);
                        if( newPos < 0 ) {
                            frame.setCaretTextPosition( lastPos ); // do not move anywhere
                        } else {
                            lastPos = newPos;
                            frame.setSelection(  lastPos,  lastPos + srchTxt.length());
                            rvalue = true;
                        }
                    }
                } else if( className.endsWith( "sourceJSPEditorIF" ) ) {
                    sourceJSPEditorIF frame = (sourceJSPEditorIF) myParent.getSelectedFrame();
                    srcTxt = frame.getText();
                    txtPos = srcTxt.length() > lastPos ? ++txtPos : txtPos;
                    if( down ) { // down search
                        lastPos = txtPos = frame.getCaretTextPosition();
                        String fromTxt = srcTxt.substring( txtPos );
                        if( !caseSense ) {
                            fromTxt = fromTxt.toUpperCase();
                            srchTxt = srchTxt.toUpperCase();
                        }
                        int newPos = fromTxt.indexOf( srchTxt);
                        if( newPos < 0 ) { // not found
                            frame.setCaretTextPosition( lastPos ); // do not move anywhere
                        } else { // found
                            lastPos = txtPos + newPos;
                            frame.setSelection( lastPos, lastPos + srchTxt.length() );
                            rvalue = true;
                        }
                    } else { // up search
                        int[] pos = frame.getTextPosition();
                        lastPos = txtPos = pos[0] < pos[1] ? pos[0] : pos[1];
                        String fromTxt = srcTxt.substring( 0, txtPos );
                        if( !caseSense ) {
                            fromTxt = fromTxt.toUpperCase();
                            srchTxt = srchTxt.toUpperCase();
                        }
                        int newPos = fromTxt.lastIndexOf( srchTxt);
                        if( newPos < 0 ) {
                            frame.setCaretTextPosition( lastPos ); // do not move anywhere
                        } else {
                            lastPos = newPos;
                            frame.setSelection(  lastPos,  lastPos + srchTxt.length());
                            rvalue = true;
                        }
                    }
                } else if( className.endsWith( "sourceJAVAEditorIF" ) ) {
                    sourceJAVAEditorIF frame = (sourceJAVAEditorIF) myParent.getSelectedFrame();
                    srcTxt = frame.getText();
                    txtPos = srcTxt.length() > lastPos ? ++txtPos : txtPos;
                    if( down ) { // down search
                        lastPos = txtPos = frame.getCaretTextPosition();
                        String fromTxt = srcTxt.substring( txtPos );
                        if( !caseSense ) {
                            fromTxt = fromTxt.toUpperCase();
                            srchTxt = srchTxt.toUpperCase();
                        }
                        int newPos = fromTxt.indexOf( srchTxt);
                        if( newPos < 0 ) { // not found
                            frame.setCaretTextPosition( lastPos ); // do not move anywhere
                        } else { // found
                            lastPos = txtPos + newPos;
                            frame.setSelection( lastPos, lastPos + srchTxt.length() );
                            rvalue = true;
                        }
                    } else { // up search
                        int[] pos = frame.getTextPosition();
                        lastPos = txtPos = pos[0] < pos[1] ? pos[0] : pos[1];
                        String fromTxt = srcTxt.substring( 0, txtPos );
                        if( !caseSense ) {
                            fromTxt = fromTxt.toUpperCase();
                            srchTxt = srchTxt.toUpperCase();
                        }
                        int newPos = fromTxt.lastIndexOf( srchTxt);
                        if( newPos < 0 ) {
                            frame.setCaretTextPosition( lastPos ); // do not move anywhere
                        } else {
                            lastPos = newPos;
                            frame.setSelection(  lastPos,  lastPos + srchTxt.length());
                            rvalue = true;
                        }
                    }
                } else if( className.endsWith( "sourceHTMLEditorIF" ) ) {
                    sourceHTMLEditorIF frame = (sourceHTMLEditorIF) myParent.getSelectedFrame();
                    srcTxt = frame.getText();
                    txtPos = srcTxt.length() > lastPos ? ++txtPos : txtPos;
                    if( down ) { // down search
                        lastPos = txtPos = frame.getCaretTextPosition();
                        String fromTxt = srcTxt.substring( txtPos );
                        if( !caseSense ) {
                            fromTxt = fromTxt.toUpperCase();
                            srchTxt = srchTxt.toUpperCase();
                        }
                        int newPos = fromTxt.indexOf( srchTxt);
                        if( newPos < 0 ) { // not found
                            frame.setCaretTextPosition( lastPos ); // do not move anywhere
                        } else { // found
                            lastPos = txtPos + newPos;
                            frame.setSelection( lastPos, lastPos + srchTxt.length() );
                            rvalue = true;
                        }
                    } else { // up search
                        int[] pos = frame.getTextPosition();
                        lastPos = txtPos = pos[0] < pos[1] ? pos[0] : pos[1];
                        String fromTxt = srcTxt.substring( 0, txtPos );
                        if( !caseSense ) {
                            fromTxt = fromTxt.toUpperCase();
                            srchTxt = srchTxt.toUpperCase();
                        }
                        int newPos = fromTxt.lastIndexOf( srchTxt);
                        if( newPos < 0 ) {
                            frame.setCaretTextPosition( lastPos ); // do not move anywhere
                        } else {
                            lastPos = newPos;
                            frame.setSelection(  lastPos,  lastPos + srchTxt.length());
                            rvalue = true;
                        }
                    }
                }  else if( className.endsWith( "sourceOtherEditorIF" ) ) {
                    sourceOtherEditorIF frame = (sourceOtherEditorIF) myParent.getSelectedFrame();
                    srcTxt = frame.getText();
                    txtPos = srcTxt.length() > lastPos ? ++txtPos : txtPos;
                    if( down ) { // down search
                        lastPos = txtPos = frame.getCaretTextPosition();
                        String fromTxt = srcTxt.substring( txtPos );
                        if( !caseSense ) {
                            fromTxt = fromTxt.toUpperCase();
                            srchTxt = srchTxt.toUpperCase();
                        }
                        int newPos = fromTxt.indexOf( srchTxt);
                        if( newPos < 0 ) { // not found
                            frame.setCaretTextPosition( lastPos ); // do not move anywhere
                        } else { // found
                            lastPos = txtPos + newPos;
                            frame.setSelection( lastPos, lastPos + srchTxt.length() );
                            rvalue = true;
                        }
                    } else { // up search
                        int[] pos = frame.getTextPosition();
                        lastPos = txtPos = pos[0] < pos[1] ? pos[0] : pos[1];
                        String fromTxt = srcTxt.substring( 0, txtPos );
                        if( !caseSense ) {
                            fromTxt = fromTxt.toUpperCase();
                            srchTxt = srchTxt.toUpperCase();
                        }
                        int newPos = fromTxt.lastIndexOf( srchTxt);
                        if( newPos < 0 ) {
                            frame.setCaretTextPosition( lastPos ); // do not move anywhere
                        } else {
                            lastPos = newPos;
                            frame.setSelection(  lastPos,  lastPos + srchTxt.length());
                            rvalue = true;
                        }
                    }
                } else if( className.endsWith( "mvcAntBuilder" ) ) {
                    mvcAntBuilder frame = (mvcAntBuilder) myParent.getSelectedFrame();
                    srcTxt = frame.getText();
                    txtPos = srcTxt.length() > lastPos ? ++txtPos : txtPos;
                    if( down ) { // down search
                        lastPos = txtPos = frame.getCaretTextPosition();
                        String fromTxt = srcTxt.substring( txtPos );
                        if( !caseSense ) {
                            fromTxt = fromTxt.toUpperCase();
                            srchTxt = srchTxt.toUpperCase();
                        }
                        int newPos = fromTxt.indexOf( srchTxt);
                        if( newPos < 0 ) { // not found
                            frame.setCaretTextPosition( lastPos ); // do not move anywhere
                        } else { // found
                            lastPos = txtPos + newPos;
                            frame.setSelection( lastPos, lastPos + srchTxt.length() );
                            rvalue = true;
                        }
                    } else { // up search
                        int[] pos = frame.getTextPosition();
                        lastPos = txtPos = pos[0] < pos[1] ? pos[0] : pos[1];
                        String fromTxt = srcTxt.substring( 0, txtPos );
                        if( !caseSense ) {
                            fromTxt = fromTxt.toUpperCase();
                            srchTxt = srchTxt.toUpperCase();
                        }
                        int newPos = fromTxt.lastIndexOf( srchTxt);
                        if( newPos < 0 ) {
                            frame.setCaretTextPosition( lastPos ); // do not move anywhere
                        } else {
                            lastPos = newPos;
                            frame.setSelection(  lastPos,  lastPos + srchTxt.length());
                            rvalue = true;
                        }
                    }
                }
                
            }
            
        }
        
        return rvalue;
    }
    
    // replacing text
    public void replace() {
        
        String srcTxt = new String();
        String rplcTxt = replaceTextField.getText().trim();
        
        if( rplcTxt.length() > 0 ) {
            
            if( myParent.hasOpenIF() ) {
                
                String className = myParent.getSelectedFrame().getClass().toString();
                
                if( className.endsWith( "mvcController" ) ) {
                    mvcController frame = (mvcController) myParent.getSelectedFrame();
                    srcTxt = frame.getText();
                    int[] pos = frame.getTextPosition();
                    if( pos[0] != pos[1] ) {
                        if( pos[0] < pos[1] ) {
                            srcTxt = srcTxt.substring( 0, pos[0] ) + rplcTxt +  srcTxt.substring( pos[1] );
                            frame.setText( srcTxt);
                            frame.setCaretTextPosition( pos[0] + rplcTxt.length() );
                        } else if( pos[0] > pos[1] ) {
                            srcTxt = srcTxt.substring( 0, pos[1] ) + rplcTxt +  srcTxt.substring( pos[0] );
                            frame.setText( srcTxt);
                            frame.setCaretTextPosition( pos[1] + rplcTxt.length() );
                        }
                    }
                } else if( className.endsWith( "mvcWappDescriptor" ) ) {
                    mvcWappDescriptor frame = (mvcWappDescriptor) myParent.getSelectedFrame();
                    srcTxt = frame.getText();
                    int[] pos = frame.getTextPosition();
                    if( pos[0] != pos[1] ) {
                        if( pos[0] < pos[1] ) {
                            srcTxt = srcTxt.substring( 0, pos[0] ) + rplcTxt +  srcTxt.substring( pos[1] );
                            frame.setText( srcTxt);
                            frame.setCaretTextPosition( pos[0] + rplcTxt.length() );
                        } else if( pos[0] > pos[1] ) {
                            srcTxt = srcTxt.substring( 0, pos[1] ) + rplcTxt +  srcTxt.substring( pos[0] );
                            frame.setText( srcTxt);
                            frame.setCaretTextPosition( pos[1] + rplcTxt.length() );
                        }
                    }
                } else if( className.endsWith( "mvcControllerSettingIF" ) ) {
                    mvcControllerSettingIF frame = (mvcControllerSettingIF) myParent.getSelectedFrame();
                    srcTxt = frame.getText();
                    int[] pos = frame.getTextPosition();
                    if( pos[0] != pos[1] ) {
                        if( pos[0] < pos[1] ) {
                            srcTxt = srcTxt.substring( 0, pos[0] ) + rplcTxt +  srcTxt.substring( pos[1] );
                            frame.setText( srcTxt);
                            frame.setCaretTextPosition( pos[0] + rplcTxt.length() );
                        } else if( pos[0] > pos[1] ) {
                            srcTxt = srcTxt.substring( 0, pos[1] ) + rplcTxt +  srcTxt.substring( pos[0] );
                            frame.setText( srcTxt);
                            frame.setCaretTextPosition( pos[1] + rplcTxt.length() );
                        }
                    }
                } else if( className.endsWith( "mvcDBConnectionPoolIF" ) ) {
                    mvcDBConnectionPoolIF frame = (mvcDBConnectionPoolIF) myParent.getSelectedFrame();
                    srcTxt = frame.getText();
                    int[] pos = frame.getTextPosition();
                    if( pos[0] != pos[1] ) {
                        if( pos[0] < pos[1] ) {
                            srcTxt = srcTxt.substring( 0, pos[0] ) + rplcTxt +  srcTxt.substring( pos[1] );
                            frame.setText( srcTxt);
                            frame.setCaretTextPosition( pos[0] + rplcTxt.length() );
                        } else if( pos[0] > pos[1] ) {
                            srcTxt = srcTxt.substring( 0, pos[1] ) + rplcTxt +  srcTxt.substring( pos[0] );
                            frame.setText( srcTxt);
                            frame.setCaretTextPosition( pos[1] + rplcTxt.length() );
                        }
                    }
                } else if( className.endsWith( "sourceJSPEditorIF" ) ) {
                    sourceJSPEditorIF frame = (sourceJSPEditorIF) myParent.getSelectedFrame();
                    srcTxt = frame.getText();
                    int[] pos = frame.getTextPosition();
                    if( pos[0] != pos[1] ) {
                        if( pos[0] < pos[1] ) {
                            srcTxt = srcTxt.substring( 0, pos[0] ) + rplcTxt +  srcTxt.substring( pos[1] );
                            frame.setText( srcTxt);
                            frame.setCaretTextPosition( pos[0] + rplcTxt.length() );
                        } else if( pos[0] > pos[1] ) {
                            srcTxt = srcTxt.substring( 0, pos[1] ) + rplcTxt +  srcTxt.substring( pos[0] );
                            frame.setText( srcTxt);
                            frame.setCaretTextPosition( pos[1] + rplcTxt.length() );
                        }
                    }
                } else if( className.endsWith( "sourceJAVAEditorIF" ) ) {
                    sourceJAVAEditorIF frame = (sourceJAVAEditorIF) myParent.getSelectedFrame();
                    srcTxt = frame.getText();
                    int[] pos = frame.getTextPosition();
                    if( pos[0] != pos[1] ) {
                        if( pos[0] < pos[1] ) {
                            srcTxt = srcTxt.substring( 0, pos[0] ) + rplcTxt +  srcTxt.substring( pos[1] );
                            frame.setText( srcTxt);
                            frame.setCaretTextPosition( pos[0] + rplcTxt.length() );
                        } else if( pos[0] > pos[1] ) {
                            srcTxt = srcTxt.substring( 0, pos[1] ) + rplcTxt +  srcTxt.substring( pos[0] );
                            frame.setText( srcTxt);
                            frame.setCaretTextPosition( pos[1] + rplcTxt.length() );
                        }
                    }
                } else if( className.endsWith( "sourceHTMLEditorIF" ) ) {
                    sourceHTMLEditorIF frame = (sourceHTMLEditorIF) myParent.getSelectedFrame();
                    srcTxt = frame.getText();
                    int[] pos = frame.getTextPosition();
                    if( pos[0] != pos[1] ) {
                        if( pos[0] < pos[1] ) {
                            srcTxt = srcTxt.substring( 0, pos[0] ) + rplcTxt +  srcTxt.substring( pos[1] );
                            frame.setText( srcTxt);
                            frame.setCaretTextPosition( pos[0] + rplcTxt.length() );
                        } else if( pos[0] > pos[1] ) {
                            srcTxt = srcTxt.substring( 0, pos[1] ) + rplcTxt +  srcTxt.substring( pos[0] );
                            frame.setText( srcTxt);
                            frame.setCaretTextPosition( pos[1] + rplcTxt.length() );
                        }
                    }
                }  else if( className.endsWith( "sourceOtherEditorIF" ) ) {
                    sourceOtherEditorIF frame = (sourceOtherEditorIF) myParent.getSelectedFrame();
                    srcTxt = frame.getText();
                    int[] pos = frame.getTextPosition();
                    if( pos[0] != pos[1] ) {
                        if( pos[0] < pos[1] ) {
                            srcTxt = srcTxt.substring( 0, pos[0] ) + rplcTxt +  srcTxt.substring( pos[1] );
                            frame.setText( srcTxt);
                            frame.setCaretTextPosition( pos[0] + rplcTxt.length() );
                        } else if( pos[0] > pos[1] ) {
                            srcTxt = srcTxt.substring( 0, pos[1] ) + rplcTxt +  srcTxt.substring( pos[0] );
                            frame.setText( srcTxt);
                            frame.setCaretTextPosition( pos[1] + rplcTxt.length() );
                        }
                    }
                } else if( className.endsWith( "mvcAntBuilder" ) ) {
                    mvcAntBuilder frame = (mvcAntBuilder) myParent.getSelectedFrame();
                    srcTxt = frame.getText();
                    int[] pos = frame.getTextPosition();
                    if( pos[0] != pos[1] ) {
                        if( pos[0] < pos[1] ) {
                            srcTxt = srcTxt.substring( 0, pos[0] ) + rplcTxt +  srcTxt.substring( pos[1] );
                            frame.setText( srcTxt);
                            frame.setCaretTextPosition( pos[0] + rplcTxt.length() );
                        } else if( pos[0] > pos[1] ) {
                            srcTxt = srcTxt.substring( 0, pos[1] ) + rplcTxt +  srcTxt.substring( pos[0] );
                            frame.setText( srcTxt);
                            frame.setCaretTextPosition( pos[1] + rplcTxt.length() );
                        }
                    }
                }
                
            }
            
        }
        
    }

    
    // replace all occurences
    public void replaceAll() {
        
        while( searchText() ) {
            replace();
        }
        
    }
    
    
}
