/*
 * mvcDBPool.java
 *
 * Created on December 31, 2002, 12:35 PM
 */
import java.io.*;
import javax.swing.*;
import javax.swing.tree.*;
import javax.swing.filechooser.*;

import java.awt.*;
//import java.io.File;
import java.awt.event.*;
import java.beans.*;
import java.util.*;

import java.io.*;
import java.awt.Point;
import java.net.*;
/**
 *
 * @author  test1
 */
public class mvcControllerSetting extends javax.swing.JDialog {
    
    /** Creates new form mvcDBPool */
    public mvcControllerSetting(mainForm parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        try {
            UIManager.setLookAndFeel( LnF );
            SwingUtilities.updateComponentTreeUI( this );
        } catch (UnsupportedLookAndFeelException exc) {
            main.printMessage( exc.toString() );
        } catch (IllegalAccessException exc) {
            main.printMessage( exc.toString() );
        } catch (ClassNotFoundException exc) {
            main.printMessage( exc.toString() );
        } catch (InstantiationException exc) {
            main.printMessage( exc.toString() );
        }
        
        main = parent;
        fileSource = main.getBuildDirectory() + "\\classes\\controller.properties";
        
        if( new File( fileSource ).exists() ) {
            readSetting();
        } else {
            main.printMessage( fileSource + " is not existing." );            
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        targetNotFound = new javax.swing.JTextField();
        jLabel111 = new javax.swing.JLabel();
        multiPart = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        ok = new javax.swing.JButton();
        cancel = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();

        setTitle("Controller Setting");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel1.setBorder(new javax.swing.border.EtchedBorder());
        jLabel1.setFont(new java.awt.Font("Default", 0, 11));
        jLabel1.setText("Target Action Not Found JSP:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jLabel1, gridBagConstraints);

        targetNotFound.setFont(new java.awt.Font("Default", 0, 11));
        targetNotFound.setText("/jsp/error/controllerTargetNotFound.jsp");
        targetNotFound.setPreferredSize(new java.awt.Dimension(300, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(targetNotFound, gridBagConstraints);

        jLabel111.setFont(new java.awt.Font("Default", 0, 11));
        jLabel111.setText("MultiPart Handler JSP:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jLabel111, gridBagConstraints);

        multiPart.setFont(new java.awt.Font("Default", 0, 11));
        multiPart.setText("/jsp/process/upload.jsp");
        multiPart.setPreferredSize(new java.awt.Dimension(300, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(multiPart, gridBagConstraints);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.NORTH);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        ok.setFont(new java.awt.Font("Default", 0, 11));
        ok.setText("Ok");
        ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okActionPerformed(evt);
            }
        });

        jPanel3.add(ok);

        cancel.setFont(new java.awt.Font("Default", 0, 11));
        cancel.setText("Cancel");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        jPanel3.add(cancel);

        getContentPane().add(jPanel3, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanel4, java.awt.BorderLayout.EAST);

        getContentPane().add(jPanel5, java.awt.BorderLayout.WEST);

        pack();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setSize(new java.awt.Dimension(541, 194));
        setLocation((screenSize.width-541)/2,(screenSize.height-194)/2);
    }//GEN-END:initComponents
    
    private void okActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okActionPerformed
        // Add your handling code here:
        if( saveToFile() ) {
            setVisible(false);
            dispose();
        }
    }//GEN-LAST:event_okActionPerformed
    
    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        // Add your handling code here:
        setVisible(false);
        dispose();
    }//GEN-LAST:event_cancelActionPerformed
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new mvcDBPool( new mainForm(), true ).show();
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel4;
    private javax.swing.JButton ok;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JTextField targetNotFound;
    private javax.swing.JButton cancel;
    private javax.swing.JTextField multiPart;
    private javax.swing.JLabel jLabel111;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
    
    private String LnF = "com.sun.java.swing.plaf.windows.WindowsLookAndFeel";
    private mainForm main;
    private String fileSource = new String();
    private DataInputStream in;
    
    private String PtargetNotFound = new String();
    private String PmultiPart = new String();    
    
    // read data
    public boolean readSetting() {
        
        boolean rvalue = true;
        String s = new String();
        
        try {
            in = new DataInputStream( new BufferedInputStream( new FileInputStream( fileSource ) ) );
            try {
                while( (s = in.readLine())!= null ) {
                    if( s.startsWith( "targetNotFoundErrorJSP" ) ) {
                        targetNotFound.setText( s.substring( s.indexOf( '=' )+1).trim() );
                    } else if( s.startsWith( "multiPartJSP" ) ) {
                        multiPart.setText( s.substring( s.indexOf( '=' )+1).trim() );
                    }
                }
                
                try {
                    in.close();
                } catch( IOException exc ){
                    main.printMessage( exc.toString());
                    rvalue = false;
                }
            } catch( IOException exc ){
                main.printMessage( exc.toString());
                rvalue = false;
            }
        } catch( IOException exc ) {
            main.printMessage( exc.toString());
            rvalue = false;
        }
        
        return rvalue;
        
    }
    
    
    // inner class
    class outFile extends DataOutputStream {
        
        public outFile( String filename ) throws IOException {
            super( new BufferedOutputStream( new FileOutputStream( filename ) ) );
        }
        
        public outFile(File file) throws IOException {
            this(file.getPath());
        }
        
    }
    
    
    // inner class
    class filter extends Object implements FilenameFilter {
        
        String afn;
        
        public filter( String afn ) {
            this.afn = afn;
        }
        
        public boolean accept(File dir, String name) {
            // Strip path information:
            String f = new File(name).getName();
            return f.indexOf(afn) != -1;
        }
        
    }
    
    
    public String getFileSource() {
        return fileSource;
    }
    
    private boolean saveCodeToFile(  String code, String filename ) {
        
        boolean rvalue = false;
        
        try {
            FileWriter fw = new FileWriter( filename, false);
            BufferedWriter br = new BufferedWriter(fw);
            PrintWriter pw = new PrintWriter(br);
            
            pw.println( code );
            
            pw.close();
            br.close();
            fw.close();
            
            rvalue = true;
            
        } catch (IOException io) {
            main.printMessage( io.toString() );
        } catch (Exception e) {
            main.printMessage( e.toString() );
        }
        
        return rvalue;
    }
    
    private boolean saveToFile() {
        
        boolean rvalue = true;
        
        PtargetNotFound = targetNotFound.getText().trim();
        PmultiPart = multiPart.getText().trim();
        
        if( PtargetNotFound.equals( "" ) || PmultiPart.equals( "" ) ) {
            rvalue = false;
        } else {
            
        }                
                
        if( rvalue ) {
            String dbprop = "# Controller properties\n\n" +
            "targetNotFoundErrorJSP   = " + PtargetNotFound + "\n" +
            "multiPartJSP             = " + PmultiPart;
            
            if( !saveCodeToFile( dbprop, fileSource) ) {
                main.printMessage( "Error: " + fileSource + " not saved." );
                rvalue = false;
            }
        }
        
        
        return rvalue;
    }
    
}
