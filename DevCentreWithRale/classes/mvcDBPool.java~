/*
 * mvcDBPool.java
 *
 * Created on December 31, 2002, 12:35 PM
 */
import java.io.*;
import javax.swing.*;
import javax.swing.tree.*;
import javax.swing.filechooser.*;

import java.awt.*;
//import java.io.File;
import java.awt.event.*;
import java.beans.*;
import java.util.*;

import java.io.*;
import java.awt.Point;
import java.net.*;
/**
 *
 * @author  test1
 */
public class mvcDBPool extends javax.swing.JDialog {
    
    /** Creates new form mvcDBPool */
    public mvcDBPool( mainForm parent, boolean modal ) {
        super(parent, modal);
        initComponents();
        
        try {
            UIManager.setLookAndFeel( LnF );
            SwingUtilities.updateComponentTreeUI( this );
        } catch (UnsupportedLookAndFeelException exc) {
            main.printMessage( exc.toString() );
        } catch (IllegalAccessException exc) {
            main.printMessage( exc.toString() );
        } catch (ClassNotFoundException exc) {
            main.printMessage( exc.toString() );
        } catch (InstantiationException exc) {
            main.printMessage( exc.toString() );
        }
        
        main = parent;
        
        // preset to MySQL settings
        mysqlConfig();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        close = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        parametersPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        contextNameTextField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        resourceNameTextField = new javax.swing.JTextField();
        jLabel111 = new javax.swing.JLabel();
        jLabel1111 = new javax.swing.JLabel();
        jLabel11111 = new javax.swing.JLabel();
        maxActiveTextField = new javax.swing.JTextField();
        maxIdleTextField = new javax.swing.JTextField();
        maxWaitTimeTextField = new javax.swing.JTextField();
        jLabel1111122 = new javax.swing.JLabel();
        jLabel111111 = new javax.swing.JLabel();
        jLabel111112 = new javax.swing.JLabel();
        jLabel1111121 = new javax.swing.JLabel();
        jLabel1111123 = new javax.swing.JLabel();
        jLabel11111231 = new javax.swing.JLabel();
        dbNameTextField = new javax.swing.JTextField();
        userNameTextField = new javax.swing.JTextField();
        passwordTextField = new javax.swing.JTextField();
        classNameTextField = new javax.swing.JTextField();
        ipAddressTextField = new javax.swing.JTextField();
        portTextField = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        mysqlRadioButton = new javax.swing.JRadioButton();
        postgresqlRadioButton = new javax.swing.JRadioButton();
        oracleRadioButton = new javax.swing.JRadioButton();
        genericRadioButton = new javax.swing.JRadioButton();
        jLabel111112311 = new javax.swing.JLabel();
        sidTextField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        serverResourceFactoryPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        resourceFactoryTextArea = new javax.swing.JTextArea();
        webApplicationResourcePanel = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        webApplicationTextArea = new javax.swing.JTextArea();

        setTitle("DB Connection Pool");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        getContentPane().add(jPanel2, java.awt.BorderLayout.NORTH);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        close.setFont(new java.awt.Font("Default", 0, 11));
        close.setText("Close");
        close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeActionPerformed(evt);
            }
        });

        jPanel3.add(close);

        getContentPane().add(jPanel3, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanel4, java.awt.BorderLayout.EAST);

        getContentPane().add(jPanel5, java.awt.BorderLayout.WEST);

        jPanel1.setLayout(new java.awt.BorderLayout());

        parametersPanel.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Default", 0, 11));
        jLabel1.setText("Context Name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        parametersPanel.add(jLabel1, gridBagConstraints);

        contextNameTextField.setFont(new java.awt.Font("Default", 0, 11));
        contextNameTextField.setText("DBTest");
        contextNameTextField.setMinimumSize(new java.awt.Dimension(200, 20));
        contextNameTextField.setPreferredSize(new java.awt.Dimension(200, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        parametersPanel.add(contextNameTextField, gridBagConstraints);

        jLabel11.setFont(new java.awt.Font("Default", 0, 11));
        jLabel11.setText("Resource Name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        parametersPanel.add(jLabel11, gridBagConstraints);

        resourceNameTextField.setFont(new java.awt.Font("Default", 0, 11));
        resourceNameTextField.setText("TestDB");
        resourceNameTextField.setMinimumSize(new java.awt.Dimension(200, 20));
        resourceNameTextField.setPreferredSize(new java.awt.Dimension(200, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        parametersPanel.add(resourceNameTextField, gridBagConstraints);

        jLabel111.setFont(new java.awt.Font("Default", 0, 11));
        jLabel111.setText("Max. Active Connections:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        parametersPanel.add(jLabel111, gridBagConstraints);

        jLabel1111.setFont(new java.awt.Font("Default", 0, 11));
        jLabel1111.setText("Max. Idle Connections:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        parametersPanel.add(jLabel1111, gridBagConstraints);

        jLabel11111.setFont(new java.awt.Font("Default", 0, 11));
        jLabel11111.setText("Max Wait Time (msec):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        parametersPanel.add(jLabel11111, gridBagConstraints);

        maxActiveTextField.setFont(new java.awt.Font("Default", 0, 11));
        maxActiveTextField.setText("10");
        maxActiveTextField.setMinimumSize(new java.awt.Dimension(75, 20));
        maxActiveTextField.setPreferredSize(new java.awt.Dimension(75, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        parametersPanel.add(maxActiveTextField, gridBagConstraints);

        maxIdleTextField.setFont(new java.awt.Font("Default", 0, 11));
        maxIdleTextField.setText("5");
        maxIdleTextField.setMinimumSize(new java.awt.Dimension(75, 20));
        maxIdleTextField.setPreferredSize(new java.awt.Dimension(75, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        parametersPanel.add(maxIdleTextField, gridBagConstraints);

        maxWaitTimeTextField.setFont(new java.awt.Font("Default", 0, 11));
        maxWaitTimeTextField.setText("-1");
        maxWaitTimeTextField.setMinimumSize(new java.awt.Dimension(75, 20));
        maxWaitTimeTextField.setPreferredSize(new java.awt.Dimension(75, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        parametersPanel.add(maxWaitTimeTextField, gridBagConstraints);

        jLabel1111122.setFont(new java.awt.Font("Default", 0, 11));
        jLabel1111122.setText("Database Name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        parametersPanel.add(jLabel1111122, gridBagConstraints);

        jLabel111111.setFont(new java.awt.Font("Default", 0, 11));
        jLabel111111.setText("DB User Name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        parametersPanel.add(jLabel111111, gridBagConstraints);

        jLabel111112.setFont(new java.awt.Font("Default", 0, 11));
        jLabel111112.setText("DB User Password:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        parametersPanel.add(jLabel111112, gridBagConstraints);

        jLabel1111121.setFont(new java.awt.Font("Default", 0, 11));
        jLabel1111121.setText("Driver Classname:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        parametersPanel.add(jLabel1111121, gridBagConstraints);

        jLabel1111123.setFont(new java.awt.Font("Default", 0, 11));
        jLabel1111123.setText("IP Address:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        parametersPanel.add(jLabel1111123, gridBagConstraints);

        jLabel11111231.setFont(new java.awt.Font("Default", 0, 11));
        jLabel11111231.setText("Port:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        parametersPanel.add(jLabel11111231, gridBagConstraints);

        dbNameTextField.setFont(new java.awt.Font("Default", 0, 11));
        dbNameTextField.setText("myDB");
        dbNameTextField.setMinimumSize(new java.awt.Dimension(200, 20));
        dbNameTextField.setPreferredSize(new java.awt.Dimension(200, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        parametersPanel.add(dbNameTextField, gridBagConstraints);

        userNameTextField.setFont(new java.awt.Font("Default", 0, 11));
        userNameTextField.setText("username");
        userNameTextField.setMinimumSize(new java.awt.Dimension(200, 20));
        userNameTextField.setPreferredSize(new java.awt.Dimension(200, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        parametersPanel.add(userNameTextField, gridBagConstraints);

        passwordTextField.setFont(new java.awt.Font("Default", 0, 11));
        passwordTextField.setText("password");
        passwordTextField.setMinimumSize(new java.awt.Dimension(200, 20));
        passwordTextField.setPreferredSize(new java.awt.Dimension(200, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        parametersPanel.add(passwordTextField, gridBagConstraints);

        classNameTextField.setFont(new java.awt.Font("Default", 0, 11));
        classNameTextField.setText("driver class name");
        classNameTextField.setMinimumSize(new java.awt.Dimension(200, 20));
        classNameTextField.setPreferredSize(new java.awt.Dimension(200, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        parametersPanel.add(classNameTextField, gridBagConstraints);

        ipAddressTextField.setFont(new java.awt.Font("Default", 0, 11));
        ipAddressTextField.setText("127.0.0.1");
        ipAddressTextField.setMinimumSize(new java.awt.Dimension(200, 20));
        ipAddressTextField.setPreferredSize(new java.awt.Dimension(200, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        parametersPanel.add(ipAddressTextField, gridBagConstraints);

        portTextField.setFont(new java.awt.Font("Default", 0, 11));
        portTextField.setText("3306");
        portTextField.setMinimumSize(new java.awt.Dimension(75, 20));
        portTextField.setPreferredSize(new java.awt.Dimension(75, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        parametersPanel.add(portTextField, gridBagConstraints);

        jPanel8.setLayout(new java.awt.GridBagLayout());

        jPanel8.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.EtchedBorder(), "Database Template"));
        mysqlRadioButton.setFont(new java.awt.Font("Default", 0, 11));
        mysqlRadioButton.setSelected(true);
        mysqlRadioButton.setText("MySQL Server");
        buttonGroup1.add(mysqlRadioButton);
        mysqlRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mysqlRadioButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel8.add(mysqlRadioButton, gridBagConstraints);

        postgresqlRadioButton.setFont(new java.awt.Font("Default", 0, 11));
        postgresqlRadioButton.setText("PostgreSQL Server");
        buttonGroup1.add(postgresqlRadioButton);
        postgresqlRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postgresqlRadioButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel8.add(postgresqlRadioButton, gridBagConstraints);

        oracleRadioButton.setFont(new java.awt.Font("Default", 0, 11));
        oracleRadioButton.setText("Oracle Server");
        buttonGroup1.add(oracleRadioButton);
        oracleRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oracleRadioButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel8.add(oracleRadioButton, gridBagConstraints);

        genericRadioButton.setFont(new java.awt.Font("Default", 0, 11));
        genericRadioButton.setText("Generic");
        buttonGroup1.add(genericRadioButton);
        genericRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genericRadioButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel8.add(genericRadioButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridheight = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.insets = new java.awt.Insets(5, 25, 5, 5);
        parametersPanel.add(jPanel8, gridBagConstraints);

        jLabel111112311.setFont(new java.awt.Font("Default", 0, 11));
        jLabel111112311.setText("SID:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        parametersPanel.add(jLabel111112311, gridBagConstraints);

        sidTextField.setEditable(false);
        sidTextField.setFont(new java.awt.Font("Default", 0, 11));
        sidTextField.setText("sid");
        sidTextField.setMinimumSize(new java.awt.Dimension(75, 20));
        sidTextField.setPreferredSize(new java.awt.Dimension(75, 20));
        sidTextField.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        parametersPanel.add(sidTextField, gridBagConstraints);

        jButton1.setText("jButton1");
        parametersPanel.add(jButton1, new java.awt.GridBagConstraints());

        jTabbedPane1.addTab("Parameters", parametersPanel);

        serverResourceFactoryPanel.setLayout(new java.awt.BorderLayout());

        resourceFactoryTextArea.setFont(new java.awt.Font("Courier New", 0, 12));
        jScrollPane1.setViewportView(resourceFactoryTextArea);

        serverResourceFactoryPanel.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Server Resource Factory", serverResourceFactoryPanel);

        webApplicationResourcePanel.setLayout(new java.awt.BorderLayout());

        webApplicationTextArea.setFont(new java.awt.Font("Courier New", 0, 12));
        jScrollPane11.setViewportView(webApplicationTextArea);

        webApplicationResourcePanel.add(jScrollPane11, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Web Application Resource", webApplicationResourcePanel);

        jPanel1.add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setSize(new java.awt.Dimension(625, 489));
        setLocation((screenSize.width-625)/2,(screenSize.height-489)/2);
    }//GEN-END:initComponents
    
    private void genericRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genericRadioButtonActionPerformed
        // Add your handling code here:
        genericConfig();
    }//GEN-LAST:event_genericRadioButtonActionPerformed
    
    private void oracleRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oracleRadioButtonActionPerformed
        // Add your handling code here:
        oracleConfig();
    }//GEN-LAST:event_oracleRadioButtonActionPerformed
    
    private void postgresqlRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postgresqlRadioButtonActionPerformed
        // Add your handling code here:
        postgresqlConfig();
    }//GEN-LAST:event_postgresqlRadioButtonActionPerformed
    
    private void mysqlRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mysqlRadioButtonActionPerformed
        // Add your handling code here:
        mysqlConfig();
    }//GEN-LAST:event_mysqlRadioButtonActionPerformed
    
    private void closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeActionPerformed
        // Add your handling code here:
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeActionPerformed
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new mvcDBPool( new mainForm(), true ).show();
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField userNameTextField;
    private javax.swing.JTextArea webApplicationTextArea;
    private javax.swing.JButton close;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel jLabel111112311;
    private javax.swing.JLabel jLabel111112;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel jLabel1111121;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField maxWaitTimeTextField;
    private javax.swing.JLabel jLabel111111;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButton mysqlRadioButton;
    private javax.swing.JTextField dbNameTextField;
    private javax.swing.JLabel jLabel1111123;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel serverResourceFactoryPanel;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JTextField portTextField;
    private javax.swing.JLabel jLabel1111122;
    private javax.swing.JPanel parametersPanel;
    private javax.swing.JTextArea resourceFactoryTextArea;
    private javax.swing.JRadioButton postgresqlRadioButton;
    private javax.swing.JLabel jLabel111;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JTextField classNameTextField;
    private javax.swing.JTextField maxActiveTextField;
    private javax.swing.JLabel jLabel11111231;
    private javax.swing.JLabel jLabel11111;
    private javax.swing.JLabel jLabel1111;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JTextField passwordTextField;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextField sidTextField;
    private javax.swing.JRadioButton genericRadioButton;
    private javax.swing.JTextField contextNameTextField;
    private javax.swing.JPanel webApplicationResourcePanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField ipAddressTextField;
    private javax.swing.JRadioButton oracleRadioButton;
    private javax.swing.JTextField maxIdleTextField;
    private javax.swing.JTextField resourceNameTextField;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
    
    private String LnF = "com.sun.java.swing.plaf.windows.WindowsLookAndFeel";
    private mainForm main;
    
    final String CONTEXT_NAME = "<CONTEXT_NAME>";
    final String RESOURCE_NAME = "<RESOURCE_NAME>";
    final String DRIVER_CLASS_NAME = "<DRIVER_CLASS_NAME>";
    final String IP_ADDRESS = "<IP_ADDRESS>";
    final String PORT = "<PORT>";
    final String DATABASE_NAME = "<DATABASE_NAME>";
    final String USER_NAME = "<USER_NAME>";
    final String USER_PASSWORD = "<USER_PASSWORD>";
    final String MAX_ACTIVE = "<MAX_ACTIVE>";
    final String MAX_IDLE = "<MAX_IDLE>";
    final String MAX_WAIT = "<MAX_WAIT>";
    final String SID = "<SID>";
    
    String context_Name = new String();
    String resource_Name = new String();
    String driver_Class_Name = new String();
    String ip_Address = new String();
    String port = new String();
    String database_Name = new String();
    String user_Name = new String();
    String user_Password = new String();
    String max_Active = new String();
    String max_Idle = new String();
    String max_Wait = new String();
    String sid = new String();
    

    public void getParameters() {
        
        context_Name = contextNameTextField.getText().trim();
        resource_Name = resourceNameTextField.getText().trim();
        driver_Class_Name = classNameTextField.getText().trim();
        ip_Address = ipAddressTextField.getText().trim();
        port = portTextField.getText().trim();
        database_Name = dbNameTextField.getText().trim();
        user_Name = userNameTextField.getText().trim();
        user_Password = passwordTextField.getText().trim();
        max_Active = maxActiveTextField.getText().trim();
        max_Idle = maxIdleTextField.getText().trim();
        max_Wait = maxWaitTimeTextField.getText().trim();
        sid = sidTextField.getText().trim();
        
    }
        
    public void mysqlConfig() {

        sidTextField.setEnabled( false );
        sidTextField.setEditable( false );
        portTextField.setText( "3306" );
        
        getParameters();
        
        String fileSource = main.getArchiverBaseDir() + "\\templates\\datasource\\datasource-mysql.xml.tpt";                
                                        
        String rvalue = new String();
        String s = new String();
        DataInputStream in;
        
        try {
            in = new DataInputStream( new BufferedInputStream( new FileInputStream( fileSource ) ) );
            try {
                while( (s = in.readLine())!= null ) {
                    if( s.indexOf( CONTEXT_NAME ) != -1 ) {
                        s = s.substring( 0, s.indexOf( CONTEXT_NAME ) ) + context_Name +
                        s.substring( s.indexOf( CONTEXT_NAME ) +  CONTEXT_NAME.length() );
                    }
                    
                    if( s.indexOf( RESOURCE_NAME )  != -1 ) {
                        s = s.substring( 0, s.indexOf( RESOURCE_NAME ) ) + resource_Name +
                        s.substring( s.indexOf( RESOURCE_NAME ) +  RESOURCE_NAME.length() );
                    }
                    
                    if( s.indexOf( DRIVER_CLASS_NAME )  != -1 ) {
                        s = s.substring( 0, s.indexOf( DRIVER_CLASS_NAME ) ) + driver_Class_Name +
                        s.substring( s.indexOf( DRIVER_CLASS_NAME ) +  DRIVER_CLASS_NAME.length() );
                    }
                    
                    if( s.indexOf( IP_ADDRESS )  != -1 ) {
                        s = s.substring( 0, s.indexOf( IP_ADDRESS ) ) + ip_Address +
                        s.substring( s.indexOf( IP_ADDRESS ) +  IP_ADDRESS.length() );
                    }
                    
                    if( s.indexOf( PORT )  != -1 ) {
                        s = s.substring( 0, s.indexOf( PORT ) ) + port +
                        s.substring( s.indexOf( PORT ) +  PORT.length() );
                    }
                    
                    if( s.indexOf( DATABASE_NAME )  != -1 ) {
                        s = s.substring( 0, s.indexOf( DATABASE_NAME ) ) + database_Name +
                        s.substring( s.indexOf( DATABASE_NAME ) +  DATABASE_NAME.length() );
                    }
                    
                    if( s.indexOf( USER_NAME )  != -1 ) {
                        s = s.substring( 0, s.indexOf( USER_NAME ) ) + user_Name +
                        s.substring( s.indexOf( USER_NAME ) +  USER_NAME.length() );
                    }
                    
                    if( s.indexOf( USER_PASSWORD )  != -1 ) {
                        s = s.substring( 0, s.indexOf( USER_PASSWORD ) ) + user_Password +
                        s.substring( s.indexOf( USER_PASSWORD ) +  USER_PASSWORD.length() );
                    }
                    
                    if( s.indexOf( MAX_ACTIVE )  != -1 ) {
                        s = s.substring( 0, s.indexOf( MAX_ACTIVE ) ) + max_Active +
                        s.substring( s.indexOf( MAX_ACTIVE ) +  MAX_ACTIVE.length() );
                    }
                    
                    if( s.indexOf( MAX_IDLE )  != -1 ) {
                        s = s.substring( 0, s.indexOf( MAX_IDLE ) ) + max_Idle +
                        s.substring( s.indexOf( MAX_IDLE ) +  MAX_IDLE.length() );
                    }
                    
                    if( s.indexOf( MAX_WAIT )  != -1 ) {
                        s = s.substring( 0, s.indexOf( MAX_WAIT ) ) + max_Wait +
                        s.substring( s.indexOf( MAX_WAIT ) +  MAX_WAIT.length() );
                    }
                    
                    if( s.indexOf( SID )  != -1 ) {
                        s = s.substring( 0, s.indexOf( SID ) ) + sid +
                        s.substring( s.indexOf( SID ) +  SID.length() );
                    }
                    
                    rvalue += s + '\n';
                }
                
                try {
                    in.close();
                } catch( IOException exc ){
                    main.printMessage( exc.toString());
                }
            } catch( IOException exc ){
                main.printMessage( exc.toString());
            }
        } catch( IOException exc ) {
            main.printMessage( exc.toString());
        }
        
        resourceFactoryTextArea.setText( rvalue );
        resourceFactoryTextArea.setCaretPosition( 0 );
        
        // -------------------------------------
        
        fileSource = main.getArchiverBaseDir() + "\\templates\\datasource\\web.mysql.xml.tpt";                
                                        
        rvalue = new String();
        s = new String();        
        
        try {
            in = new DataInputStream( new BufferedInputStream( new FileInputStream( fileSource ) ) );
            try {
                while( (s = in.readLine())!= null ) {                   
                    
                    if( s.indexOf( RESOURCE_NAME )  != -1 ) {
                        s = s.substring( 0, s.indexOf( RESOURCE_NAME ) ) + resource_Name +
                        s.substring( s.indexOf( RESOURCE_NAME ) +  RESOURCE_NAME.length() );
                    }
                                        
                    rvalue += s + '\n';
                }
                
                try {
                    in.close();
                } catch( IOException exc ){
                    main.printMessage( exc.toString());
                }
            } catch( IOException exc ){
                main.printMessage( exc.toString());
            }
        } catch( IOException exc ) {
            main.printMessage( exc.toString());
        }
                        
        webApplicationTextArea.setText( rvalue );
        webApplicationTextArea.setCaretPosition( 0 );
        
    }
    
    public void postgresqlConfig() {                

        sidTextField.setEnabled( false );
        sidTextField.setEditable( false );
        portTextField.setText( "5432" );
        
        getParameters();
        
        String fileSource = main.getArchiverBaseDir() + "\\templates\\datasource\\datasource-postgresql.xml.tpt";                
                                        
        String rvalue = new String();
        String s = new String();
        DataInputStream in;
        
        try {
            in = new DataInputStream( new BufferedInputStream( new FileInputStream( fileSource ) ) );
            try {
                while( (s = in.readLine())!= null ) {
                    if( s.indexOf( CONTEXT_NAME ) != -1 ) {
                        s = s.substring( 0, s.indexOf( CONTEXT_NAME ) ) + context_Name +
                        s.substring( s.indexOf( CONTEXT_NAME ) +  CONTEXT_NAME.length() );
                    }
                    
                    if( s.indexOf( RESOURCE_NAME )  != -1 ) {
                        s = s.substring( 0, s.indexOf( RESOURCE_NAME ) ) + resource_Name +
                        s.substring( s.indexOf( RESOURCE_NAME ) +  RESOURCE_NAME.length() );
                    }
                    
                    if( s.indexOf( DRIVER_CLASS_NAME )  != -1 ) {
                        s = s.substring( 0, s.indexOf( DRIVER_CLASS_NAME ) ) + driver_Class_Name +
                        s.substring( s.indexOf( DRIVER_CLASS_NAME ) +  DRIVER_CLASS_NAME.length() );
                    }
                    
                    if( s.indexOf( IP_ADDRESS )  != -1 ) {
                        s = s.substring( 0, s.indexOf( IP_ADDRESS ) ) + ip_Address +
                        s.substring( s.indexOf( IP_ADDRESS ) +  IP_ADDRESS.length() );
                    }
                    
                    if( s.indexOf( PORT )  != -1 ) {
                        s = s.substring( 0, s.indexOf( PORT ) ) + port +
                        s.substring( s.indexOf( PORT ) +  PORT.length() );
                    }
                    
                    if( s.indexOf( DATABASE_NAME )  != -1 ) {
                        s = s.substring( 0, s.indexOf( DATABASE_NAME ) ) + database_Name +
                        s.substring( s.indexOf( DATABASE_NAME ) +  DATABASE_NAME.length() );
                    }
                    
                    if( s.indexOf( USER_NAME )  != -1 ) {
                        s = s.substring( 0, s.indexOf( USER_NAME ) ) + user_Name +
                        s.substring( s.indexOf( USER_NAME ) +  USER_NAME.length() );
                    }
                    
                    if( s.indexOf( USER_PASSWORD )  != -1 ) {
                        s = s.substring( 0, s.indexOf( USER_PASSWORD ) ) + user_Password +
                        s.substring( s.indexOf( USER_PASSWORD ) +  USER_PASSWORD.length() );
                    }
                    
                    if( s.indexOf( MAX_ACTIVE )  != -1 ) {
                        s = s.substring( 0, s.indexOf( MAX_ACTIVE ) ) + max_Active +
                        s.substring( s.indexOf( MAX_ACTIVE ) +  MAX_ACTIVE.length() );
                    }
                    
                    if( s.indexOf( MAX_IDLE )  != -1 ) {
                        s = s.substring( 0, s.indexOf( MAX_IDLE ) ) + max_Idle +
                        s.substring( s.indexOf( MAX_IDLE ) +  MAX_IDLE.length() );
                    }
                    
                    if( s.indexOf( MAX_WAIT )  != -1 ) {
                        s = s.substring( 0, s.indexOf( MAX_WAIT ) ) + max_Wait +
                        s.substring( s.indexOf( MAX_WAIT ) +  MAX_WAIT.length() );
                    }
                    
                    if( s.indexOf( SID )  != -1 ) {
                        s = s.substring( 0, s.indexOf( SID ) ) + sid +
                        s.substring( s.indexOf( SID ) +  SID.length() );
                    }
                    
                    rvalue += s + '\n';
                }
                
                try {
                    in.close();
                } catch( IOException exc ){
                    main.printMessage( exc.toString());
                }
            } catch( IOException exc ){
                main.printMessage( exc.toString());
            }
        } catch( IOException exc ) {
            main.printMessage( exc.toString());
        }
        
        resourceFactoryTextArea.setText( rvalue );
        resourceFactoryTextArea.setCaretPosition( 0 );
        
        // -------------------------------------
        
        fileSource = main.getArchiverBaseDir() + "\\templates\\datasource\\web.postgresql.xml.tpt";                
                                        
        rvalue = new String();
        s = new String();        
        
        try {
            in = new DataInputStream( new BufferedInputStream( new FileInputStream( fileSource ) ) );
            try {
                while( (s = in.readLine())!= null ) {                   
                    
                    if( s.indexOf( RESOURCE_NAME )  != -1 ) {
                        s = s.substring( 0, s.indexOf( RESOURCE_NAME ) ) + resource_Name +
                        s.substring( s.indexOf( RESOURCE_NAME ) +  RESOURCE_NAME.length() );
                    }
                                        
                    rvalue += s + '\n';
                }
                
                try {
                    in.close();
                } catch( IOException exc ){
                    main.printMessage( exc.toString());
                }
            } catch( IOException exc ){
                main.printMessage( exc.toString());
            }
        } catch( IOException exc ) {
            main.printMessage( exc.toString());
        }
                        
        webApplicationTextArea.setText( rvalue );
        webApplicationTextArea.setCaretPosition( 0 );
        
    }
    
    public void oracleConfig() {
        
        sidTextField.setEnabled( true );
        sidTextField.setEditable( true );
        portTextField.setText( "1521" );
        
        getParameters();
        
        String fileSource = main.getArchiverBaseDir() + "\\templates\\datasource\\datasource-oracle.xml.tpt";                
                                        
        String rvalue = new String();
        String s = new String();
        DataInputStream in;
        
        try {
            in = new DataInputStream( new BufferedInputStream( new FileInputStream( fileSource ) ) );
            try {
                while( (s = in.readLine())!= null ) {
                    if( s.indexOf( CONTEXT_NAME ) != -1 ) {
                        s = s.substring( 0, s.indexOf( CONTEXT_NAME ) ) + context_Name +
                        s.substring( s.indexOf( CONTEXT_NAME ) +  CONTEXT_NAME.length() );
                    }
                    
                    if( s.indexOf( RESOURCE_NAME )  != -1 ) {
                        s = s.substring( 0, s.indexOf( RESOURCE_NAME ) ) + resource_Name +
                        s.substring( s.indexOf( RESOURCE_NAME ) +  RESOURCE_NAME.length() );
                    }
                    
                    if( s.indexOf( DRIVER_CLASS_NAME )  != -1 ) {
                        s = s.substring( 0, s.indexOf( DRIVER_CLASS_NAME ) ) + driver_Class_Name +
                        s.substring( s.indexOf( DRIVER_CLASS_NAME ) +  DRIVER_CLASS_NAME.length() );
                    }
                    
                    if( s.indexOf( IP_ADDRESS )  != -1 ) {
                        s = s.substring( 0, s.indexOf( IP_ADDRESS ) ) + ip_Address +
                        s.substring( s.indexOf( IP_ADDRESS ) +  IP_ADDRESS.length() );
                    }
                    
                    if( s.indexOf( PORT )  != -1 ) {
                        s = s.substring( 0, s.indexOf( PORT ) ) + port +
                        s.substring( s.indexOf( PORT ) +  PORT.length() );
                    }
                    
                    if( s.indexOf( DATABASE_NAME )  != -1 ) {
                        s = s.substring( 0, s.indexOf( DATABASE_NAME ) ) + database_Name +
                        s.substring( s.indexOf( DATABASE_NAME ) +  DATABASE_NAME.length() );
                    }
                    
                    if( s.indexOf( USER_NAME )  != -1 ) {
                        s = s.substring( 0, s.indexOf( USER_NAME ) ) + user_Name +
                        s.substring( s.indexOf( USER_NAME ) +  USER_NAME.length() );
                    }
                    
                    if( s.indexOf( USER_PASSWORD )  != -1 ) {
                        s = s.substring( 0, s.indexOf( USER_PASSWORD ) ) + user_Password +
                        s.substring( s.indexOf( USER_PASSWORD ) +  USER_PASSWORD.length() );
                    }
                    
                    if( s.indexOf( MAX_ACTIVE )  != -1 ) {
                        s = s.substring( 0, s.indexOf( MAX_ACTIVE ) ) + max_Active +
                        s.substring( s.indexOf( MAX_ACTIVE ) +  MAX_ACTIVE.length() );
                    }
                    
                    if( s.indexOf( MAX_IDLE )  != -1 ) {
                        s = s.substring( 0, s.indexOf( MAX_IDLE ) ) + max_Idle +
                        s.substring( s.indexOf( MAX_IDLE ) +  MAX_IDLE.length() );
                    }
                    
                    if( s.indexOf( MAX_WAIT )  != -1 ) {
                        s = s.substring( 0, s.indexOf( MAX_WAIT ) ) + max_Wait +
                        s.substring( s.indexOf( MAX_WAIT ) +  MAX_WAIT.length() );
                    }
                    
                    if( s.indexOf( SID )  != -1 ) {
                        s = s.substring( 0, s.indexOf( SID ) ) + sid +
                        s.substring( s.indexOf( SID ) +  SID.length() );
                    }
                    
                    rvalue += s + '\n';
                }
                
                try {
                    in.close();
                } catch( IOException exc ){
                    main.printMessage( exc.toString());
                }
            } catch( IOException exc ){
                main.printMessage( exc.toString());
            }
        } catch( IOException exc ) {
            main.printMessage( exc.toString());
        }
        
        resourceFactoryTextArea.setText( rvalue );
        resourceFactoryTextArea.setCaretPosition( 0 );
        
        // -------------------------------------
        
        fileSource = main.getArchiverBaseDir() + "\\templates\\datasource\\web.oracle.xml.tpt";                
                                        
        rvalue = new String();
        s = new String();        
        
        try {
            in = new DataInputStream( new BufferedInputStream( new FileInputStream( fileSource ) ) );
            try {
                while( (s = in.readLine())!= null ) {                   
                    
                    if( s.indexOf( RESOURCE_NAME )  != -1 ) {
                        s = s.substring( 0, s.indexOf( RESOURCE_NAME ) ) + resource_Name +
                        s.substring( s.indexOf( RESOURCE_NAME ) +  RESOURCE_NAME.length() );
                    }
                                        
                    rvalue += s + '\n';
                }
                
                try {
                    in.close();
                } catch( IOException exc ){
                    main.printMessage( exc.toString());
                }
            } catch( IOException exc ){
                main.printMessage( exc.toString());
            }
        } catch( IOException exc ) {
            main.printMessage( exc.toString());
        }
                        
        webApplicationTextArea.setText( rvalue );
        webApplicationTextArea.setCaretPosition( 0 );
        
        
    }
    
    public void genericConfig() {
        
        sidTextField.setEnabled( false );
        sidTextField.setEditable( false );
        portTextField.setText( "9999" );
        
        getParameters();
        
        String fileSource = main.getArchiverBaseDir() + "\\templates\\datasource\\datasource-generic.xml.tpt";                
                                        
        String rvalue = new String();
        String s = new String();
        DataInputStream in;
        
        try {
            in = new DataInputStream( new BufferedInputStream( new FileInputStream( fileSource ) ) );
            try {
                while( (s = in.readLine())!= null ) {
                    if( s.indexOf( CONTEXT_NAME ) != -1 ) {
                        s = s.substring( 0, s.indexOf( CONTEXT_NAME ) ) + context_Name +
                        s.substring( s.indexOf( CONTEXT_NAME ) +  CONTEXT_NAME.length() );
                    }
                    
                    if( s.indexOf( RESOURCE_NAME )  != -1 ) {
                        s = s.substring( 0, s.indexOf( RESOURCE_NAME ) ) + resource_Name +
                        s.substring( s.indexOf( RESOURCE_NAME ) +  RESOURCE_NAME.length() );
                    }
                    
                    if( s.indexOf( DRIVER_CLASS_NAME )  != -1 ) {
                        s = s.substring( 0, s.indexOf( DRIVER_CLASS_NAME ) ) + driver_Class_Name +
                        s.substring( s.indexOf( DRIVER_CLASS_NAME ) +  DRIVER_CLASS_NAME.length() );
                    }
                    
                    if( s.indexOf( IP_ADDRESS )  != -1 ) {
                        s = s.substring( 0, s.indexOf( IP_ADDRESS ) ) + ip_Address +
                        s.substring( s.indexOf( IP_ADDRESS ) +  IP_ADDRESS.length() );
                    }
                    
                    if( s.indexOf( PORT )  != -1 ) {
                        s = s.substring( 0, s.indexOf( PORT ) ) + port +
                        s.substring( s.indexOf( PORT ) +  PORT.length() );
                    }
                    
                    if( s.indexOf( DATABASE_NAME )  != -1 ) {
                        s = s.substring( 0, s.indexOf( DATABASE_NAME ) ) + database_Name +
                        s.substring( s.indexOf( DATABASE_NAME ) +  DATABASE_NAME.length() );
                    }
                    
                    if( s.indexOf( USER_NAME )  != -1 ) {
                        s = s.substring( 0, s.indexOf( USER_NAME ) ) + user_Name +
                        s.substring( s.indexOf( USER_NAME ) +  USER_NAME.length() );
                    }
                    
                    if( s.indexOf( USER_PASSWORD )  != -1 ) {
                        s = s.substring( 0, s.indexOf( USER_PASSWORD ) ) + user_Password +
                        s.substring( s.indexOf( USER_PASSWORD ) +  USER_PASSWORD.length() );
                    }
                    
                    if( s.indexOf( MAX_ACTIVE )  != -1 ) {
                        s = s.substring( 0, s.indexOf( MAX_ACTIVE ) ) + max_Active +
                        s.substring( s.indexOf( MAX_ACTIVE ) +  MAX_ACTIVE.length() );
                    }
                    
                    if( s.indexOf( MAX_IDLE )  != -1 ) {
                        s = s.substring( 0, s.indexOf( MAX_IDLE ) ) + max_Idle +
                        s.substring( s.indexOf( MAX_IDLE ) +  MAX_IDLE.length() );
                    }
                    
                    if( s.indexOf( MAX_WAIT )  != -1 ) {
                        s = s.substring( 0, s.indexOf( MAX_WAIT ) ) + max_Wait +
                        s.substring( s.indexOf( MAX_WAIT ) +  MAX_WAIT.length() );
                    }
                    
                    if( s.indexOf( SID )  != -1 ) {
                        s = s.substring( 0, s.indexOf( SID ) ) + sid +
                        s.substring( s.indexOf( SID ) +  SID.length() );
                    }
                    
                    rvalue += s + '\n';
                }
                
                try {
                    in.close();
                } catch( IOException exc ){
                    main.printMessage( exc.toString());
                }
            } catch( IOException exc ){
                main.printMessage( exc.toString());
            }
        } catch( IOException exc ) {
            main.printMessage( exc.toString());
        }
        
        resourceFactoryTextArea.setText( rvalue );
        resourceFactoryTextArea.setCaretPosition( 0 );
        
        // -------------------------------------
        
        fileSource = main.getArchiverBaseDir() + "\\templates\\datasource\\web.generic.xml.tpt";                
                                        
        rvalue = new String();
        s = new String();        
        
        try {
            in = new DataInputStream( new BufferedInputStream( new FileInputStream( fileSource ) ) );
            try {
                while( (s = in.readLine())!= null ) {                   
                    
                    if( s.indexOf( RESOURCE_NAME )  != -1 ) {
                        s = s.substring( 0, s.indexOf( RESOURCE_NAME ) ) + resource_Name +
                        s.substring( s.indexOf( RESOURCE_NAME ) +  RESOURCE_NAME.length() );
                    }
                                        
                    rvalue += s + '\n';
                }
                
                try {
                    in.close();
                } catch( IOException exc ){
                    main.printMessage( exc.toString());
                }
            } catch( IOException exc ){
                main.printMessage( exc.toString());
            }
        } catch( IOException exc ) {
            main.printMessage( exc.toString());
        }
                        
        webApplicationTextArea.setText( rvalue );
        webApplicationTextArea.setCaretPosition( 0 );
        
        
    }
    
}
