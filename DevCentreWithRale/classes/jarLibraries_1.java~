/*
 * projectOpen.java
 *
 * Created on December 16, 2002, 7:05 AM
 */
import java.io.*;
import javax.swing.*;
import javax.swing.tree.*;
import javax.swing.filechooser.*;

import java.awt.*;
//import java.io.File;
import java.awt.event.*;
import java.beans.*;
import java.util.*;

import java.io.*;
import java.awt.Point;
import java.net.*;

import HTTPClient.*;
import java.io.*;
import encryptor.*;
/**
 *
 * @author  test1
 */
public class jarLibraries extends javax.swing.JDialog {
    
    /** Creates new form projectOpen */
    public jarLibraries(mainForm parent, boolean modal) {
        super(parent, modal);
        initComponents();
        myParent = parent;
        
        previewer = new FilePreviewer( chooser );
        try {
            UIManager.setLookAndFeel( LnF );
            SwingUtilities.updateComponentTreeUI( this );
            //if(chooser != null) {
            SwingUtilities.updateComponentTreeUI( chooser );
            //}
        } catch (UnsupportedLookAndFeelException exc) {
        } catch (IllegalAccessException exc) {
            myParent.printMessage("IllegalAccessException Error:" + exc);
        } catch (ClassNotFoundException exc) {
            myParent.printMessage("ClassNotFoundException Error:" + exc);
        } catch (InstantiationException exc) {
            myParent.printMessage("InstantiateException Error:" + exc);
        }
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        chooser = new javax.swing.JFileChooser();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        closeButton = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        listButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        messageEditorPane = new javax.swing.JEditorPane();
        jPanel6 = new javax.swing.JPanel();
        getJDBC = new javax.swing.JButton();
        jarNameTextField = new javax.swing.JTextField();
        sendButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();

        chooser.setDialogTitle("Select JAR");
        chooser.setFont(new java.awt.Font("Default", 0, 11));

        setTitle("Common Server Libraries");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        getContentPane().add(jPanel2, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel4, java.awt.BorderLayout.EAST);

        getContentPane().add(jPanel5, java.awt.BorderLayout.WEST);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        closeButton.setFont(new java.awt.Font("Default", 0, 11));
        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        jPanel3.add(closeButton);

        getContentPane().add(jPanel3, java.awt.BorderLayout.SOUTH);

        jPanel11.setLayout(new java.awt.GridBagLayout());

        listButton.setFont(new java.awt.Font("Default", 0, 11));
        listButton.setText("List Java Libraries");
        listButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel11.add(listButton, gridBagConstraints);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(250, 150));
        messageEditorPane.setEditable(false);
        messageEditorPane.setFont(new java.awt.Font("Default", 0, 11));
        jScrollPane1.setViewportView(messageEditorPane);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel11.add(jScrollPane1, gridBagConstraints);

        jPanel6.setLayout(new java.awt.GridBagLayout());

        jPanel6.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.EtchedBorder(), "Actions"));
        jPanel6.setPreferredSize(new java.awt.Dimension(400, 125));
        getJDBC.setFont(new java.awt.Font("Default", 0, 11));
        getJDBC.setText("Browse JAR ...");
        getJDBC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getJarActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel6.add(getJDBC, gridBagConstraints);

        jarNameTextField.setFont(new java.awt.Font("Default", 0, 11));
        jarNameTextField.setMinimumSize(new java.awt.Dimension(350, 19));
        jarNameTextField.setPreferredSize(new java.awt.Dimension(350, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        jPanel6.add(jarNameTextField, gridBagConstraints);

        sendButton.setFont(new java.awt.Font("Default", 0, 11));
        sendButton.setText("Send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 5, 5);
        jPanel6.add(sendButton, gridBagConstraints);

        deleteButton.setFont(new java.awt.Font("Default", 0, 11));
        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 5, 5);
        jPanel6.add(deleteButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel11.add(jPanel6, gridBagConstraints);

        getContentPane().add(jPanel11, java.awt.BorderLayout.CENTER);

        pack();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setSize(new java.awt.Dimension(462, 420));
        setLocation((screenSize.width-462)/2,(screenSize.height-420)/2);
    }//GEN-END:initComponents
    
    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // Add your handling code here:
        String httpMessage = new String();
        char nextLine = '|';
        String jarFile = jarNameTextField.getText().trim();
        
        if( jarFile.indexOf( '\\' ) != -1 ) {
            jarFile = jarFile.substring( jarFile.lastIndexOf( '\\' )+1 );
        }
        
        if( jarFile.length() > 0  ) {
            myParent.printMessage( "Deleting Jar from server" );
            sendJarLibrary sjl = new sendJarLibrary( myParent, this, false, "deletecommonlib", "dummy", jarFile );
            sjl.show();
        }
        
    }//GEN-LAST:event_deleteButtonActionPerformed
    
    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        // Add your handling code here:
        String httpMessage = new String();
        char nextLine = '|';
        String jarFile = jarNameTextField.getText().trim();
        String absoluteFileName = "";
        
        if( jarFile.indexOf( '\\' ) != -1 ) {
            absoluteFileName = jarFile.substring( jarFile.lastIndexOf( '\\' )+1 );
        }
                
        if( jarFile.length() > 0 && new File( jarFile ).exists() && new File( jarFile ).isFile()  ) {
            
            myParent.printMessage( "Checking server for existing file" );
            String returnMessage = myParent.remoteOtherCommand( "listcommonlib", "dummy" );            
            
            if( returnMessage.indexOf( absoluteFileName ) == -1  ) {
                myParent.printMessage( "Sending Jar to server" );
                sendJarLibrary sjl = new sendJarLibrary( myParent, this, false, "getcommonlibpath", "dummy", jarFile );
                sjl.show();
            } else {
                myParent.printMessage( "File already exists in server" );
            }
        }
        
    }//GEN-LAST:event_sendButtonActionPerformed
    
    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        // Add your handling code here:
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeButtonActionPerformed
    
    private void listButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listButtonActionPerformed
        // Add your handling code here:
        String httpMessage = new String();
        char nextLine = '|';
        
        myParent.printMessage( "Listing Java libraries" );
        listJarLibraries ljl = new listJarLibraries( myParent, this, false, "listcommonlib", "dummy" );
        ljl.show();
    }//GEN-LAST:event_listButtonActionPerformed
    
    private void getJarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getJarActionPerformed
        
        if (chooser.isMultiSelectionEnabled()) {
            chooser.setSelectedFiles(null);
        } else {
            chooser.setSelectedFile(null);
        }
        
        // clear the preview from the previous display of the chooser
        JComponent accessory = chooser.getAccessory();
        if (accessory != null) {
            ((FilePreviewer)accessory).loadImage(null);
        }
        int retval = chooser.showDialog(this, null);
        if (retval == JFileChooser.APPROVE_OPTION) {
            
            File theFile = chooser.getSelectedFile();
            if( theFile != null ) {
                if( !theFile.isDirectory() ) {
                    myParent.printMessage( theFile.getAbsolutePath() );
                    jarNameTextField.setText( theFile.getAbsolutePath() );
                }
            }
            
        } else if (retval == JFileChooser.CANCEL_OPTION) {
            myParent.printMessage( "Canceled");
        } else if (retval == JFileChooser.ERROR_OPTION) {
            myParent.printMessage( "Error");
        } else {
            
        }
        
    }//GEN-LAST:event_getJarActionPerformed
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new projectOpen( new mainForm(), true ).show();
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton sendButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextField jarNameTextField;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel11;
    public static javax.swing.JEditorPane messageEditorPane;
    private javax.swing.JButton listButton;
    private javax.swing.JButton getJDBC;
    private javax.swing.JFileChooser chooser;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JButton closeButton;
    // End of variables declaration//GEN-END:variables
    
    private boolean valid = false;
    private FilePreviewer previewer;
    private String LnF = "com.sun.java.swing.plaf.windows.WindowsLookAndFeel";
    
    mainForm myParent; // mainForm parent
    
    
    class FilePreviewer extends JComponent implements PropertyChangeListener {
        ImageIcon thumbnail = null;
        
        public FilePreviewer(JFileChooser fc) {
            setPreferredSize(new Dimension(100, 50));
            fc.addPropertyChangeListener(this);
        }
        
        public void loadImage(File f) {
            if (f == null) {
                thumbnail = null;
            } else {
                ImageIcon tmpIcon = new ImageIcon(f.getPath());
                if(tmpIcon.getIconWidth() > 90) {
                    thumbnail = new ImageIcon(
                    tmpIcon.getImage().getScaledInstance(90, -1, Image.SCALE_DEFAULT));
                } else {
                    thumbnail = tmpIcon;
                }
            }
        }
        
        public void propertyChange(PropertyChangeEvent e) {
            String prop = e.getPropertyName();
            if(prop == JFileChooser.SELECTED_FILE_CHANGED_PROPERTY) {
                if(isShowing()) {
                    loadImage((File) e.getNewValue());
                    repaint();
                }
            }
        }
        
    }
    
    
    
}
