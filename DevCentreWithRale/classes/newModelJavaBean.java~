/*
 * saveYesNo.java
 *
 * Created on December 28, 2002, 11:02 AM
 */
import java.util.*;
import java.awt.*;
import javax.swing.tree.*;
import java.io.*;

/**
 *
 * @author  test1
 */
public class newModelJavaBean extends javax.swing.JDialog {
    
    /** Creates new form saveYesNo */
    public newModelJavaBean(mainForm parent, boolean modal, String treeRoot) {
        super(parent, modal);
        initComponents();
        main = parent;
        treeRootDirectory = treeRoot;
        setTreeRootDirectory( treeRootDirectory );
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        selectionGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        treeScrollPane = new javax.swing.JScrollPane();
        populateTree();
        treePanel.setPreferredSize(new Dimension(77, 150));
        treeScrollPane.setViewportView( treePanel );
        jPanel6 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        classNameTextField = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        cancelButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();

        setTitle("New Model JavaBean");
        setModal(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel1.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        jSplitPane1.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        jSplitPane1.setDividerLocation(150);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        treeScrollPane.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        treeScrollPane.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        treeScrollPane.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        jSplitPane1.setLeftComponent(treeScrollPane);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel11.setFont(new java.awt.Font("Default", 0, 11));
        jLabel11.setText("Class Name:");
        jPanel6.add(jLabel11);

        classNameTextField.setFont(new java.awt.Font("Default", 0, 11));
        classNameTextField.setMinimumSize(new java.awt.Dimension(200, 19));
        classNameTextField.setPreferredSize(new java.awt.Dimension(200, 19));
        jPanel6.add(classNameTextField);

        jSplitPane1.setRightComponent(jPanel6);

        jPanel1.add(jSplitPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.NORTH);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        cancelButton.setFont(new java.awt.Font("Default", 0, 11));
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jPanel3.add(cancelButton);

        okButton.setFont(new java.awt.Font("Default", 0, 11));
        okButton.setText("Ok");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        jPanel3.add(okButton);

        getContentPane().add(jPanel3, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanel4, java.awt.BorderLayout.EAST);

        getContentPane().add(jPanel5, java.awt.BorderLayout.WEST);

        pack();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setSize(new java.awt.Dimension(480, 270));
        setLocation((screenSize.width-480)/2,(screenSize.height-270)/2);
    }//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_okButtonActionPerformed
        
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // Add your handling code here:
        setVisible(false);
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        //new saveYesNo( mainForm parent, true).show();
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane treeScrollPane;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JButton okButton;
    private javax.swing.ButtonGroup selectionGroup;
    private javax.swing.JTextField classNameTextField;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JButton cancelButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel6;
    // End of variables declaration//GEN-END:variables
    
    private mainForm main;
    private PackageTree treePanel = new PackageTree();
    private String treeRootDirectory;
    
    
    public void populateTree() {
                       
        String p1Name = new String("model");        
        DefaultMutableTreeNode p1;        
        p1 = treePanel.addObject(null, p1Name);        
        
        treePanel.enable( true );
    }
    
    
    public void setTreeRootDirectory( String rootdir ) {
        treePanel.setRootDir( rootdir );
    }
    
    public void clearTree() {
        treePanel.clear();
    }
    
    public String getTreeCurrentPath() {
        return treePanel.getCurrentPath();
    }
    
    public String readTemplate( String fileSource, String className, String packageName, String systemDate ) {
        
        final String CLASSNAME = "<CLASSNAME>";
        final String PACKAGENAME = "PACKAGENAME";
        final String SYSTEMDATE = "<SYSTEMDATE>";
        
        String rvalue = new String();
        String s = new String();
        DataInputStream in;
        
        try {
            in = new DataInputStream( new BufferedInputStream( new FileInputStream( fileSource ) ) );
            try {
                while( (s = in.readLine())!= null ) {
                    if( s.indexOf( CLASSNAME ) != -1 ) {
                        s = s.substring( 0, s.indexOf( CLASSNAME ) ) + className +
                        s.substring( s.indexOf( CLASSNAME ) +  CLASSNAME.length() );
                    }
                    
                    if( s.indexOf( PACKAGENAME )  != -1 ) {
                        s = s.substring( 0, s.indexOf( PACKAGENAME ) ) + packageName +
                        s.substring( s.indexOf( PACKAGENAME ) +  PACKAGENAME.length() );
                    }
                    
                    if( s.indexOf( SYSTEMDATE )  != -1 ) {
                        s = s.substring( 0, s.indexOf( SYSTEMDATE ) ) + systemDate +
                        s.substring( s.indexOf( SYSTEMDATE ) +  SYSTEMDATE.length() );
                    }
                    rvalue += s + '\n';
                }
                
                try {
                    in.close();
                } catch( IOException exc ){                    
                }
            } catch( IOException exc ){                
            }
        } catch( IOException exc ) {            
        }
        
        return rvalue;
        
    }
    
    
    
    public String createModelJavaBean( String sourcePath ) {
        
        String rvalue = new String();
        
        String javaBeanTemplate = getArchiverBaseDir() + "templates\\java\\javabean.template";
        String javaBeanFileName = sourcePath.substring( sourcePath.lastIndexOf( '\\')+1 );
        String javaBeanLocation = sourcePath.substring( 0, sourcePath.lastIndexOf( '\\') );
        String systemDate = new Date().toString();
        String projDir = main.getBuildDirectory();
        
        javaBeanLocation = javaBeanLocation.substring( projDir.length()+1 );
        javaBeanLocation = javaBeanLocation.replace( '\\','/');
        
        String contentStr = readTemplate( javaBeanTemplate, javaBeanFileName, javaBeanLocation, systemDate );
        
        /*
        if( saveCodeToFile( contentStr, projDir+"\\jspc.xml" ) ) {
            rvalue = projDir + "\\workarea\\java\\" + javaBeanLocation.replace( '/', '\\') + '\\' +
            javaBeanFileName.replace( '.', '_') + ".java";
        } else {
            //printMessage( "Error creating jspc.xml" );
        }
         */
        
        return rvalue;
    }
    
    
    public String getArchiverBaseDir() {
        
        String dummyFile = "dummy";
        String rvalue = new String( new File( dummyFile ).getAbsolutePath() );
        
        return rvalue.substring( 0, rvalue.indexOf( dummyFile) );
        
    }
    
    
    private boolean saveCodeToFile(  String code, String filename ) {
        
        boolean rvalue = false;
        
        try {
            FileWriter fw = new FileWriter( filename, false);
            BufferedWriter br = new BufferedWriter(fw);
            PrintWriter pw = new PrintWriter(br);
            
            pw.println( code );
            
            pw.close();
            br.close();
            fw.close();
            
            rvalue = true;
            
        } catch (IOException io) {
            //printMessage( io.toString() );
        } catch (Exception e) {
            //printMessage( e.toString() );
        }
        
        return rvalue;
    }
    
    
}
