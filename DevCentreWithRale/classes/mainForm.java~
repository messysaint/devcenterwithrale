/*
 * mainForm.java
 *
 * Created on September 9, 2002, 1:10 PM
 */
import org.apache.tools.ant.DirectoryScanner;

import java.io.*;
import javax.swing.*;
import javax.swing.tree.*;
import javax.swing.filechooser.*;

import java.awt.*;
//import java.io.File;
import java.awt.event.*;
import java.beans.*;
import java.util.*;

import java.io.*;
import java.awt.Point;
import java.net.*;

//import HTTPClient.*;
import java.io.*;
import encryptor.*;

import javax.net.ssl.*;

// from ant.jar
import org.apache.tools.ant.DirectoryScanner;

/**
 *
 * @author  BMutia
 */
public class mainForm extends javax.swing.JFrame {
    
    /** Creates new form mainForm */
    public mainForm() {
        
        createSplashScreen(); // initialize splashscreen
        
        // do the following on the gui thread
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                showSplashScreen();
            }
        });
        
        
        initComponents();
        initMessageBoard();
        
        // set frame icon
        ImageIcon icon = new ImageIcon("icons/tool.gif");
        this.setIconImage(icon.getImage());
        
        try {
            UIManager.setLookAndFeel( LnF );
            SwingUtilities.updateComponentTreeUI( this );
            //if(chooser != null) {
            SwingUtilities.updateComponentTreeUI( chooser );
            //}
        } catch (UnsupportedLookAndFeelException exc) {
        } catch (IllegalAccessException exc) {
            printMessage("IllegalAccessException Error:" + exc);
        } catch (ClassNotFoundException exc) {
            printMessage("ClassNotFoundException Error:" + exc);
        } catch (InstantiationException exc) {
            printMessage("InstantiateException Error:" + exc);
        }
        
        
        // do the following on the gui thread
        SwingUtilities.invokeLater(new Runnable() {
            Thread thread = new Thread();
            public void run() {
                try {
                    thread.sleep( 1500 );
                    hideSplashScreen();
                } catch( java.lang.InterruptedException iex ) { }
            }
        });
        
        
        String fileName = getArchiverBaseDir() + sdkHome;
        if( !new File( fileName).exists() ) {
            java2SdkHome javahome = new java2SdkHome( this, true );
            javahome.show();
        } else {
            storeJavaHome();
        }
        
        
    }
    
    
    private void initMessageBoard() {
        buildmessage.setFont(new java.awt.Font("Default", 0, 11));
        buildmessage.setWrapStyleWord(true);
        buildmessage.setBorder(new javax.swing.border.CompoundBorder());
        jScrollPane11.setViewportView(buildmessage);
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        chooser = new javax.swing.JFileChooser();
        optionGrp = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jSeparator2 = new javax.swing.JSeparator();
        projectNew = new javax.swing.JButton();
        projectOpen = new javax.swing.JButton();
        jSeparator21 = new javax.swing.JSeparator();
        saveButton = new javax.swing.JButton();
        saveAllButton = new javax.swing.JButton();
        undoButton = new javax.swing.JButton();
        redoButton = new javax.swing.JButton();
        findButton = new javax.swing.JButton();
        jSeparator221 = new javax.swing.JSeparator();
        compileButton = new javax.swing.JButton();
        compileAllButton = new javax.swing.JButton();
        jSeparator22 = new javax.swing.JSeparator();
        createArchive = new javax.swing.JButton();
        sendArchive = new javax.swing.JButton();
        sendFile = new javax.swing.JButton();
        jSeparator211 = new javax.swing.JSeparator();
        stop = new javax.swing.JButton();
        unWAR = new javax.swing.JButton();
        start = new javax.swing.JButton();
        stopStart = new javax.swing.JButton();
        reload = new javax.swing.JButton();
        jSeparator2111 = new javax.swing.JSeparator();
        connectionSetting = new javax.swing.JButton();
        jSeparator21111 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        treeScrollPane = new javax.swing.JScrollPane();
        populateTree();
        treePanel.setPreferredSize(new Dimension(77, 150));
        treeScrollPane.setViewportView( treePanel );

        jSplitPane2 = new javax.swing.JSplitPane();
        codeDesktopPane = new javax.swing.JDesktopPane();
        // set desktop color

        codeDesktopPane.setBackground( Color.lightGray );
        jScrollPane11 = new javax.swing.JScrollPane();
        jDesktopPane2 = new javax.swing.JDesktopPane();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        projectNewMenuItem = new javax.swing.JMenuItem();
        projectOpenMenuItem = new javax.swing.JMenuItem();
        jSeparator16 = new javax.swing.JSeparator();
        searchProjectMenuItem = new javax.swing.JMenuItem();
        warTemplateProjectMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        addJarToClassPathMenuItem = new javax.swing.JMenuItem();
        copyJarMenuItem = new javax.swing.JMenuItem();
        jSeparator152 = new javax.swing.JSeparator();
        J2SDKHomeMenuItem = new javax.swing.JMenuItem();
        targetJVMMenuItem = new javax.swing.JMenuItem();
        jSeparator15 = new javax.swing.JSeparator();
        connectionSettingMenuItem = new javax.swing.JMenuItem();
        jSeparator151 = new javax.swing.JSeparator();
        ExitMenuItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        controllerActionMapMenuItem = new javax.swing.JMenuItem();
        dbConnectionPoolMenuItem = new javax.swing.JMenuItem();
        jSeparator9 = new javax.swing.JSeparator();
        webAppDescriptorMenuItem = new javax.swing.JMenuItem();
        antBuildXml = new javax.swing.JMenuItem();
        jSeparator14 = new javax.swing.JSeparator();
        jarLibrariesMenuItem = new javax.swing.JMenuItem();
        commonClassMenuItem = new javax.swing.JMenuItem();
        resourceFactoryMenuItem = new javax.swing.JMenuItem();
        jMenu7 = new javax.swing.JMenu();
        jMenu6 = new javax.swing.JMenu();
        jspMenuItem = new javax.swing.JMenuItem();
        beanMenuItem = new javax.swing.JMenuItem();
        servletMenuItem = new javax.swing.JMenuItem();
        jwsMenuItem = new javax.swing.JMenuItem();
        jSeparator12 = new javax.swing.JSeparator();
        htmlMenuItem = new javax.swing.JMenuItem();
        htmlTemplateProjectMenuItem = new javax.swing.JMenuItem();
        jSeparator10 = new javax.swing.JSeparator();
        javaPackageMenuItem = new javax.swing.JMenuItem();
        directoryMenuItem = new javax.swing.JMenuItem();
        jSeparator11 = new javax.swing.JSeparator();
        propertyMenuItem = new javax.swing.JMenuItem();
        textMenuItem = new javax.swing.JMenuItem();
        editMenuItem = new javax.swing.JMenuItem();
        renameMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        jSeparator7 = new javax.swing.JSeparator();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAllMenuItem = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JSeparator();
        sendFileMenuItem = new javax.swing.JMenuItem();
        jMenu8 = new javax.swing.JMenu();
        compileMenuItem = new javax.swing.JMenuItem();
        compileAllMenuItem = new javax.swing.JMenuItem();
        compileProjectMenuItem = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        RefreshMenuItem = new javax.swing.JMenuItem();
        SendArchiveMenuItem = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        StopMenuItem = new javax.swing.JMenuItem();
        StartMenuItem = new javax.swing.JMenuItem();
        ReloadMenuItem = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JSeparator();
        UnWARMenuItem = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JSeparator();
        StopStartMenuItem = new javax.swing.JMenuItem();
        jSeparator13 = new javax.swing.JSeparator();
        manageMenuItem = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();
        jMenuItem14 = new javax.swing.JMenuItem();

        chooser.setDialogTitle("Select Build.xml Directory");
        chooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        chooser.setFont(new java.awt.Font("Default", 0, 11));
        chooser.setMultiSelectionEnabled(true);

        setTitle("LikhaSoftware DevCentre 2003 - Demo");
        setFont(new java.awt.Font("Default", 0, 12));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator2.setPreferredSize(new java.awt.Dimension(0, 20));
        jPanel2.add(jSeparator2);

        projectNew.setFont(new java.awt.Font("Default", 0, 11));
        projectNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/new.gif")));
        projectNew.setToolTipText("New Project");
        projectNew.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        projectNew.setDoubleBuffered(true);
        projectNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                projectNewActionPerformed(evt);
            }
        });

        jPanel2.add(projectNew);

        projectOpen.setFont(new java.awt.Font("Default", 0, 11));
        projectOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/open.gif")));
        projectOpen.setToolTipText("Open Project");
        projectOpen.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        projectOpen.setDoubleBuffered(true);
        projectOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                projectOpenActionPerformed(evt);
            }
        });

        jPanel2.add(projectOpen);

        jSeparator21.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator21.setPreferredSize(new java.awt.Dimension(10, 20));
        jPanel2.add(jSeparator21);

        saveButton.setFont(new java.awt.Font("Default", 0, 11));
        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/save.gif")));
        saveButton.setToolTipText("Save");
        saveButton.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        saveButton.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/save.gif")));
        saveButton.setDoubleBuffered(true);
        saveButton.setEnabled(false);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        jPanel2.add(saveButton);

        saveAllButton.setFont(new java.awt.Font("Default", 0, 11));
        saveAllButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/saveall.gif")));
        saveAllButton.setToolTipText("Save All ");
        saveAllButton.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        saveAllButton.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/saveall.gif")));
        saveAllButton.setDisabledSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/saveall.gif")));
        saveAllButton.setDoubleBuffered(true);
        saveAllButton.setEnabled(false);
        saveAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAllButtonActionPerformed(evt);
            }
        });

        jPanel2.add(saveAllButton);

        undoButton.setFont(new java.awt.Font("Default", 0, 11));
        undoButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/undo.gif")));
        undoButton.setToolTipText("Undo");
        undoButton.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        undoButton.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/undo.gif")));
        undoButton.setDisabledSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/undo.gif")));
        undoButton.setDoubleBuffered(true);
        undoButton.setEnabled(false);
        undoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoButtonActionPerformed(evt);
            }
        });

        jPanel2.add(undoButton);

        redoButton.setFont(new java.awt.Font("Default", 0, 11));
        redoButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/redo.gif")));
        redoButton.setToolTipText("Redo");
        redoButton.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        redoButton.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/redo.gif")));
        redoButton.setDisabledSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/redo.gif")));
        redoButton.setDoubleBuffered(true);
        redoButton.setEnabled(false);
        redoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoButtonActionPerformed(evt);
            }
        });

        jPanel2.add(redoButton);

        findButton.setFont(new java.awt.Font("Default", 0, 11));
        findButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/find.gif")));
        findButton.setToolTipText("Find");
        findButton.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        findButton.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/find.gif")));
        findButton.setDisabledSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/find.gif")));
        findButton.setDoubleBuffered(true);
        findButton.setEnabled(false);
        findButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findButtonActionPerformed(evt);
            }
        });

        jPanel2.add(findButton);

        jSeparator221.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator221.setPreferredSize(new java.awt.Dimension(10, 20));
        jPanel2.add(jSeparator221);

        compileButton.setFont(new java.awt.Font("Default", 0, 11));
        compileButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/compile.gif")));
        compileButton.setToolTipText("Compile");
        compileButton.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        compileButton.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/compile.gif")));
        compileButton.setDisabledSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/compile.gif")));
        compileButton.setDoubleBuffered(true);
        compileButton.setEnabled(false);
        compileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compileButtonActionPerformed(evt);
            }
        });

        jPanel2.add(compileButton);

        compileAllButton.setFont(new java.awt.Font("Default", 0, 11));
        compileAllButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/compileAll.gif")));
        compileAllButton.setToolTipText("Compile All ");
        compileAllButton.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        compileAllButton.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/compileAll.gif")));
        compileAllButton.setDisabledSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/compileAll.gif")));
        compileAllButton.setDoubleBuffered(true);
        compileAllButton.setEnabled(false);
        compileAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compileAllButtonActionPerformed(evt);
            }
        });

        jPanel2.add(compileAllButton);

        jSeparator22.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator22.setPreferredSize(new java.awt.Dimension(10, 20));
        jPanel2.add(jSeparator22);

        createArchive.setFont(new java.awt.Font("Default", 0, 11));
        createArchive.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/archiveit.gif")));
        createArchive.setToolTipText("Generate Web Archive");
        createArchive.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        createArchive.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/archiveit.gif")));
        createArchive.setDisabledSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/archiveit.gif")));
        createArchive.setDoubleBuffered(true);
        createArchive.setEnabled(false);
        createArchive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createArchiveActionPerformed(evt);
            }
        });

        jPanel2.add(createArchive);

        sendArchive.setFont(new java.awt.Font("Default", 0, 11));
        sendArchive.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/upload.gif")));
        sendArchive.setToolTipText("Send Web Archive");
        sendArchive.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        sendArchive.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/upload.gif")));
        sendArchive.setDisabledSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/upload.gif")));
        sendArchive.setDoubleBuffered(true);
        sendArchive.setEnabled(false);
        sendArchive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendArchiveActionPerformed(evt);
            }
        });

        jPanel2.add(sendArchive);

        sendFile.setFont(new java.awt.Font("Default", 0, 11));
        sendFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/upload2.gif")));
        sendFile.setToolTipText("Send Selected File");
        sendFile.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        sendFile.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/upload2.gif")));
        sendFile.setDisabledSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/upload2.gif")));
        sendFile.setDoubleBuffered(true);
        sendFile.setEnabled(false);
        sendFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendFileActionPerformed(evt);
            }
        });

        jPanel2.add(sendFile);

        jSeparator211.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator211.setPreferredSize(new java.awt.Dimension(10, 20));
        jPanel2.add(jSeparator211);

        stop.setFont(new java.awt.Font("Default", 0, 11));
        stop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/stop3.gif")));
        stop.setToolTipText("Stop Web Application");
        stop.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        stop.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/stop3.gif")));
        stop.setDisabledSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/stop3.gif")));
        stop.setDoubleBuffered(true);
        stop.setEnabled(false);
        stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopActionPerformed(evt);
            }
        });

        jPanel2.add(stop);

        unWAR.setFont(new java.awt.Font("Default", 0, 11));
        unWAR.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/unwar.gif")));
        unWAR.setToolTipText("Unwar Web Archive");
        unWAR.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        unWAR.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/unwar.gif")));
        unWAR.setDisabledSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/unwar.gif")));
        unWAR.setDoubleBuffered(true);
        unWAR.setEnabled(false);
        unWAR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unWARActionPerformed(evt);
            }
        });

        jPanel2.add(unWAR);

        start.setFont(new java.awt.Font("Default", 0, 11));
        start.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/start.gif")));
        start.setToolTipText("Start Web Application");
        start.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        start.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/start.gif")));
        start.setDisabledSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/start.gif")));
        start.setDoubleBuffered(true);
        start.setEnabled(false);
        start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startActionPerformed(evt);
            }
        });

        jPanel2.add(start);

        stopStart.setFont(new java.awt.Font("Default", 0, 11));
        stopStart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/restart.gif")));
        stopStart.setToolTipText("Stop / Start Web Application");
        stopStart.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        stopStart.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/restart.gif")));
        stopStart.setDisabledSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/restart.gif")));
        stopStart.setDoubleBuffered(true);
        stopStart.setEnabled(false);
        stopStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopStartActionPerformed(evt);
            }
        });

        jPanel2.add(stopStart);

        reload.setFont(new java.awt.Font("Default", 0, 11));
        reload.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/refresh2.gif")));
        reload.setToolTipText("Reload Web Application");
        reload.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        reload.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/refresh2.gif")));
        reload.setDisabledSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/refresh2.gif")));
        reload.setDoubleBuffered(true);
        reload.setEnabled(false);
        reload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reloadActionPerformed(evt);
            }
        });

        jPanel2.add(reload);

        jSeparator2111.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator2111.setPreferredSize(new java.awt.Dimension(10, 20));
        jPanel2.add(jSeparator2111);

        connectionSetting.setFont(new java.awt.Font("Default", 0, 11));
        connectionSetting.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/properties.gif")));
        connectionSetting.setToolTipText("Remote Connection Settings");
        connectionSetting.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        connectionSetting.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/properties.gif")));
        connectionSetting.setDoubleBuffered(true);
        connectionSetting.setEnabled(false);
        connectionSetting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectionSettingActionPerformed(evt);
            }
        });

        jPanel2.add(connectionSetting);

        jSeparator21111.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator21111.setPreferredSize(new java.awt.Dimension(10, 20));
        jPanel2.add(jSeparator21111);

        getContentPane().add(jPanel2, java.awt.BorderLayout.NORTH);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel1.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        jSplitPane1.setDividerLocation(225);
        treeScrollPane.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        treeScrollPane.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        treeScrollPane.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        treeScrollPane.setPreferredSize(new java.awt.Dimension(3, 200));
        jSplitPane1.setLeftComponent(treeScrollPane);

        jSplitPane2.setDividerLocation(525);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane2.setLeftComponent(codeDesktopPane);

        jScrollPane11.setBorder(new javax.swing.border.EtchedBorder());
        jScrollPane11.setFont(new java.awt.Font("Default", 0, 11));
        jScrollPane11.setPreferredSize(new java.awt.Dimension(300, 60));
        jSplitPane2.setRightComponent(jScrollPane11);

        jSplitPane1.setRightComponent(jSplitPane2);

        jPanel1.add(jSplitPane1, java.awt.BorderLayout.CENTER);

        jPanel1.add(jDesktopPane2, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        getContentPane().add(jPanel3, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanel4, java.awt.BorderLayout.EAST);

        getContentPane().add(jPanel5, java.awt.BorderLayout.WEST);

        jMenuBar1.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        jMenu1.setMnemonic('P');
        jMenu1.setText("Project");
        projectNewMenuItem.setFont(new java.awt.Font("Default", 0, 11));
        projectNewMenuItem.setText("New");
        projectNewMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                projectNewMenuItemActionPerformed(evt);
            }
        });

        jMenu1.add(projectNewMenuItem);
        projectOpenMenuItem.setFont(new java.awt.Font("Default", 0, 11));
        projectOpenMenuItem.setText("Open");
        projectOpenMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                projectOpenMenuItemActionPerformed(evt);
            }
        });

        jMenu1.add(projectOpenMenuItem);
        jMenu1.add(jSeparator16);
        searchProjectMenuItem.setText("Search Files");
        searchProjectMenuItem.setEnabled(false);
        searchProjectMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchProjectMenuItemActionPerformed(evt);
            }
        });

        jMenu1.add(searchProjectMenuItem);
        warTemplateProjectMenuItem.setText("Web Archive Template");
        warTemplateProjectMenuItem.setEnabled(false);
        warTemplateProjectMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                warTemplateProjectMenuItemActionPerformed(evt);
            }
        });

        jMenu1.add(warTemplateProjectMenuItem);
        jMenu1.add(jSeparator1);
        addJarToClassPathMenuItem.setText("Add Jar to ClassPath");
        addJarToClassPathMenuItem.setEnabled(false);
        addJarToClassPathMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addJarToClassPathMenuItemActionPerformed(evt);
            }
        });

        jMenu1.add(addJarToClassPathMenuItem);
        copyJarMenuItem.setText("Copy Jar to Application");
        copyJarMenuItem.setEnabled(false);
        copyJarMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyJarMenuItemActionPerformed(evt);
            }
        });

        jMenu1.add(copyJarMenuItem);
        jMenu1.add(jSeparator152);
        J2SDKHomeMenuItem.setText("Java2 SDK Home");
        J2SDKHomeMenuItem.setEnabled(false);
        J2SDKHomeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                J2SDKHomeMenuItemActionPerformed(evt);
            }
        });

        jMenu1.add(J2SDKHomeMenuItem);
        targetJVMMenuItem.setText("Target JVM Version");
        targetJVMMenuItem.setEnabled(false);
        targetJVMMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                targetJVMMenuItemActionPerformed(evt);
            }
        });

        jMenu1.add(targetJVMMenuItem);
        jMenu1.add(jSeparator15);
        connectionSettingMenuItem.setText("Server Connection");
        connectionSettingMenuItem.setEnabled(false);
        connectionSettingMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectionSettingMenuItemActionPerformed(evt);
            }
        });

        jMenu1.add(connectionSettingMenuItem);
        jMenu1.add(jSeparator151);
        ExitMenuItem.setFont(new java.awt.Font("Default", 0, 11));
        ExitMenuItem.setText("Exit");
        ExitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitMenuItemActionPerformed(evt);
            }
        });

        jMenu1.add(ExitMenuItem);
        jMenuBar1.add(jMenu1);
        jMenu2.setMnemonic('C');
        jMenu2.setText("Configure");
        jMenu2.setEnabled(false);
        controllerActionMapMenuItem.setFont(new java.awt.Font("Default", 0, 11));
        controllerActionMapMenuItem.setText("Controller Action Map");
        controllerActionMapMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                controllerActionMapMenuItemActionPerformed(evt);
            }
        });

        jMenu2.add(controllerActionMapMenuItem);
        dbConnectionPoolMenuItem.setText("DB Connection Pool");
        dbConnectionPoolMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dbConnectionPoolMenuItemActionPerformed(evt);
            }
        });

        jMenu2.add(dbConnectionPoolMenuItem);
        jMenu2.add(jSeparator9);
        webAppDescriptorMenuItem.setFont(new java.awt.Font("Default", 0, 11));
        webAppDescriptorMenuItem.setText("Deployment Descriptor");
        webAppDescriptorMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                webAppDescriptorMenuItemActionPerformed(evt);
            }
        });

        jMenu2.add(webAppDescriptorMenuItem);
        antBuildXml.setText("Ant Web Archive Builder");
        antBuildXml.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                antBuildXmlActionPerformed(evt);
            }
        });

        jMenu2.add(antBuildXml);
        jMenu2.add(jSeparator14);
        jarLibrariesMenuItem.setText("Server Common Libraries");
        jarLibrariesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jarLibrariesMenuItemActionPerformed(evt);
            }
        });

        jMenu2.add(jarLibrariesMenuItem);
        commonClassMenuItem.setText("Server Common Classes");
        commonClassMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commonClassMenuItemActionPerformed(evt);
            }
        });

        jMenu2.add(commonClassMenuItem);
        resourceFactoryMenuItem.setText("Server Resource Factory");
        resourceFactoryMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resourceFactoryMenuItemActionPerformed(evt);
            }
        });

        jMenu2.add(resourceFactoryMenuItem);
        jMenuBar1.add(jMenu2);
        jMenu7.setMnemonic('A');
        jMenu7.setText("Application Files");
        jMenu7.setEnabled(false);
        jMenu6.setText("New");
        jspMenuItem.setText("Java Server Page");
        jspMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jspMenuItemActionPerformed(evt);
            }
        });

        jMenu6.add(jspMenuItem);
        beanMenuItem.setText("JavaBean");
        beanMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                beanMenuItemActionPerformed(evt);
            }
        });

        jMenu6.add(beanMenuItem);
        servletMenuItem.setText("Java Servlet");
        servletMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                servletMenuItemActionPerformed(evt);
            }
        });

        jMenu6.add(servletMenuItem);
        jwsMenuItem.setText("Java Web Service");
        jwsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jwsMenuItemActionPerformed(evt);
            }
        });

        jMenu6.add(jwsMenuItem);
        jMenu6.add(jSeparator12);
        htmlMenuItem.setText("HTML Page");
        htmlMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                htmlMenuItemActionPerformed(evt);
            }
        });

        jMenu6.add(htmlMenuItem);
        htmlTemplateProjectMenuItem.setText("HTML Template");
        htmlTemplateProjectMenuItem.setEnabled(false);
        htmlTemplateProjectMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                htmlTemplateProjectMenuItemActionPerformed(evt);
            }
        });

        jMenu6.add(htmlTemplateProjectMenuItem);
        jMenu6.add(jSeparator10);
        javaPackageMenuItem.setText("Java Package");
        javaPackageMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                javaPackageMenuItemActionPerformed(evt);
            }
        });

        jMenu6.add(javaPackageMenuItem);
        directoryMenuItem.setText("Directory");
        directoryMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                directoryMenuItemActionPerformed(evt);
            }
        });

        jMenu6.add(directoryMenuItem);
        jMenu6.add(jSeparator11);
        propertyMenuItem.setText("Properties File");
        propertyMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                propertyMenuItemActionPerformed(evt);
            }
        });

        jMenu6.add(propertyMenuItem);
        textMenuItem.setText("Text File");
        textMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textMenuItemActionPerformed(evt);
            }
        });

        jMenu6.add(textMenuItem);
        jMenu7.add(jMenu6);
        editMenuItem.setText("Edit");
        editMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editMenuItemActionPerformed(evt);
            }
        });

        jMenu7.add(editMenuItem);
        renameMenuItem.setText("Rename");
        renameMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renameMenuItemActionPerformed(evt);
            }
        });

        jMenu7.add(renameMenuItem);
        deleteMenuItem.setText("Delete");
        deleteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteMenuItemActionPerformed(evt);
            }
        });

        jMenu7.add(deleteMenuItem);
        jMenu7.add(jSeparator7);
        saveMenuItem.setText("Save");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });

        jMenu7.add(saveMenuItem);
        saveAllMenuItem.setText("Save all");
        saveAllMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAllMenuItemActionPerformed(evt);
            }
        });

        jMenu7.add(saveAllMenuItem);
        jMenu7.add(jSeparator6);
        sendFileMenuItem.setText("Send File to Server");
        sendFileMenuItem.setToolTipText("");
        sendFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendFileMenuItemActionPerformed(evt);
            }
        });

        jMenu7.add(sendFileMenuItem);
        jMenuBar1.add(jMenu7);
        jMenu8.setMnemonic('B');
        jMenu8.setText("Build");
        jMenu8.setEnabled(false);
        compileMenuItem.setText("Compile");
        compileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compileMenuItemActionPerformed(evt);
            }
        });

        jMenu8.add(compileMenuItem);
        compileAllMenuItem.setText("Compile all");
        compileAllMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compileAllMenuItemActionPerformed(evt);
            }
        });

        jMenu8.add(compileAllMenuItem);
        compileProjectMenuItem.setText("Compile Project");
        compileProjectMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compileProjectMenuItemActionPerformed(evt);
            }
        });

        jMenu8.add(compileProjectMenuItem);
        jMenuBar1.add(jMenu8);
        jMenu3.setMnemonic('W');
        jMenu3.setText("Web Archive");
        jMenu3.setEnabled(false);
        RefreshMenuItem.setFont(new java.awt.Font("Default", 0, 11));
        RefreshMenuItem.setText("Generate");
        RefreshMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshMenuItemActionPerformed(evt);
            }
        });

        jMenu3.add(RefreshMenuItem);
        SendArchiveMenuItem.setFont(new java.awt.Font("Default", 0, 11));
        SendArchiveMenuItem.setText("Send to Server");
        SendArchiveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendArchiveMenuItemActionPerformed(evt);
            }
        });

        jMenu3.add(SendArchiveMenuItem);
        jMenuBar1.add(jMenu3);
        jMenu4.setMnemonic('M');
        jMenu4.setText("App Manager");
        jMenu4.setEnabled(false);
        StopMenuItem.setFont(new java.awt.Font("Default", 0, 11));
        StopMenuItem.setText("Stop");
        StopMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StopMenuItemActionPerformed(evt);
            }
        });

        jMenu4.add(StopMenuItem);
        StartMenuItem.setFont(new java.awt.Font("Default", 0, 11));
        StartMenuItem.setText("Start");
        StartMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartMenuItemActionPerformed(evt);
            }
        });

        jMenu4.add(StartMenuItem);
        ReloadMenuItem.setFont(new java.awt.Font("Default", 0, 11));
        ReloadMenuItem.setText("Reload");
        ReloadMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReloadMenuItemActionPerformed(evt);
            }
        });

        jMenu4.add(ReloadMenuItem);
        jMenu4.add(jSeparator4);
        UnWARMenuItem.setFont(new java.awt.Font("Default", 0, 11));
        UnWARMenuItem.setText("Unwar");
        UnWARMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UnWARMenuItemActionPerformed(evt);
            }
        });

        jMenu4.add(UnWARMenuItem);
        jMenu4.add(jSeparator5);
        StopStartMenuItem.setFont(new java.awt.Font("Default", 0, 11));
        StopStartMenuItem.setText("Stop / Start");
        StopStartMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StopStartMenuItemActionPerformed(evt);
            }
        });

        jMenu4.add(StopStartMenuItem);
        jMenu4.add(jSeparator13);
        manageMenuItem.setFont(new java.awt.Font("Default", 0, 11));
        manageMenuItem.setText("Manage Applications");
        manageMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageMenuItemActionPerformed(evt);
            }
        });

        jMenu4.add(manageMenuItem);
        jMenuBar1.add(jMenu4);
        jMenu5.setMnemonic('H');
        jMenu5.setText("Help");
        aboutMenuItem.setFont(new java.awt.Font("Default", 0, 11));
        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });

        jMenu5.add(aboutMenuItem);
        jMenuItem14.setFont(new java.awt.Font("Default", 0, 11));
        jMenuItem14.setText("Online Help");
        jMenu5.add(jMenuItem14);
        jMenuBar1.add(jMenu5);
        setJMenuBar(jMenuBar1);

        pack();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setSize(new java.awt.Dimension(1000, 700));
        setLocation((screenSize.width-1000)/2,(screenSize.height-700)/2);
    }//GEN-END:initComponents
    
    private void J2SDKHomeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_J2SDKHomeMenuItemActionPerformed
        // Add your handling code here:
        java2SdkHome javahome = new java2SdkHome( this, true );
        javahome.show();
    }//GEN-LAST:event_J2SDKHomeMenuItemActionPerformed
    
    private void htmlTemplateProjectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_htmlTemplateProjectMenuItemActionPerformed
        // Add your handling code here:
        htmlTemplate htmlt = new htmlTemplate( this, false );
        htmlt.show();
    }//GEN-LAST:event_htmlTemplateProjectMenuItemActionPerformed
    
    private void compileProjectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compileProjectMenuItemActionPerformed
        // Add your handling code here:
        saveAllFiles sf = new saveAllFiles( this, true );
        sf.show();
        compileProjectFiles cpf = new compileProjectFiles( this, true );
        cpf.show();
    }//GEN-LAST:event_compileProjectMenuItemActionPerformed
    
    private void warTemplateProjectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_warTemplateProjectMenuItemActionPerformed
        // Add your handling code here:
        applicationTemplate at = new applicationTemplate( this, true );
        at.show();
    }//GEN-LAST:event_warTemplateProjectMenuItemActionPerformed
    
    private void jwsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jwsMenuItemActionPerformed
        // Add your handling code here:
        String projectBase = getBuildDirectory();
        newJWS jws = new newJWS( this, true, projectBase );
        jws.show();
    }//GEN-LAST:event_jwsMenuItemActionPerformed
    
    private void searchProjectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchProjectMenuItemActionPerformed
        // Add your handling code here:
        searchProject sp = new searchProject( this, false );
        sp.show();
    }//GEN-LAST:event_searchProjectMenuItemActionPerformed
    
    private void resourceFactoryMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resourceFactoryMenuItemActionPerformed
        // Add your handling code here:
        openServerResourceFactory();
    }//GEN-LAST:event_resourceFactoryMenuItemActionPerformed
    
    private void addJarToClassPathMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addJarToClassPathMenuItemActionPerformed
        // Add your handling code here:
        mountJarLibrary mjl = new mountJarLibrary( this, true);
        mjl.show();
    }//GEN-LAST:event_addJarToClassPathMenuItemActionPerformed
    
    private void copyJarMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyJarMenuItemActionPerformed
        // Add your handling code here:
        copyJarLibrary cjl = new copyJarLibrary( this, true);
        cjl.show();
    }//GEN-LAST:event_copyJarMenuItemActionPerformed
    
    private void commonClassMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commonClassMenuItemActionPerformed
        // Add your handling code here:
        commonClasses cc = new commonClasses( this, true);
        cc.show();
    }//GEN-LAST:event_commonClassMenuItemActionPerformed
    
    private void dbConnectionPoolMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dbConnectionPoolMenuItemActionPerformed
        // Add your handling code here:
        mvcDBPool dbp = new mvcDBPool( this, true );
        dbp.show();
    }//GEN-LAST:event_dbConnectionPoolMenuItemActionPerformed
    
    private void jarLibrariesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jarLibrariesMenuItemActionPerformed
        // Add your handling code here:
        jarLibraries jl = new jarLibraries( this, true);
        jl.show();
    }//GEN-LAST:event_jarLibrariesMenuItemActionPerformed
    
    private void findButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findButtonActionPerformed
        // Add your handling code here:
        if( hasOpenIF() ) {
            searchText st = new searchText( this, false);
            st.show();
        }
    }//GEN-LAST:event_findButtonActionPerformed
    
    private void redoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoButtonActionPerformed
        // Add your handling code here:
        redoEdit();
    }//GEN-LAST:event_redoButtonActionPerformed
    
    private void undoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoButtonActionPerformed
        // Add your handling code here:
        undoEdit();
    }//GEN-LAST:event_undoButtonActionPerformed
    
    private void compileAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compileAllButtonActionPerformed
        // Add your handling code here:
        if( hasOpenCompilableIF() ) {
            saveAllFiles sf = new saveAllFiles( this, true );
            sf.show();
            compileAllFiles caf = new compileAllFiles( this, false );
            caf.show();
        }
    }//GEN-LAST:event_compileAllButtonActionPerformed
    
    private void compileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compileButtonActionPerformed
        // Add your handling code here:
        if( hasOpenCompilableIF() ) {
            saveFile sf = new saveFile( this, true );
            sf.show();
            compileFile cf = new compileFile( this, false );
            cf.show();
        }
    }//GEN-LAST:event_compileButtonActionPerformed
    
    private void saveAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAllButtonActionPerformed
        // Add your handling code here:
        if( hasOpenIF() ) {
            saveAllFiles sf = new saveAllFiles( this, true );
            sf.show();
        }
        
    }//GEN-LAST:event_saveAllButtonActionPerformed
    
    private void targetJVMMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_targetJVMMenuItemActionPerformed
        // Add your handling code here:
        targetJVM tjvm = new targetJVM( this, true );
        tjvm.show();
    }//GEN-LAST:event_targetJVMMenuItemActionPerformed
    
    private void connectionSettingMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectionSettingMenuItemActionPerformed
        // Add your handling code here:
        projectConnectionSettings pcs = new projectConnectionSettings( this, true );
        pcs.show();
    }//GEN-LAST:event_connectionSettingMenuItemActionPerformed
    
    private void manageMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageMenuItemActionPerformed
        // Add your handling code here:
        tomcatManager tm = new tomcatManager( this, true );
        tm.show();
    }//GEN-LAST:event_manageMenuItemActionPerformed
    
    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        // Add your handling code here:
        about ab = new about( this, true );
        ab.show();
    }//GEN-LAST:event_aboutMenuItemActionPerformed
    
    private void directoryMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_directoryMenuItemActionPerformed
        // Add your handling code here:
        String projectBase = getBuildDirectory();
        
        newDirectory nd = new newDirectory( this, true, projectBase );
        nd.show();
    }//GEN-LAST:event_directoryMenuItemActionPerformed
    
    private void servletMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_servletMenuItemActionPerformed
        // Add your handling code here:
        String projectBase = getBuildDirectory();
        
        newJavaServlet njs = new newJavaServlet( this, true, projectBase );
        njs.show();
    }//GEN-LAST:event_servletMenuItemActionPerformed
    
    private void textMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textMenuItemActionPerformed
        // Add your handling code here:
        String projectBase = getTreeCurrentPath();
        if( projectBase.length() > 0 ) {
            if( new File( projectBase ).isDirectory() ) {
                if( !projectBase.equalsIgnoreCase( getBuildDirectory() ) ) {
                    newText nt = new newText( this, true, projectBase );
                    nt.show();
                }
            } else {
                projectBase = projectBase.substring( 0, projectBase.lastIndexOf( '\\' ) );
                if( new File( projectBase ).isDirectory() ) {
                    if( !projectBase.equalsIgnoreCase( getBuildDirectory() ) ) {
                        newText nt = new newText( this, true, projectBase );
                        nt.show();
                    }
                }
                //printMessage( projectBase );
            }
        } else {
            printMessage( "Error no selected directory" );
        }
        
    }//GEN-LAST:event_textMenuItemActionPerformed
    
    private void propertyMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_propertyMenuItemActionPerformed
        // Add your handling code here:
        String projectBase = getBuildDirectory();
        
        newProperties np = new newProperties( this, true, projectBase );
        np.show();
    }//GEN-LAST:event_propertyMenuItemActionPerformed
    
    private void htmlMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_htmlMenuItemActionPerformed
        // Add your handling code here:
        String projectBase = getBuildDirectory();
        
        newHTML nh = new newHTML( this, true, projectBase );
        nh.show();
    }//GEN-LAST:event_htmlMenuItemActionPerformed
    
    private void beanMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_beanMenuItemActionPerformed
        // Add your handling code here:
        String projectBase = getBuildDirectory();
        
        newJavaBean njb = new newJavaBean( this, true, projectBase );
        njb.show();
    }//GEN-LAST:event_beanMenuItemActionPerformed
    
    private void jspMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jspMenuItemActionPerformed
        // Add your handling code here:
        String projectBase = getBuildDirectory();
        
        newJSP nj = new newJSP( this, true, projectBase );
        nj.show();
    }//GEN-LAST:event_jspMenuItemActionPerformed
    
    private void javaPackageMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_javaPackageMenuItemActionPerformed
        // Add your handling code here:
        String projectBase = getBuildDirectory();
        
        newPackage np = new newPackage( this, true, projectBase );
        np.show();
        
    }//GEN-LAST:event_javaPackageMenuItemActionPerformed
    
    private void renameMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renameMenuItemActionPerformed
        // Add your handling code here:
        renameItem();
    }//GEN-LAST:event_renameMenuItemActionPerformed
    
    private void deleteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMenuItemActionPerformed
        // Add your handling code here:
        deleteItem();
        
    }//GEN-LAST:event_deleteMenuItemActionPerformed
    
    private void antBuildXmlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_antBuildXmlActionPerformed
        // Add your handling code here:
        String selectedFile = getBuildDirectory() + "\\build.xml";
        if( !isFrameOpen( selectedFile ) ) {
            openAntBuildXml();
        }
    }//GEN-LAST:event_antBuildXmlActionPerformed
    
    private void compileAllMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compileAllMenuItemActionPerformed
        // Add your handling code here:
        if( hasOpenCompilableIF() ) {
            saveAllFiles sf = new saveAllFiles( this, true );
            sf.show();
            compileAllFiles caf = new compileAllFiles( this, false );
            caf.show();
        }
        
    }//GEN-LAST:event_compileAllMenuItemActionPerformed
    
    private void compileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compileMenuItemActionPerformed
        // Add your handling code here:
        if( hasOpenCompilableIF() ) {
            saveFile sf = new saveFile( this, true );
            sf.show();
            compileFile cf = new compileFile( this, false );
            cf.show();
        }
        
    }//GEN-LAST:event_compileMenuItemActionPerformed
    
    private void saveAllMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAllMenuItemActionPerformed
        // Add your handling code here:
        if( hasOpenIF() ) {
            saveAllFiles sf = new saveAllFiles( this, true );
            sf.show();
        }
        //saveAllButtonAction();
    }//GEN-LAST:event_saveAllMenuItemActionPerformed
    
    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        // Add your handling code here:
        if( hasOpenIF() ) {
            saveFile sf = new saveFile( this, true );
            sf.show();
        }
        //saveButtonAction();
    }//GEN-LAST:event_saveMenuItemActionPerformed
    
    private void sendFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendFileMenuItemActionPerformed
        // Add your handling code here:
        archiveSendFile asf = new archiveSendFile( this, false );
        asf.show();
    }//GEN-LAST:event_sendFileMenuItemActionPerformed
    
    private void editMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editMenuItemActionPerformed
        // Add your handling code here:
        String selectedFile = treePanel.getCurrentPath(); // file from tree
        editSourceCode( selectedFile );
    }//GEN-LAST:event_editMenuItemActionPerformed
    
    private void webAppDescriptorMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_webAppDescriptorMenuItemActionPerformed
        // Add your handling code here:
        String selectedFile = getBuildDirectory() + "\\metadata\\web.xml";
        if( !isFrameOpen( selectedFile ) ) {
            openWebXml();
        }
        
    }//GEN-LAST:event_webAppDescriptorMenuItemActionPerformed
    
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // Add your handling code here:
        if( hasOpenIF() ) {
            saveFile sf = new saveFile( this, true );
            sf.show();
        }
        //saveButtonAction();
    }//GEN-LAST:event_saveButtonActionPerformed
    
    private void controllerActionMapMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_controllerActionMapMenuItemActionPerformed
        // Add your handling code here:
        String selectedFile = getBuildDirectory() + "\\classes\\controllerActionMap.properties";
        if( !isFrameOpen( selectedFile ) ) {
            openControllerActionMap();
        }
    }//GEN-LAST:event_controllerActionMapMenuItemActionPerformed
    
    private void connectionSettingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectionSettingActionPerformed
        // Add your handling code here:
        projectConnectionSettings pcs = new projectConnectionSettings( this, true );
        pcs.show();
    }//GEN-LAST:event_connectionSettingActionPerformed
    
    private void projectNewMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_projectNewMenuItemActionPerformed
        // Add your handling code here:
        projectNew pn = new projectNew( this, true);
        pn.show();
    }//GEN-LAST:event_projectNewMenuItemActionPerformed
    
    private void projectNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_projectNewActionPerformed
        // Add your handling code here:
        projectNew pn = new projectNew( this, true);
        pn.show();
    }//GEN-LAST:event_projectNewActionPerformed
    
    private void StopStartMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StopStartMenuItemActionPerformed
        // Add your handling code here:
        appManager am = new appManager( this, true, "stop" );
        am.show();
        am = new appManager( this, false, "start" );
        am.show();
    }//GEN-LAST:event_StopStartMenuItemActionPerformed
    
    private void reloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reloadActionPerformed
        // Add your handling code here:
        appManager am = new appManager( this, false, "reload" );
        am.show();
    }//GEN-LAST:event_reloadActionPerformed
    
    private void UnWARMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UnWARMenuItemActionPerformed
        // Add your handling code here:
        appManager am = new appManager( this, false, "unwar" );
        am.show();
    }//GEN-LAST:event_UnWARMenuItemActionPerformed
    
    private void ReloadMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReloadMenuItemActionPerformed
        // Add your handling code here:
        appManager am = new appManager( this, false, "reload" );
        am.show();
    }//GEN-LAST:event_ReloadMenuItemActionPerformed
    
    private void StartMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartMenuItemActionPerformed
        // Add your handling code here:
        appManager am = new appManager( this, false, "start" );
        am.show();
    }//GEN-LAST:event_StartMenuItemActionPerformed
    
    private void StopMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StopMenuItemActionPerformed
        // Add your handling code here:
        appManager am = new appManager( this, false, "stop" );
        am.show();
    }//GEN-LAST:event_StopMenuItemActionPerformed
    
    private void SendArchiveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendArchiveMenuItemActionPerformed
        // Add your handling code here:
        archiveSend as = new archiveSend( this, false);
        as.show();
    }//GEN-LAST:event_SendArchiveMenuItemActionPerformed
    
    private void RefreshMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshMenuItemActionPerformed
        // Add your handling code here:
        archiveRefresh ar = new archiveRefresh( this, false);
        ar.show();
    }//GEN-LAST:event_RefreshMenuItemActionPerformed
    
    private void projectOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_projectOpenActionPerformed
        // Add your handling code here:
        projectOpen po = new projectOpen( this, true);
        po.show();
    }//GEN-LAST:event_projectOpenActionPerformed
    
    private void projectOpenMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_projectOpenMenuItemActionPerformed
        // Add your handling code here:
        projectOpen po = new projectOpen( this, false);
        po.show();
        printMessage( "projectOpen" );
    }//GEN-LAST:event_projectOpenMenuItemActionPerformed
    
    private void ExitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitMenuItemActionPerformed
        // Add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_ExitMenuItemActionPerformed
    
    private void sendFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendFileActionPerformed
        // Add your handling code here:
        archiveSendFile asf = new archiveSendFile( this, false );
        asf.show();
    }//GEN-LAST:event_sendFileActionPerformed
    
    private void sendArchiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendArchiveActionPerformed
        // add your handling code here
        archiveSend as = new archiveSend( this, false);
        as.show();
    }//GEN-LAST:event_sendArchiveActionPerformed
    
    private void startActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startActionPerformed
        // Add your handling code here:
        appManager am = new appManager( this, false, "start" );
        am.show();
    }//GEN-LAST:event_startActionPerformed
    
    private void stopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopActionPerformed
        // Add your handling code here:
        appManager am = new appManager( this, false, "stop" );
        am.show();
    }//GEN-LAST:event_stopActionPerformed
    
    private void unWARActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unWARActionPerformed
        // Add your handling code here:
        appManager am = new appManager( this, false, "unwar" );
        am.show();
    }//GEN-LAST:event_unWARActionPerformed
    
    private void stopStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopStartActionPerformed
        // Add your handling code here:
        appManager am = new appManager( this, true, "stop" );
        am.show();
        am = new appManager( this, false, "start" );
        am.show();
    }//GEN-LAST:event_stopStartActionPerformed
    
    private void createArchiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createArchiveActionPerformed
        //
        archiveRefresh ar = new archiveRefresh( this, false);
        ar.show();
    }//GEN-LAST:event_createArchiveActionPerformed
    
    private void doneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doneActionPerformed
        // Add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_doneActionPerformed
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new mainForm().show();
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSeparator jSeparator2111;
    private javax.swing.JMenuItem webAppDescriptorMenuItem;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JScrollPane treeScrollPane;
    private javax.swing.JMenuItem controllerActionMapMenuItem;
    private javax.swing.JMenuItem manageMenuItem;
    private javax.swing.JMenuItem StartMenuItem;
    private javax.swing.JMenuItem compileAllMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JButton projectNew;
    private javax.swing.JDesktopPane jDesktopPane2;
    public javax.swing.JButton findButton;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JSeparator jSeparator10;
    private javax.swing.JMenuItem SendArchiveMenuItem;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuItem sendFileMenuItem;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JSeparator jSeparator9;
    private javax.swing.JMenuItem RefreshMenuItem;
    private javax.swing.JMenuItem htmlTemplateProjectMenuItem;
    private javax.swing.JFileChooser chooser;
    private javax.swing.JMenuItem connectionSettingMenuItem;
    private javax.swing.JMenuItem jwsMenuItem;
    private javax.swing.JSeparator jSeparator221;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JDesktopPane codeDesktopPane;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JMenuItem editMenuItem;
    private javax.swing.JMenuItem ReloadMenuItem;
    private javax.swing.JSeparator jSeparator152;
    private javax.swing.JMenuItem commonClassMenuItem;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuItem StopMenuItem;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JButton unWAR;
    private javax.swing.JMenuItem renameMenuItem;
    private javax.swing.JMenuItem projectNewMenuItem;
    private javax.swing.JMenuItem jspMenuItem;
    private javax.swing.JButton projectOpen;
    private javax.swing.JButton saveAllButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JMenuItem projectOpenMenuItem;
    private javax.swing.JMenuItem addJarToClassPathMenuItem;
    private javax.swing.JMenuItem htmlMenuItem;
    private javax.swing.JMenuItem compileMenuItem;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem textMenuItem;
    private javax.swing.JMenuItem beanMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JSeparator jSeparator14;
    private javax.swing.JMenuItem jarLibrariesMenuItem;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JSeparator jSeparator13;
    private javax.swing.JButton start;
    private javax.swing.JMenuItem warTemplateProjectMenuItem;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator151;
    private javax.swing.JSeparator jSeparator12;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator11;
    private javax.swing.JSeparator jSeparator15;
    private javax.swing.JSeparator jSeparator21;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JMenuItem searchProjectMenuItem;
    private javax.swing.JButton connectionSetting;
    private javax.swing.JButton compileAllButton;
    private javax.swing.JMenuItem compileProjectMenuItem;
    private javax.swing.ButtonGroup optionGrp;
    private javax.swing.JMenu jMenu3;
    public javax.swing.JButton undoButton;
    private javax.swing.JSeparator jSeparator16;
    private javax.swing.JMenuItem resourceFactoryMenuItem;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton stop;
    private javax.swing.JMenuItem dbConnectionPoolMenuItem;
    private javax.swing.JMenuItem StopStartMenuItem;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JButton sendFile;
    private javax.swing.JButton reload;
    private javax.swing.JMenuItem copyJarMenuItem;
    private javax.swing.JMenuItem antBuildXml;
    private javax.swing.JMenuItem J2SDKHomeMenuItem;
    private javax.swing.JSeparator jSeparator22;
    private javax.swing.JMenuItem propertyMenuItem;
    private javax.swing.JSeparator jSeparator211;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSeparator jSeparator21111;
    private javax.swing.JButton createArchive;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JMenuItem javaPackageMenuItem;
    private javax.swing.JMenuItem servletMenuItem;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JMenuItem ExitMenuItem;
    private javax.swing.JMenuItem targetJVMMenuItem;
    private javax.swing.JButton compileButton;
    private javax.swing.JMenuItem saveAllMenuItem;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JMenuItem directoryMenuItem;
    private javax.swing.JButton sendArchive;
    private javax.swing.JMenuItem UnWARMenuItem;
    public javax.swing.JButton redoButton;
    private javax.swing.JButton stopStart;
    // End of variables declaration//GEN-END:variables
    
    // BMutia 12/9/2002
    // My other private variables
    
    private String javaHome = System.getProperty( "java.home" );
    
    private String LnF = "com.sun.java.swing.plaf.windows.WindowsLookAndFeel";
    
    private String SSHServer;
    private int serverPort = 9002;
    private String SSHPassword = "718293";
    private String userID = new String();
    
    private String buildDirectory = "";
    private String buildXmlName = "build.xml";
    private String warFileName = new String();
    private String remoteDirectory = "/products/tomcat4/webapps";
    
    private String batch = "c:\\Temp\\upload.bat";
    private String compilejspbatch = "c:\\Temp\\compilejsp.bat";
    private String mountedJar; //getBuildDirectory() + '\\' + "otherjar.properties";
    
    private DynamicTree treePanel = new DynamicTree( this );
    private JList fileList = new JList();
    private int windowXPos, windowYPos = 0;
    private boolean saveFile = false;
    
    final String dummyFile = "path.txt";
    private String archiverBaseDir = getArchiverBaseDir();
    
    // splashscreen variables
    private static JWindow splashScreen = null;
    private static JLabel splashLabel = null;
    private static JFrame frame = null;
    
    // cut, copy and paste
    private boolean canTreePaste = false;
    private String[] copyCutTree = { null, null }; // ( "command", "path" )
    
    // remote server.xml path
    private String remoteServerXmlPath = "";
    private String serverResourceFactory = "server.xml";
    private String backupServerXmlResult = "";
    
    BuildMessage buildmessage = new BuildMessage();
    private String sdkHome = "j2sdkhome.properties";
    private String java_home = "";
    
    public void setBackupServerXmlResult( String result ) {
        backupServerXmlResult = result;
    }
    
    public void setRemoteServerXmlPath( String path ) {
        remoteServerXmlPath = path;
    }
    
    public String getRemoteServerXmlPath() {
        return remoteServerXmlPath;
    }
    
    public String getMountedJar() {
        mountedJar = getBuildDirectory() + '\\' + "otherjar.properties";
        return mountedJar;
    }
    
    public void createdMountedJarFile() {
        
        String[] comments = { "# jar files added to classpath", "" };
        createConfigFile( mountedJar, comments );
        
    }
    
    // read data
    public String readMountedJarProperties() {
        
        String rvalue = new String();
        String s = new String();
        int ctr = 0;
        
        try {
            DataInputStream in = new DataInputStream( new BufferedInputStream( new FileInputStream( new File( mountedJar ) ) ) );
            try {
                while( (s = in.readLine())!= null ) {
                    ctr++;
                    if( ctr == 1) {
                        rvalue += s;
                    } else {
                        rvalue += '\n' + s;
                    }
                    
                }
                
                try {
                    in.close();
                } catch( IOException e ){
                    printMessage( e.toString() );
                }
            } catch( IOException e){
                printMessage( e.toString() );
            }
            
        } catch( IOException e) {
            printMessage( e.toString() );
        }
        
        return rvalue;
        
    }
    
    // read data
    public String[] getAddedJarToClassPath() {
        
        String[] rvalue = new String[1];
        String s = new String();
        int ctr = 0;
        HashSet hash = new HashSet();
        
        File jarProperties =  new File( getMountedJar() );
        
        if( jarProperties.exists() ) {
            
            try {
                DataInputStream in = new DataInputStream( new BufferedInputStream( new FileInputStream( new File( mountedJar ) ) ) );
                try {
                    while( ( s = in.readLine() ) != null ) {
                        if( !s.trim().startsWith( "#" ) ) {
                            hash.add( s );
                        }
                    }
                    
                    Object[] oArray = hash.toArray();
                    rvalue = new String[ oArray.length ];
                    
                    
                    for( int i = 0 ; i < oArray.length ; i++ ) {
                        rvalue[i] = (String) oArray[i];
                    }
                    
                    try {
                        in.close();
                    } catch( IOException e ){
                        printMessage( e.toString() );
                    }
                } catch( IOException e){
                    printMessage( e.toString() );
                }
                
            } catch( IOException e) {
                printMessage( e.toString() );
            }
        }
        
        
        
        return rvalue;
        
    }
    
    public boolean getCanPaste() {
        return canTreePaste;
    }
    
    public void setCanPaste( boolean b ) {
        canTreePaste = b;
    }
    
    public String[] getCopyCutTree() {
        return copyCutTree;
    }
    
    public void setCopyCutTree( String[] copyCut ) {
        copyCutTree = copyCut;
    }
    
    public void openAntBuildXml() {
        
        String selectedFile = getBuildDirectory() + "\\build.xml";
        
        mvcAntBuilder mvc = new mvcAntBuilder( this, selectedFile );
        mvc.setLocation( windowXPos += 10, windowYPos += 10 );
        if( windowXPos > 40 ) {
            windowXPos = 0;
            windowYPos = 0;
        }
        this.codeDesktopPane.add( mvc );
        mvc.show();
        mvc.toFront();
        
        try {
            mvc.setSelected( true );
        } catch( java.beans.PropertyVetoException pve ) {
            printMessage( pve.toString() );
        }
    }
    
    public void openServerResourceFactory() {
        
        sourceServerResourceFactoryIF mvc = new sourceServerResourceFactoryIF( this );
        mvc.setLocation( windowXPos += 10, windowYPos += 10 );
        if( windowXPos > 40 ) {
            windowXPos = 0;
            windowYPos = 0;
        }
        this.codeDesktopPane.add( mvc );
        mvc.show();
        mvc.toFront();
        
        try {
            mvc.setSelected( true );
        } catch( java.beans.PropertyVetoException pve ) {
            printMessage( pve.toString() );
        }
    }
    
    public String readJspcXml( String fileSource, String jspFile, String jspDir ) {
        
        final String JSPFILE = "<JSPFILE>";
        final String JSPDIR = "<JSPDIR>";
        
        String rvalue = new String();
        String s = new String();
        DataInputStream in;
        
        try {
            in = new DataInputStream( new BufferedInputStream( new FileInputStream( fileSource ) ) );
            try {
                while( (s = in.readLine())!= null ) {
                    if( s.indexOf( JSPFILE ) != -1 ) {
                        s = s.substring( 0, s.indexOf( JSPFILE ) ) + jspFile +
                        s.substring( s.indexOf( JSPFILE ) +  JSPFILE.length() );
                    }
                    
                    if( s.indexOf( JSPDIR )  != -1 ) {
                        s = s.substring( 0, s.indexOf( JSPDIR ) ) + jspDir +
                        s.substring( s.indexOf( JSPDIR ) +  JSPDIR.length() );
                    }
                    rvalue += s + '\n';
                }
                
                try {
                    in.close();
                } catch( IOException exc ){
                    printMessage( exc.toString());
                }
            } catch( IOException exc ){
                printMessage( exc.toString());
            }
        } catch( IOException exc ) {
            printMessage( exc.toString());
        }
        
        return rvalue;
        
    }
    
    
    public String createJspcXml( String sourcePath ) {
        
        String rvalue = new String();
        
        String jspcTemplate = getArchiverBaseDir() + "templates\\jspc.xml";
        String jspFileName = sourcePath.substring( sourcePath.lastIndexOf( '\\')+1 );
        String jspLocation = sourcePath.substring( 0, sourcePath.lastIndexOf( '\\') );
        String projDir = getBuildDirectory();
        
        jspLocation = jspLocation.substring( projDir.length()+1 );
        jspLocation = jspLocation.replace( '\\','/');
        
        String jspcStr = readJspcXml( jspcTemplate, jspFileName, jspLocation );
        
        if( saveCodeToFile( jspcStr, projDir+"\\jspc.xml" ) ) {
            rvalue = projDir + "\\workarea\\java\\" + jspLocation.replace( '/', '\\') + '\\' +
            jspFileName.replace( '.', '_') + ".java";
        } else {
            printMessage( "Error creating jspc.xml" );
        }
        
        return rvalue;
    }
    
    public void copyFile( String from, String to ) {
        
        try {
            //String osName = System.getProperty("os.name" );
            String[] cmd = new String[3];
                        
            String commandLine = "copy  /B /V /Y " + from + " " + to + " /B";
            
            cmd[0] = "cmd.exe" ;
            cmd[1] = "/C" ;
            cmd[2] = commandLine;
            
            Runtime rt = Runtime.getRuntime();
            printMessage(cmd[2]);
            Process proc = rt.exec(cmd);
            // any error message?
            StreamGobbler errorGobbler = new StreamGobbler(proc.getErrorStream(), "ERROR", this );
            
            // any output?
            StreamGobbler outputGobbler = new StreamGobbler(proc.getInputStream(), "OUTPUT", this );
            
            // kick them off
            errorGobbler.start();
            outputGobbler.start();
            
            // wait for process to end
            proc.waitFor();
            
        } catch (Throwable t) {
            t.printStackTrace();
        }
        
    }
    
    public void osDeleteFile( String file ) {
        
        try {
            //String osName = System.getProperty("os.name" );
            String[] cmd = new String[3];
                        
            String commandLine = "erase  /F /S /Q " + file;
            
            cmd[0] = "cmd.exe" ;
            cmd[1] = "/C" ;
            cmd[2] = commandLine;
            
            Runtime rt = Runtime.getRuntime();
            printMessage(cmd[2]);
            Process proc = rt.exec(cmd);
            // any error message?
            StreamGobbler errorGobbler = new StreamGobbler(proc.getErrorStream(), "ERROR", this );
            
            // any output?
            StreamGobbler outputGobbler = new StreamGobbler(proc.getInputStream(), "OUTPUT", this );
            
            // kick them off
            errorGobbler.start();
            outputGobbler.start();
            
            // wait for process to end
            proc.waitFor();
            
        } catch (Throwable t) {
            t.printStackTrace();
        }
        
    }
    
    
    public void osDeleteDir( String dir ) {
        
        try {
            //String osName = System.getProperty("os.name" );
            String[] cmd = new String[3];
                        
            String commandLine = "rmdir /S /Q " + dir;
            
            cmd[0] = "cmd.exe" ;
            cmd[1] = "/C" ;
            cmd[2] = commandLine;
            
            Runtime rt = Runtime.getRuntime();
            printMessage(cmd[2]);
            Process proc = rt.exec(cmd);
            // any error message?
            StreamGobbler errorGobbler = new StreamGobbler(proc.getErrorStream(), "ERROR", this );
            
            // any output?
            StreamGobbler outputGobbler = new StreamGobbler(proc.getInputStream(), "OUTPUT", this );
            
            // kick them off
            errorGobbler.start();
            outputGobbler.start();
            
            // wait for process to end
            proc.waitFor();
            
        } catch (Throwable t) {
            t.printStackTrace();
        }
        
    }
    
    
    public void osMakeDir( String dir ) {
        
        try {
            //String osName = System.getProperty("os.name" );
            String[] cmd = new String[3];
                        
            String commandLine = "mkdir " + dir;
            
            cmd[0] = "cmd.exe" ;
            cmd[1] = "/C" ;
            cmd[2] = commandLine;
            
            Runtime rt = Runtime.getRuntime();
            printMessage(cmd[2]);
            Process proc = rt.exec(cmd);
            // any error message?
            StreamGobbler errorGobbler = new StreamGobbler(proc.getErrorStream(), "ERROR", this );
            
            // any output?
            StreamGobbler outputGobbler = new StreamGobbler(proc.getInputStream(), "OUTPUT", this );
            
            // kick them off
            errorGobbler.start();
            outputGobbler.start();
            
            // wait for process to end
            proc.waitFor();
            
        } catch (Throwable t) {
            t.printStackTrace();
        }
        
    }
    
    
    public void closeAllFrames() {
        
        JInternalFrame[] jif = codeDesktopPane.getAllFrames();
        
        for( int i = 0 ; i < jif.length ; i++ ) {
            jif[i].dispose();
        }
        
    }
    
    public void compileAllFiles() {
        
        JInternalFrame[] jif = codeDesktopPane.getAllFrames();
        String className = new String();
        String targetFile = new String();
        String classPath = new String();
        String targetVersion = readJvmSetting();
        
        for( int i = 0 ; i < jif.length ; i++ ) {
            
            className = jif[i].getClass().toString();
            
            if( className.endsWith( "sourceJAVAEditorIF" ) ) {
                
                targetFile = ( (sourceJAVAEditorIF ) jif[i] ).getFileSource();
                classPath = getClassPath();
                
                try {
                    //String osName = System.getProperty("os.name" );
                    String[] cmd = new String[3];
                                        
                    String commandLine = getJavaHomeDir() + "\\bin\\javac -deprecation -classpath " + classPath + " \"" + targetFile + "\" " +
                    ( targetVersion.equalsIgnoreCase( "default" ) ? "" :  " -target "+targetVersion );
                    
                    cmd[0] = "cmd.exe" ;
                    cmd[1] = "/C" ;
                    cmd[2] = commandLine;
                    
                    Runtime rt = Runtime.getRuntime();
                    printMessage(cmd[2]);
                    Process proc = rt.exec(cmd);
                    // any error message?
                    StreamGobbler errorGobbler = new StreamGobbler(proc.getErrorStream(), "ERROR", this );
                    
                    // any output?
                    StreamGobbler outputGobbler = new StreamGobbler(proc.getInputStream(), "OUTPUT", this );
                    
                    // kick them off
                    errorGobbler.start();
                    outputGobbler.start();
                    
                    //wait for process to end
                    proc.waitFor();
                    
                } catch (Throwable t) {
                    t.printStackTrace();
                }
                
            } else if( className.endsWith( "sourceJSPEditorIF" ) ) {
                
                classPath = getClassPath();
                //targetFile = ( (sourceJSPEditorIF ) selectedFrame ).getFileSource();
                targetFile = ( (sourceJSPEditorIF ) jif[i] ).getFileSource();
                
                String generatedFile = createJspcXml( targetFile );
                
                try {
                    //String osName = System.getProperty("os.name" );
                    String[] cmd = new String[3];
                    
                    createCompileJspBatchFile();
                    
                    cmd[0] = "cmd.exe" ;
                    cmd[1] = "/C" ;
                    cmd[2] = compilejspbatch;
                    
                    Runtime rt = Runtime.getRuntime();
                    printMessage( cmd[2] );
                    Process proc = rt.exec(cmd);
                    // any error message?
                    StreamGobbler errorGobbler = new StreamGobbler(proc.getErrorStream(), "ERROR", this );
                    
                    // any output?
                    StreamGobbler outputGobbler = new StreamGobbler(proc.getInputStream(), "OUTPUT", this );
                    
                    // kick them off
                    errorGobbler.start();
                    outputGobbler.start();
                    
                    // wait til done before proceding with compiling genrated java file
                    proc.waitFor();
                    // compile JSPC generated java file
                    try {
                        printMessage( "Compiling generated java file" );
                        //String osName = System.getProperty("os.name" );
                        cmd = new String[3];
                                                
                        String commandLine = getJavaHomeDir() + "\\bin\\javac -deprecation -classpath " + classPath + " \"" + generatedFile + "\" " +
                        ( targetVersion.equalsIgnoreCase( "default" ) ? "" :  " -target "+targetVersion );;
                        
                        cmd[0] = "cmd.exe" ;
                        cmd[1] = "/C" ;
                        cmd[2] = commandLine;
                        
                        rt = Runtime.getRuntime();
                        printMessage( cmd[2] );
                        proc = rt.exec(cmd);
                        // any error message?
                        errorGobbler = new StreamGobbler(proc.getErrorStream(), "ERROR", this );
                        
                        // any output?
                        outputGobbler = new StreamGobbler(proc.getInputStream(), "OUTPUT", this );
                        
                        // kick them off
                        errorGobbler.start();
                        outputGobbler.start();
                        
                        //wait for process to end
                        proc.waitFor();
                        
                    } catch (Throwable t) {
                        t.printStackTrace();
                    }
                    
                    
                } catch (Throwable t) {
                    t.printStackTrace();
                }
                
            } else if( className.endsWith( "sourceJWSEditorIF" ) ) {
                
                targetFile = ( (sourceJWSEditorIF ) jif[i] ).getFileSource();
                String javaFile = getBuildDirectory() + "\\workarea" + targetFile.substring( targetFile.lastIndexOf( '\\' ) );
                javaFile = javaFile.substring( 0, javaFile.lastIndexOf( '.' ) ) + ".java";
                
                //String javaFile = targetFile.substring( 0, targetFile.lastIndexOf( '.' ) ) + ".java";
                //String classFile = targetFile.substring( 0, targetFile.lastIndexOf( '.' ) ) + ".class";
                
                copyFile( '\"' + targetFile + '\"', '\"' + javaFile + '\"' );
                
                classPath = getClassPath();
                
                try {
                    //String osName = System.getProperty("os.name" );
                    String[] cmd = new String[3];
                                        
                    String commandLine = getJavaHomeDir() + "\\bin\\javac -deprecation -classpath " + classPath + " \"" + javaFile + "\" " +
                    ( targetVersion.equalsIgnoreCase( "default" ) ? "" :  " -target "+targetVersion );
                    
                    cmd[0] = "cmd.exe" ;
                    cmd[1] = "/C" ;
                    cmd[2] = commandLine;
                    
                    Runtime rt = Runtime.getRuntime();
                    printMessage( cmd[2] );
                    Process proc = rt.exec(cmd);
                    // any error message?
                    StreamGobbler errorGobbler = new StreamGobbler(proc.getErrorStream(), "ERROR", this );
                    
                    // any output?
                    StreamGobbler outputGobbler = new StreamGobbler(proc.getInputStream(), "OUTPUT", this );
                    
                    // kick them off
                    errorGobbler.start();
                    outputGobbler.start();
                    
                    //wait for process to end
                    proc.waitFor();
                    
                    // any error???
                    //rvalue = true;
                    
                    File java = new File( javaFile );
                    //File clas = new File( classFile );
                    
                    if( java.exists()) {
                        java.delete();
                    }
                    //if( clas.exists()) {
                    //    clas.delete();
                    //}
                    
                } catch (Throwable t) {
                    t.printStackTrace();
                    //rvalue = false;
                }
                
            }
            
        } // for
        
        printMessage( "Done compiling all files" );
        
    }
    
    
    public void compileProjectFiles() {
        
        DirectoryScanner ds = new DirectoryScanner();
        String[] includes = { "**\\*.java", "**\\*.jsp", "**\\*.jws" };
        String[] excludes = { "workarea\\**" };
        
        ds.setBasedir( getBuildDirectory() );
        ds.setCaseSensitive( true );
        ds.setIncludes( includes );
        ds.setExcludes( excludes );
        ds.scan();
        String[] files = ds.getIncludedFiles();
        
        
        String className = new String();
        String targetFile = new String();
        String classPath = new String();
        String targetVersion = readJvmSetting();
        
        for( int i = 0 ; i < files.length ; i++ ) {
            
            targetFile = getBuildDirectory() + '\\' + files[i];
            classPath = getClassPath();
            
            if( targetFile.toLowerCase().endsWith( ".java" ) ) {
                
                try {
                    //String osName = System.getProperty("os.name" );
                    String[] cmd = new String[3];
                                        
                    String commandLine = getJavaHomeDir() + "\\bin\\javac -deprecation -classpath " + classPath + " \"" + targetFile + "\" " +
                    ( targetVersion.equalsIgnoreCase( "default" ) ? "" :  " -target "+targetVersion );
                    
                    cmd[0] = "cmd.exe" ;
                    cmd[1] = "/C" ;
                    cmd[2] = commandLine;
                    
                    Runtime rt = Runtime.getRuntime();
                    printMessage(cmd[2]);
                    Process proc = rt.exec(cmd);
                    // any error message?
                    StreamGobbler errorGobbler = new StreamGobbler(proc.getErrorStream(), "ERROR", this );
                    
                    // any output?
                    StreamGobbler outputGobbler = new StreamGobbler(proc.getInputStream(), "OUTPUT", this );
                    
                    // kick them off
                    errorGobbler.start();
                    outputGobbler.start();
                    
                    //wait for process to end
                    proc.waitFor();
                    
                } catch (Throwable t) {
                    t.printStackTrace();
                }
                
            } else if( targetFile.toLowerCase().endsWith( ".jsp" ) ) {
                
                String generatedFile = createJspcXml( targetFile );
                
                try {
                    //String osName = System.getProperty("os.name" );
                    String[] cmd = new String[3];
                                        
                    createCompileJspBatchFile();
                    
                    cmd[0] = "cmd.exe" ;
                    cmd[1] = "/C" ;
                    cmd[2] = compilejspbatch;
                    
                    Runtime rt = Runtime.getRuntime();
                    printMessage( cmd[2] );
                    Process proc = rt.exec(cmd);
                    // any error message?
                    StreamGobbler errorGobbler = new StreamGobbler(proc.getErrorStream(), "ERROR", this );
                    
                    // any output?
                    StreamGobbler outputGobbler = new StreamGobbler(proc.getInputStream(), "OUTPUT", this );
                    
                    // kick them off
                    errorGobbler.start();
                    outputGobbler.start();
                    
                    // wait til done before proceding with compiling genrated java file
                    proc.waitFor();
                    // compile JSPC generated java file
                    try {
                        printMessage( "Compiling generated java file" );
                        //String osName = System.getProperty("os.name" );
                        cmd = new String[3];
                                                
                        String commandLine = getJavaHomeDir() + "\\bin\\javac -deprecation -classpath " + classPath + " \"" + generatedFile + "\" " +
                        ( targetVersion.equalsIgnoreCase( "default" ) ? "" :  " -target "+targetVersion );;
                        
                        cmd[0] = "cmd.exe" ;
                        cmd[1] = "/C" ;
                        cmd[2] = commandLine;
                        
                        rt = Runtime.getRuntime();
                        printMessage( cmd[2] );
                        proc = rt.exec(cmd);
                        // any error message?
                        errorGobbler = new StreamGobbler(proc.getErrorStream(), "ERROR", this );
                        
                        // any output?
                        outputGobbler = new StreamGobbler(proc.getInputStream(), "OUTPUT", this );
                        
                        // kick them off
                        errorGobbler.start();
                        outputGobbler.start();
                        
                        //wait for process to end
                        proc.waitFor();
                        
                    } catch (Throwable t) {
                        t.printStackTrace();
                    }
                    
                    
                } catch (Throwable t) {
                    t.printStackTrace();
                }
                
            } else if( targetFile.toLowerCase().endsWith( ".jws" ) ) {
                
                String javaFile = targetFile.substring( 0, targetFile.lastIndexOf( '.' ) ) + ".java";
                String classFile = targetFile.substring( 0, targetFile.lastIndexOf( '.' ) ) + ".class";
                
                copyFile( '\"' + targetFile + '\"', '\"' + javaFile + '\"' );
                
                classPath = getClassPath();
                
                try {
                    //String osName = System.getProperty("os.name" );
                    String[] cmd = new String[3];
                                        
                    String commandLine = getJavaHomeDir() + "\\bin\\javac -deprecation -classpath " + classPath + " \"" + javaFile + "\" " +
                    ( targetVersion.equalsIgnoreCase( "default" ) ? "" :  " -target "+targetVersion );
                    
                    cmd[0] = "cmd.exe" ;
                    cmd[1] = "/C" ;
                    cmd[2] = commandLine;
                    
                    Runtime rt = Runtime.getRuntime();
                    printMessage( cmd[2] );
                    Process proc = rt.exec(cmd);
                    // any error message?
                    StreamGobbler errorGobbler = new StreamGobbler(proc.getErrorStream(), "ERROR", this );
                    
                    // any output?
                    StreamGobbler outputGobbler = new StreamGobbler(proc.getInputStream(), "OUTPUT", this );
                    
                    // kick them off
                    errorGobbler.start();
                    outputGobbler.start();
                    
                    //wait for process to end
                    proc.waitFor();
                    
                    // any error???
                    //rvalue = true;
                    
                    File java = new File( javaFile );
                    File clas = new File( classFile );
                    
                    if( java.exists()) {
                        java.delete();
                    }
                    if( clas.exists()) {
                        clas.delete();
                    }
                    
                } catch (Throwable t) {
                    t.printStackTrace();
                    //rvalue = false;
                }
                
            }
            
            
        } // for
        
        
        printMessage( "Done compiling all files" );
        
    }
    
    
    private String getClassPath() {
        
        String rvalue = new String( "\"");
        final String jarPath = "ext";
        final String classesPath = "classes";
        final String jspPath = "jsp";
        final String libPath = "lib";
        
        String[] extensionNames = { ".jar"};
        
        // get <DevCentre home dir>/ext/*.jar
        String libList[] =  new File( archiverBaseDir + jarPath ).list( new filter( extensionNames ) );
        
        for( int i = 0 ; i < libList.length ; i++ ) {
            rvalue += archiverBaseDir + jarPath + '\\' + libList[i] + ';';
        }
        
        // get <project home dir>/lib/*.jar
        libList =  new File( buildDirectory + '\\' + libPath ).list( new filter( extensionNames ) );
        
        for( int i = 0 ; i < libList.length ; i++ ) {
            rvalue += buildDirectory + '\\' + libPath + '\\' + libList[i] + ';';
        }
        
        rvalue += buildDirectory + '\\' + classesPath + ';';
        rvalue += buildDirectory + '\\' + jspPath;
        
        // additional mounted Jar to classpath
        
        String[] jars = getAddedJarToClassPath();
        if( jars.length > 0 ) {
            for( int i = 0 ; i < jars.length ; i++ ) {
                if( jars[i] != null ) {
                    rvalue += ';' + jars[i];
                }
            }
        }
        
        rvalue += "\" ";
        
        return rvalue;
    }
    
    public String getArchiverBaseDir() {
        
        String rvalue = new String( new File( dummyFile ).getAbsolutePath() );
        
        return rvalue.substring( 0, rvalue.indexOf( dummyFile) );
        
    }
    
    public boolean compileFile() {
        
        boolean rvalue = false;
        
        JInternalFrame selectedFrame = codeDesktopPane.getSelectedFrame();
        String className = selectedFrame.getClass().toString();
        String targetFile = new String();
        String classPath = new String();
        String targetVersion = readJvmSetting();
        
        if( className.endsWith( "sourceJAVAEditorIF" ) ) {
            targetFile = ( (sourceJAVAEditorIF ) selectedFrame ).getFileSource();
            classPath = getClassPath();
            
            try {
                //String osName = System.getProperty("os.name" );
                String[] cmd = new String[3];
                                
                String commandLine = getJavaHomeDir() + "\\bin\\javac -deprecation -classpath " + classPath + " \"" + targetFile + "\" " +
                ( targetVersion.equalsIgnoreCase( "default" ) ? "" :  " -target "+targetVersion );
                
                cmd[0] = "cmd.exe" ;
                cmd[1] = "/C" ;
                cmd[2] = commandLine;
                
                Runtime rt = Runtime.getRuntime();
                printMessage( cmd[2] );
                Process proc = rt.exec(cmd);
                // any error message?
                StreamGobbler errorGobbler = new StreamGobbler(proc.getErrorStream(), "ERROR", this );
                
                // any output?
                StreamGobbler outputGobbler = new StreamGobbler(proc.getInputStream(), "OUTPUT", this );
                
                // kick them off
                errorGobbler.start();
                outputGobbler.start();
                
                //wait for process to end
                proc.waitFor();
                
                // any error???
                rvalue = true;
                
            } catch (Throwable t) {
                t.printStackTrace();
                rvalue = false;
            }
            
        } else if( className.endsWith( "sourceJSPEditorIF" ) ) {
            
            classPath = getClassPath();
            targetFile = ( (sourceJSPEditorIF ) selectedFrame ).getFileSource();
            
            String generatedFile = createJspcXml( targetFile );
            
            try {
                //String osName = System.getProperty("os.name" );
                String[] cmd = new String[3];
                                
                createCompileJspBatchFile();
                
                cmd[0] = "cmd.exe" ;
                cmd[1] = "/C" ;
                cmd[2] = compilejspbatch;
                
                Runtime rt = Runtime.getRuntime();
                printMessage( cmd[2] );
                Process proc = rt.exec(cmd);
                // any error message?
                StreamGobbler errorGobbler = new StreamGobbler(proc.getErrorStream(), "ERROR", this );
                
                // any output?
                StreamGobbler outputGobbler = new StreamGobbler(proc.getInputStream(), "OUTPUT", this );
                
                // kick them off
                errorGobbler.start();
                outputGobbler.start();
                
                // wait til done before proceding with compiling genrated java file
                proc.waitFor();
                
                // compile JSPC generated java file
                try {
                    printMessage( "Compiling generated java file" );
                    //String osName = System.getProperty("os.name" );
                    cmd = new String[3];
                                        
                    String commandLine = getJavaHomeDir() + "\\bin\\javac -deprecation -classpath " + classPath + " \"" + generatedFile + "\" " +
                    ( targetVersion.equalsIgnoreCase( "default" ) ? "" :  " -target "+targetVersion );;
                    
                    cmd[0] = "cmd.exe" ;
                    cmd[1] = "/C" ;
                    cmd[2] = commandLine;
                    
                    rt = Runtime.getRuntime();
                    printMessage( cmd[2] );
                    proc = rt.exec(cmd);
                    // any error message?
                    errorGobbler = new StreamGobbler(proc.getErrorStream(), "ERROR", this );
                    
                    // any output?
                    outputGobbler = new StreamGobbler(proc.getInputStream(), "OUTPUT", this );
                    
                    // kick them off
                    errorGobbler.start();
                    outputGobbler.start();
                    
                    //wait for process to end
                    proc.waitFor();
                    
                    // any error???
                    rvalue = true;
                    
                    
                } catch (Throwable t) {
                    t.printStackTrace();
                    rvalue = false;
                }
                
                
                // any error???
                rvalue = true;
                
                
            } catch (Throwable t) {
                t.printStackTrace();
                rvalue = false;
            }
            
            
        } else if( className.endsWith( "sourceJWSEditorIF" ) ) {
            
            targetFile = ( (sourceJWSEditorIF ) selectedFrame ).getFileSource();
            String javaFile = getBuildDirectory() + "\\workarea" + targetFile.substring( targetFile.lastIndexOf( '\\' ) );
            javaFile = javaFile.substring( 0, javaFile.lastIndexOf( '.' ) ) + ".java";
            
            //String javaFile = targetFile.substring( 0, targetFile.lastIndexOf( '.' ) ) + ".java";
            //String classFile = targetFile.substring( 0, targetFile.lastIndexOf( '.' ) ) + ".class";
            
            printMessage( javaFile );
            
            copyFile( '\"' + targetFile + '\"', '\"' + javaFile + '\"' );
            
            classPath = getClassPath();
            
            try {
                //String osName = System.getProperty("os.name" );
                String[] cmd = new String[3];
                                
                String commandLine = getJavaHomeDir() + "\\bin\\javac -deprecation -classpath " + classPath + " \"" + javaFile + "\" " +
                ( targetVersion.equalsIgnoreCase( "default" ) ? "" :  " -target "+targetVersion );
                
                cmd[0] = "cmd.exe" ;
                cmd[1] = "/C" ;
                cmd[2] = commandLine;
                
                Runtime rt = Runtime.getRuntime();
                printMessage( cmd[2] );
                Process proc = rt.exec(cmd);
                // any error message?
                StreamGobbler errorGobbler = new StreamGobbler(proc.getErrorStream(), "ERROR", this );
                
                // any output?
                StreamGobbler outputGobbler = new StreamGobbler(proc.getInputStream(), "OUTPUT", this );
                
                // kick them off
                errorGobbler.start();
                outputGobbler.start();
                
                //wait for process to end
                proc.waitFor();
                
                // any error???
                rvalue = true;
                
                File java = new File( javaFile );
                //File clas = new File( classFile );
                
                if( java.exists()) {
                    java.delete();
                }
                //if( clas.exists()) {
                //    clas.delete();
                //}
                
            } catch (Throwable t) {
                t.printStackTrace();
                rvalue = false;
            }
            
        } else {
            printMessage( "Not in options to compile" );
        }
        
        printMessage( "Done compiling" );
        return rvalue;
    }
    
    
    public boolean compileFilePopUp( String srcFile) {
        
        boolean rvalue = false;
        
        String targetFile = srcFile;
        String classPath = new String();
        String targetVersion = readJvmSetting();
        
        if( targetFile.toLowerCase().endsWith( ".java" ) ) {
            
            classPath = getClassPath();
            
            try {
                //String osName = System.getProperty("os.name" );
                String[] cmd = new String[3];
                                
                String commandLine = getJavaHomeDir() + "\\bin\\javac -deprecation -classpath " + classPath + " \"" + targetFile + "\" " +
                ( targetVersion.equalsIgnoreCase( "default" ) ? "" :  " -target "+targetVersion );
                
                cmd[0] = "cmd.exe" ;
                cmd[1] = "/C" ;
                cmd[2] = commandLine;
                
                Runtime rt = Runtime.getRuntime();
                printMessage( cmd[2] );
                Process proc = rt.exec(cmd);
                // any error message?
                StreamGobbler errorGobbler = new StreamGobbler(proc.getErrorStream(), "ERROR", this );
                
                // any output?
                StreamGobbler outputGobbler = new StreamGobbler(proc.getInputStream(), "OUTPUT", this );
                
                // kick them off
                errorGobbler.start();
                outputGobbler.start();
                
                //wait for process to end
                proc.waitFor();
                
                // any error???
                rvalue = true;
                
            } catch (Throwable t) {
                t.printStackTrace();
                rvalue = false;
            }
            
        } else if( targetFile.toLowerCase().endsWith( ".jsp" ) ) {
            
            classPath = getClassPath();
            targetFile = srcFile;
            
            String generatedFile = createJspcXml( targetFile );
            
            try {
                //String osName = System.getProperty("os.name" );
                String[] cmd = new String[3];
                                
                createCompileJspBatchFile();
                
                cmd[0] = "cmd.exe" ;
                cmd[1] = "/C" ;
                cmd[2] = compilejspbatch;
                
                
                Runtime rt = Runtime.getRuntime();
                printMessage( cmd[2] );
                Process proc = rt.exec(cmd);
                // any error message?
                StreamGobbler errorGobbler = new StreamGobbler(proc.getErrorStream(), "ERROR", this );
                
                // any output?
                StreamGobbler outputGobbler = new StreamGobbler(proc.getInputStream(), "OUTPUT", this );
                
                // kick them off
                errorGobbler.start();
                outputGobbler.start();
                
                // wait til done before proceding with compiling genrated java file
                proc.waitFor();
                
                // any error???
                rvalue = true;
                
                
            } catch (Throwable t) {
                t.printStackTrace();
                rvalue = false;
            }
            
            // compile JSPC generated java file
            try {
                printMessage( "Compiling generated java file" );
                //String osName = System.getProperty("os.name" );
                String[] cmd = new String[3];
                                
                String commandLine = getJavaHomeDir() + "\\bin\\javac -deprecation -classpath " + classPath + " \"" + generatedFile + "\" " +
                ( targetVersion.equalsIgnoreCase( "default" ) ? "" :  " -target "+targetVersion );;
                
                cmd[0] = "cmd.exe" ;
                cmd[1] = "/C" ;
                cmd[2] = commandLine;
                
                Runtime rt = Runtime.getRuntime();
                printMessage( cmd[2] );
                Process proc = rt.exec(cmd);
                // any error message?
                StreamGobbler errorGobbler = new StreamGobbler(proc.getErrorStream(), "ERROR", this );
                
                // any output?
                StreamGobbler outputGobbler = new StreamGobbler(proc.getInputStream(), "OUTPUT", this );
                
                // kick them off
                errorGobbler.start();
                outputGobbler.start();
                
                //wait for process to end
                proc.waitFor();
                
                // any error???
                rvalue = true;
                
                
            } catch (Throwable t) {
                t.printStackTrace();
                rvalue = false;
            }
            
        } else if( targetFile.toLowerCase().endsWith( ".jws" ) ) {
            
            String javaFile = getBuildDirectory() + "\\workarea" + targetFile.substring( targetFile.lastIndexOf( '\\' ) );
            javaFile = javaFile.substring( 0, javaFile.lastIndexOf( '.' ) ) + ".java";
            
            //String javaFile = targetFile.substring( 0, targetFile.lastIndexOf( '.' ) ) + ".java";
            //String classFile = targetFile.substring( 0, targetFile.lastIndexOf( '.' ) ) + ".class";
            
            copyFile( '\"' + targetFile + '\"', '\"' + javaFile + '\"' );
            
            
            classPath = getClassPath();
            
            try {
                
                //String osName = System.getProperty("os.name" );
                String[] cmd = new String[3];
                                
                String commandLine = getJavaHomeDir() + "\\bin\\javac -deprecation -classpath " + classPath + " \"" + javaFile + "\" " +
                ( targetVersion.equalsIgnoreCase( "default" ) ? "" :  " -target "+targetVersion );
                
                
                cmd[0] = "cmd.exe" ;
                cmd[1] = "/C" ;
                cmd[2] = commandLine;
                
                Runtime rt = Runtime.getRuntime();
                printMessage( cmd[2] );
                Process proc = rt.exec(cmd);
                // any error message?
                StreamGobbler errorGobbler = new StreamGobbler(proc.getErrorStream(), "ERROR", this );
                
                // any output?
                StreamGobbler outputGobbler = new StreamGobbler(proc.getInputStream(), "OUTPUT", this );
                
                // kick them off
                errorGobbler.start();
                outputGobbler.start();
                
                //wait for process to end
                proc.waitFor();
                
                // any error???
                rvalue = true;
                
            } catch (Throwable t) {
                t.printStackTrace();
                rvalue = false;
            }
            
        } else {
            printMessage( "Not in options to compile" );
        }
        
        printMessage( "Done compiling" );
        return rvalue;
    }
    
    
    public String readFile( String fileSource) {
        
        String rvalue = new String();
        String s = new String();
        DataInputStream in;
        
        try {
            in = new DataInputStream( new BufferedInputStream( new FileInputStream( fileSource ) ) );
            try {
                while( (s = in.readLine())!= null ) {
                    rvalue += s + '\n';
                }
                
                try {
                    in.close();
                } catch( IOException exc ){
                    printMessage( exc.toString());
                }
            } catch( IOException exc ){
                printMessage( exc.toString());
            }
        } catch( IOException exc ) {
            printMessage( exc.toString());
        }
        
        return rvalue;
        
    }
    
    
    public void viewObject() {
        
        String selectedFile = treePanel.getCurrentPath(); // file from tree
        
        if( new File( selectedFile ).isFile() ) {
            
            if( selectedFile.toUpperCase().endsWith( ".GIF" ) ||
            selectedFile.toUpperCase().endsWith( ".JPG" )  ||
            selectedFile.toUpperCase().endsWith( ".JPEG" ) ) {
                printMessage( "Viewing graphic file " + selectedFile  );
                viewGraphic( selectedFile );
            } else {
                printMessage( "No available viewer for this file type " + selectedFile  );
            }
        }
    }
    
    public void viewGraphic( String otherFile ) {
        
        sourceGraphicsViewerIF mvc = new sourceGraphicsViewerIF( this, otherFile );
        mvc.setLocation( windowXPos += 10, windowYPos += 10 );
        if( windowXPos > 40 ) {
            windowXPos = 0;
            windowYPos = 0;
        }
        this.codeDesktopPane.add( mvc );
        mvc.show();
        mvc.toFront();
        
        try {
            mvc.setSelected( true );
        } catch( java.beans.PropertyVetoException pve ) {
            printMessage( pve.toString() );
        }
    }
    
    public void editSourceCode( String selectedFile ) {
        
        //String selectedFile = treePanel.getCurrentPath(); // file from tree
        
        if( new File( selectedFile ).isFile() ) {
            
            if( selectedFile.endsWith( "\\metadata\\web.xml" ) ) {
                if( !isFrameOpen( selectedFile ) ) {
                    openWebXml();
                }
            } else if( selectedFile.endsWith( "\\classes\\controller.properties" ) ) {
                if( !isFrameOpen( selectedFile ) ) {
                    openControllerSetting();
                }
            } else if( selectedFile.endsWith( "\\classes\\controllerActionMap.properties" ) ) {
                if( !isFrameOpen( selectedFile ) ) {
                    openControllerActionMap();
                }
            } else if( selectedFile.endsWith( "\\classes\\dbConnectionPool.properties" ) ) {
                if( !isFrameOpen( selectedFile ) ) {
                    openDBConnectionPoolSetting();
                }
            } else if( selectedFile.toUpperCase().endsWith( ".JSP" ) ) {
                if( !isFrameOpen( selectedFile ) ) {
                    editJSPSourceCode( selectedFile );
                }
            } else if( selectedFile.toUpperCase().endsWith( ".JAVA" ) ) {
                if( !isFrameOpen( selectedFile ) ) {
                    editJAVASourceCode( selectedFile );
                }
            } else if( selectedFile.toUpperCase().endsWith( ".JWS" ) ) {
                if( !isFrameOpen( selectedFile ) ) {
                    editJWSSourceCode( selectedFile );
                }
            } else if( selectedFile.toUpperCase().endsWith( ".HTML" ) || selectedFile.toUpperCase().endsWith( ".HTM" )) {
                if( !isFrameOpen( selectedFile ) ) {
                    editHTMLSourceCode( selectedFile );
                }
            } else if( selectedFile.toUpperCase().endsWith( ".DWT" ) ) {
                if( !isFrameOpen( selectedFile ) ) {
                    editHTMLTemplateSourceCode( selectedFile );
                }
            } else if( selectedFile.toUpperCase().endsWith( ".TXT" ) ||
            selectedFile.toUpperCase().endsWith( ".JS" )  ||
            selectedFile.toUpperCase().endsWith( ".XML" )  ||
            selectedFile.toUpperCase().endsWith( ".MF" )  ||
            selectedFile.toUpperCase().endsWith( ".CSS" ) ||
            selectedFile.toUpperCase().endsWith( ".PROPERTIES" ) ) {
                if( !isFrameOpen( selectedFile ) ) {
                    editOtherSourceCode( selectedFile );
                }
            } else if( selectedFile.toUpperCase().endsWith( ".GIF" ) ||
            selectedFile.toUpperCase().endsWith( ".JPG" )  ||
            selectedFile.toUpperCase().endsWith( ".JPEG" ) ) {
                if( !isFrameOpen( selectedFile ) ) {
                    viewGraphic( selectedFile );
                }
            } else {
                printMessage( "No available editor for this file type " + selectedFile  );
            }
        }
        
    }
    
    public void editOtherSourceCode( String otherFile ) {
        
        sourceOtherEditorIF mvc = new sourceOtherEditorIF( this, otherFile );
        mvc.setLocation( windowXPos += 10, windowYPos += 10 );
        if( windowXPos > 40 ) {
            windowXPos = 0;
            windowYPos = 0;
        }
        this.codeDesktopPane.add( mvc );
        mvc.show();
        mvc.toFront();
        
        try {
            mvc.setSelected( true );
        } catch( java.beans.PropertyVetoException pve ) {
            printMessage( pve.toString() );
        }
    }
    
    public void editHTMLSourceCode( String htmlFile ) {
        
        sourceHTMLEditorIF mvc = new sourceHTMLEditorIF( this, htmlFile );
        mvc.setLocation( windowXPos += 10, windowYPos += 10 );
        if( windowXPos > 40 ) {
            windowXPos = 0;
            windowYPos = 0;
        }
        this.codeDesktopPane.add( mvc );
        mvc.show();
        mvc.toFront();
        
        try {
            mvc.setSelected( true );
        } catch( java.beans.PropertyVetoException pve ) {
            printMessage( pve.toString() );
        }
    }
    
    public void editHTMLTemplateSourceCode( String htmlFile ) {
        
        sourceHTMLTemplateEditorIF mvc = new sourceHTMLTemplateEditorIF( this, htmlFile );
        mvc.setLocation( windowXPos += 10, windowYPos += 10 );
        if( windowXPos > 40 ) {
            windowXPos = 0;
            windowYPos = 0;
        }
        this.codeDesktopPane.add( mvc );
        mvc.show();
        mvc.toFront();
        
        try {
            mvc.setSelected( true );
        } catch( java.beans.PropertyVetoException pve ) {
            printMessage( pve.toString() );
        }
    }
    
    public void editJAVASourceCode( String javaFile ) {
        
        sourceJAVAEditorIF mvc = new sourceJAVAEditorIF( this, javaFile );
        mvc.setLocation( windowXPos += 10, windowYPos += 10 );
        if( windowXPos > 40 ) {
            windowXPos = 0;
            windowYPos = 0;
        }
        this.codeDesktopPane.add( mvc );
        mvc.show();
        mvc.toFront();
        
        try {
            mvc.setSelected( true );
        } catch( java.beans.PropertyVetoException pve ) {
            printMessage( pve.toString() );
        }
    }
    
    
    public void editJWSSourceCode( String javaFile ) {
        
        sourceJWSEditorIF mvc = new sourceJWSEditorIF( this, javaFile );
        mvc.setLocation( windowXPos += 10, windowYPos += 10 );
        if( windowXPos > 40 ) {
            windowXPos = 0;
            windowYPos = 0;
        }
        this.codeDesktopPane.add( mvc );
        mvc.show();
        mvc.toFront();
        
        try {
            mvc.setSelected( true );
        } catch( java.beans.PropertyVetoException pve ) {
            printMessage( pve.toString() );
        }
    }
    
    
    public void editJSPSourceCode( String jspFile ) {
        
        sourceJSPEditorIF mvc = new sourceJSPEditorIF( this, jspFile );
        mvc.setLocation( windowXPos += 10, windowYPos += 10 );
        if( windowXPos > 40 ) {
            windowXPos = 0;
            windowYPos = 0;
        }
        this.codeDesktopPane.add( mvc );
        mvc.show();
        mvc.toFront();
        
        try {
            mvc.setSelected( true );
        } catch( java.beans.PropertyVetoException pve ) {
            printMessage( pve.toString() );
        }
    }
    
    public void saveAllButtonAction() {
        
        JInternalFrame[] jif = codeDesktopPane.getAllFrames();
        String className = new String();
        
        for( int i = 0 ; i < jif.length ; i++ ) {
            
            className = jif[i].getClass().toString();
            
            if( className.endsWith( "mvcController" ) ) {
                String file = ( (mvcController ) jif[i] ).getFileSource();
                String code = ( (mvcController ) jif[i] ).getText();
                if( !saveCodeToFile( code, file ) ) {
                    printMessage( "Error saving file to " + file );
                } else {
                    printMessage( "Done saving file to " + file );
                }
            } else if( className.endsWith( "mvcWappDescriptor" ) ) {
                String file = ( (mvcWappDescriptor ) jif[i] ).getFileSource();
                String code = ( (mvcWappDescriptor ) jif[i] ).getText();
                if( !saveCodeToFile( code, file ) ) {
                    printMessage( "Error saving file to " + file );
                } else {
                    printMessage( "Done saving file to " + file );
                }
            } else if( className.endsWith( "mvcControllerSettingIF" ) ) {
                String file = ( (mvcControllerSettingIF ) jif[i] ).getFileSource();
                String code = ( (mvcControllerSettingIF ) jif[i] ).getText();
                if( !saveCodeToFile( code, file ) ) {
                    printMessage( "Error saving file to " + file );
                }
                else {
                    printMessage( "Done saving file to " + file );
                }
            } else if( className.endsWith( "mvcDBConnectionPoolIF" ) ) {
                String file = ( (mvcDBConnectionPoolIF ) jif[i] ).getFileSource();
                String code = ( (mvcDBConnectionPoolIF ) jif[i] ).getText();
                if( !saveCodeToFile( code, file ) ) {
                    printMessage( "Error saving file to " + file );
                }
                else {
                    printMessage( "Done saving file to " + file );
                }
            } else if( className.endsWith( "sourceJSPEditorIF" ) ) {
                String file = ( (sourceJSPEditorIF ) jif[i] ).getFileSource();
                String code = ( (sourceJSPEditorIF ) jif[i] ).getText();
                if( !saveCodeToFile( code, file ) ) {
                    printMessage( "Error saving file to " + file );
                }
                else {
                    printMessage( "Done saving file to " + file );
                }
            } else if( className.endsWith( "sourceJAVAEditorIF" ) ) {
                String file = ( (sourceJAVAEditorIF ) jif[i] ).getFileSource();
                String code = ( (sourceJAVAEditorIF ) jif[i] ).getText();
                if( !saveCodeToFile( code, file ) ) {
                    printMessage( "Error saving file to " + file );
                } else {
                    printMessage( "Done saving file to " + file );
                }
            } else if( className.endsWith( "sourceJWSEditorIF" ) ) {
                String file = ( (sourceJWSEditorIF ) jif[i] ).getFileSource();
                String code = ( (sourceJWSEditorIF ) jif[i] ).getText();
                if( !saveCodeToFile( code, file ) ) {
                    printMessage( "Error saving file to " + file );
                } else {
                    printMessage( "Done saving file to " + file );
                }
            } else if( className.endsWith( "sourceHTMLEditorIF" ) ) {
                String file = ( (sourceHTMLEditorIF ) jif[i] ).getFileSource();
                String code = ( (sourceHTMLEditorIF ) jif[i] ).getText();
                if( !saveCodeToFile( code, file ) ) {
                    printMessage( "Error saving file to " + file );
                } else {
                    printMessage( "Done saving file to " + file );
                }
            } else if( className.endsWith( "sourceHTMLTemplateEditorIF" ) ) {
                String file = ( (sourceHTMLTemplateEditorIF ) jif[i] ).getFileSource();
                String code = ( (sourceHTMLTemplateEditorIF ) jif[i] ).getText();
                if( !saveCodeToFile( code, file ) ) {
                    printMessage( "Error saving file to " + file );
                } else {
                    printMessage( "Done saving file to " + file );
                }
            } else if( className.endsWith( "sourceOtherEditorIF" ) ) {
                String file = ( (sourceOtherEditorIF ) jif[i] ).getFileSource();
                String code = ( (sourceOtherEditorIF ) jif[i] ).getText();
                if( !saveCodeToFile( code, file ) ) {
                    printMessage( "Error saving file to " + file );
                } else {
                    printMessage( "Done saving file to " + file );
                }
            } else if( className.endsWith( "mvcAntBuilder" ) ) {
                String file = ( (mvcAntBuilder ) jif[i] ).getFileSource();
                String code = ( (mvcAntBuilder ) jif[i] ).getText();
                if( !saveCodeToFile( code, file ) ) {
                    printMessage( "Error saving file to " + file );
                } else {
                    printMessage( "Done saving file to " + file );
                }
            } else {
                printMessage( "Not in options to save selected file type" );
            }
            
        } // for
        
        archiveName archive = new archiveName( getBuildDirectory() + '/' + "build.xml" );
        warFileName = archive.getArchiveName();
        setWarFileName( warFileName );
        
    }
    
    
    public void saveButtonAction() {
        
        JInternalFrame[] jif = codeDesktopPane.getAllFrames();
        
        if( jif.length < 1 ) {
            return; // nothing to save
        }
        
        String className = codeDesktopPane.getSelectedFrame().getClass().toString();
        
        if( className.endsWith( "mvcController" ) ) {
            String file = ( (mvcController ) codeDesktopPane.getSelectedFrame() ).getFileSource();
            String code = ( (mvcController ) codeDesktopPane.getSelectedFrame() ).getText();
            if( !saveCodeToFile( code, file ) ) {
                printMessage( "Error saving file to " + file );
            } else {
                printMessage( "Done saving file to " + file );
            }
        } else if( className.endsWith( "mvcWappDescriptor" ) ) {
            String file = ( (mvcWappDescriptor ) codeDesktopPane.getSelectedFrame() ).getFileSource();
            String code = ( (mvcWappDescriptor ) codeDesktopPane.getSelectedFrame() ).getText();
            if( !saveCodeToFile( code, file ) ) {
                printMessage( "Error saving file to " + file );
            } else {
                printMessage( "Done saving file to " + file );
            }
        } else if( className.endsWith( "mvcControllerSettingIF" ) ) {
            String file = ( (mvcControllerSettingIF ) codeDesktopPane.getSelectedFrame() ).getFileSource();
            String code = ( (mvcControllerSettingIF ) codeDesktopPane.getSelectedFrame() ).getText();
            if( !saveCodeToFile( code, file ) ) {
                printMessage( "Error saving file to " + file );
            } else {
                printMessage( "Done saving file to " + file );
            }
        } else if( className.endsWith( "mvcDBConnectionPoolIF" ) ) {
            String file = ( (mvcDBConnectionPoolIF ) codeDesktopPane.getSelectedFrame() ).getFileSource();
            String code = ( (mvcDBConnectionPoolIF ) codeDesktopPane.getSelectedFrame() ).getText();
            if( !saveCodeToFile( code, file ) ) {
                printMessage( "Error saving file to " + file );
            } else {
                printMessage( "Done saving file to " + file );
            }
        } else if( className.endsWith( "sourceJSPEditorIF" ) ) {
            String file = ( (sourceJSPEditorIF ) codeDesktopPane.getSelectedFrame() ).getFileSource();
            String code = ( (sourceJSPEditorIF ) codeDesktopPane.getSelectedFrame() ).getText();
            if( !saveCodeToFile( code, file ) ) {
                printMessage( "Error saving file to " + file );
            } else {
                printMessage( "Done saving file to " + file );
            }
        } else if( className.endsWith( "sourceJAVAEditorIF" ) ) {
            String file = ( (sourceJAVAEditorIF ) codeDesktopPane.getSelectedFrame() ).getFileSource();
            String code = ( (sourceJAVAEditorIF ) codeDesktopPane.getSelectedFrame() ).getText();
            if( !saveCodeToFile( code, file ) ) {
                printMessage( "Error saving file to " + file );
            } else {
                printMessage( "Done saving file to " + file );
            }
        } else if( className.endsWith( "sourceJWSEditorIF" ) ) {
            String file = ( (sourceJWSEditorIF ) codeDesktopPane.getSelectedFrame() ).getFileSource();
            String code = ( (sourceJWSEditorIF ) codeDesktopPane.getSelectedFrame() ).getText();
            if( !saveCodeToFile( code, file ) ) {
                printMessage( "Error saving file to " + file );
            } else {
                printMessage( "Done saving file to " + file );
            }
        } else if( className.endsWith( "sourceHTMLEditorIF" ) ) {
            String file = ( (sourceHTMLEditorIF ) codeDesktopPane.getSelectedFrame() ).getFileSource();
            String code = ( (sourceHTMLEditorIF ) codeDesktopPane.getSelectedFrame() ).getText();
            if( !saveCodeToFile( code, file ) ) {
                printMessage( "Error saving file to " + file );
            } else {
                printMessage( "Done saving file to " + file );
            }
        } else if( className.endsWith( "sourceHTMLTemplateEditorIF" ) ) {
            String file = ( (sourceHTMLTemplateEditorIF ) codeDesktopPane.getSelectedFrame() ).getFileSource();
            String code = ( (sourceHTMLTemplateEditorIF ) codeDesktopPane.getSelectedFrame() ).getText();
            if( !saveCodeToFile( code, file ) ) {
                printMessage( "Error saving file to " + file );
            } else {
                printMessage( "Done saving file to " + file );
            }
        } else if( className.endsWith( "sourceOtherEditorIF" ) ) {
            String file = ( (sourceOtherEditorIF ) codeDesktopPane.getSelectedFrame() ).getFileSource();
            String code = ( (sourceOtherEditorIF ) codeDesktopPane.getSelectedFrame() ).getText();
            if( !saveCodeToFile( code, file ) ) {
                printMessage( "Error saving file to " + file );
            } else {
                printMessage( "Done saving file to " + file );
            }
        } else if( className.endsWith( "mvcAntBuilder" ) ) {
            String file = ( (mvcAntBuilder ) codeDesktopPane.getSelectedFrame() ).getFileSource();
            String code = ( (mvcAntBuilder ) codeDesktopPane.getSelectedFrame() ).getText();
            if( !saveCodeToFile( code, file ) ) {
                printMessage( "Error saving file to " + file );
            } else {
                printMessage( "Done saving file to " + file );
            }
        } else if( className.endsWith( "sourceServerResourceFactoryIF" ) ) {
            String file = ( (sourceServerResourceFactoryIF ) codeDesktopPane.getSelectedFrame() ).getFileSource();
            String code = ( (sourceServerResourceFactoryIF ) codeDesktopPane.getSelectedFrame() ).getCodeText();
            
            if( !saveCodeToFile( code, file ) ) {
                printMessage( "Error saving file to local " + file );
            } else {
                //printMessage( "Done saving file to local " + file );
                saveServerXmlYesNo ssxyn = new saveServerXmlYesNo( this, true );
                ssxyn.show();
            }
        } else {
            printMessage( "Not in options to save selected file type" );
        }
        
        archiveName archive = new archiveName( getBuildDirectory() + '/' + "build.xml" );
        warFileName = archive.getArchiveName();
        setWarFileName( warFileName );
    }
    
    
    public boolean saveServerResourceFactoryConfig( boolean save ) {
        
        boolean rvalue = true;
        String remotePath = getRemoteServerXmlPath();
        String serverXml = getBuildDirectory() + "\\" + serverResourceFactory;
        
        if( save ) {
            // send to server
            // backup config file
            remoteBackupServerResourceFactory rbsrf = new remoteBackupServerResourceFactory( this, true );
            rbsrf.show();
            
            printMessage( backupServerXmlResult );
            // upload config file
            if( backupServerXmlResult.toLowerCase().indexOf( "ok" ) != -1 ) {
                sendFile( serverXml, remotePath );
                File f = new File(  serverXml );
                if( f.exists() ) {
                    f.delete();
                }
            } else {
                printMessage( "Error: Server Resource Factory config file was not uploaded." );
            }
            
        } else {
            // remove local file
            File f = new File(  serverXml );
            if( f.exists() ) {
                f.delete();
            }
        }
        
        return rvalue;
    }
    
    public void openDBConnectionPoolSetting() {
        
        mvcDBConnectionPoolIF mvc = new mvcDBConnectionPoolIF( this );
        mvc.setLocation( windowXPos += 10, windowYPos += 10 );
        if( windowXPos > 40 ) {
            windowXPos = 0;
            windowYPos = 0;
        }
        this.codeDesktopPane.add( mvc );
        mvc.show();
        mvc.toFront();
        
        try {
            mvc.setSelected( true );
        } catch( java.beans.PropertyVetoException pve ) {
            printMessage( pve.toString() );
        }
    }
    
    
    public void openControllerSetting() {
        
        mvcControllerSettingIF mvc = new mvcControllerSettingIF( this );
        mvc.setLocation( windowXPos += 10, windowYPos += 10 );
        if( windowXPos > 40 ) {
            windowXPos = 0;
            windowYPos = 0;
        }
        this.codeDesktopPane.add( mvc );
        mvc.show();
        mvc.toFront();
        
        try {
            mvc.setSelected( true );
        } catch( java.beans.PropertyVetoException pve ) {
            printMessage( pve.toString() );
        }
    }
    
    
    public void openWebXml() {
        
        String selectedFile = getBuildDirectory() + "\\metadata\\web.xml";
        mvcWappDescriptor mvc = new mvcWappDescriptor( this, selectedFile );
        mvc.setLocation( windowXPos += 10, windowYPos += 10 );
        if( windowXPos > 40 ) {
            windowXPos = 0;
            windowYPos = 0;
        }
        this.codeDesktopPane.add( mvc );
        mvc.show();
        mvc.toFront();
        
        try {
            mvc.setSelected( true );
        } catch( java.beans.PropertyVetoException pve ) {
            printMessage( pve.toString() );
        }
    }
    
    public void openControllerActionMap() {
        
        String selectedFile = getBuildDirectory() + "\\classes\\controllerActionMap.properties";
        mvcController mvc = new mvcController( this, selectedFile );
        mvc.setLocation( windowXPos += 10, windowYPos += 10 );
        if( windowXPos > 40 ) {
            windowXPos = 0;
            windowYPos = 0;
        }
        this.codeDesktopPane.add( mvc );
        mvc.show();
        mvc.toFront();
        
        try {
            mvc.setSelected( true );
        } catch( java.beans.PropertyVetoException pve ) {
            printMessage( pve.toString() );
        }
        
        
    }
    
    public void printMessage( String msg ) {
        
        String message = msg.trim();
        
        if( message.length() > 0 ) {
            
            if( message.indexOf( ">pscp" ) != -1 ) {
                //} else if( message.startsWith( "javac" ) ) {
            } else {
                buildmessage.append( message + "\n" );
                buildmessage.setCaretPosition( buildmessage.getText().length() );
            }
            
        }
        
    }
    
    
    protected void removeFiles(File d, String[] files) {
        
        if (files.length > 0) {
            
            for ( int i = 0 ; i < files.length ; i++ ) {
                
                File f = new File(d, files[i]);
                
                if ( !f.delete() ) {
                    printMessage( "Delete war file manually ... " );
                }
                
            }
            
        }
        
    }
    
    
    // return string of war file names from current directory
    private String[] warFiles() {
        
        String[] list = new String[0];
        
        try {
            File path = new File( buildDirectory );
            String[] extensionNames = { ".war" };
            list = path.list( new filter( extensionNames ) );
        } catch(Exception e) {
            e.printStackTrace();
        }
        
        return list;
        
    }
    
    
    // This class is a modified version of a sample
    // from Bruce Eckel's Thinking in Java
    public static class filter extends Object implements FilenameFilter {
        
        String[] afn;
        
        /** Creates new filter */
        public filter( String[] afn ) {
            
            this.afn = afn;
            
        }
        
        
        public boolean accept(File dir, String name) {
            
            boolean rvalue = false;
            
            String f = new File(name).getName();
            
            for( int i = 0 ; i < afn.length ; i++ ) {
                
                if( f.endsWith( afn[i] ) ) {
                    rvalue = true;
                    break;
                }
                
            }
            
            return rvalue;
        }
        
        
    }
    
    
    public void enableButtons( boolean b ) {
        
        createArchive.setEnabled(b);
        stopStart.setEnabled(b);
        reload.setEnabled( b );
        createArchive.setEnabled( b );
        sendArchive.setEnabled( b );
        sendFile.setEnabled( b );
        stop.setEnabled( b );
        unWAR.setEnabled( b );
        start.setEnabled( b );
        treePanel.enable( b );
        connectionSetting.setEnabled( b );
        jMenu2.setEnabled( b );
        jMenu3.setEnabled( b );
        jMenu4.setEnabled( b );
        jMenu7.setEnabled( b );
        jMenu8.setEnabled( b );
        saveButton.setEnabled( b );
        saveAllButton.setEnabled( b );
        compileButton.setEnabled( b );
        compileAllButton.setEnabled( b );
        undoButton.setEnabled( b );
        redoButton.setEnabled( b );
        findButton.setEnabled( b );
        addJarToClassPathMenuItem.setEnabled( b );
        copyJarMenuItem.setEnabled( b );
        connectionSettingMenuItem.setEnabled( b );
        searchProjectMenuItem.setEnabled( b );
        warTemplateProjectMenuItem.setEnabled( b );
        htmlTemplateProjectMenuItem.setEnabled( b );
        J2SDKHomeMenuItem.setEnabled( b );
        targetJVMMenuItem.setEnabled( b );
    }
    
    private boolean createUploadBatchFile( String targetFile, String commandLine ) {
        
        boolean rvalue = false;
        
        try {
            FileWriter fw = new FileWriter( targetFile, false);
            BufferedWriter br = new BufferedWriter(fw);
            PrintWriter pw = new PrintWriter(br);
            
            pw.println(commandLine);
            
            pw.close();
            br.close();
            fw.close();
            
        } catch (IOException io) {
            printMessage( "Error: create uploadbatch " + io.getMessage() );
        } catch (Exception e) {
            printMessage( "Error: create uploadbatch " + e.getMessage());
        }
        
        return rvalue;
    }
    
    public void setTreeRootDirectory( String rootdir ) {
        treePanel.setRootDir( rootdir );
    }
    
    public void clearTree() {
        treePanel.clear();
    }
    
    public void populateTree() {
        
        treePanel.initTree();
    }
    
    
    public void setBuildDirectory( String path ) {
        buildDirectory = path;
    }
    
    public String getTreeCurrentPath() {
        return treePanel.getCurrentPath();
    }
    
    public String getBuildDirectory() {
        return buildDirectory;
    }
    
    public void setWarFileName( String filename ) {
        warFileName = filename;
    }
    
    public String getWarFileName() {
        return warFileName;
    }
    
    public void setBatchDirectory( String path ) {
        batch = path;
    }
    
    public String getBatchDirectory() {
        return batch;
    }
    
    public boolean createArchive() {
        
        boolean rvalue = false;
        String[] antJars = getAntJars();
        
        String basePath = getArchiverBaseDir() + "ant\\lib\\";
        String projectPath = getBuildDirectory();
        String antHome = '\"' + getArchiverBaseDir() + "ant\"";
        
        String classPath = "";
        for( int i = 0 ; i < antJars.length ; i++ ) {
            if( i == 0 ) {
                classPath += basePath + antJars[i];
            } else {
                classPath += ';' + basePath + antJars[i];
            }
            
        }
        classPath = '\"' + classPath + '\"';
        
        String buildCmd = getJavaHomeDir() + "\\bin\\java -cp " + classPath + "  -Dant.home=" + antHome + " org.apache.tools.ant.Main -f " + '\"' + projectPath + "\\build.xml\"";
        
        //printMessage( buildCmd );
        
        //delete current archives
        printMessage( "Removing current web archives." );
        removeFiles( new File( buildDirectory ), warFiles() );
        
        // windows exec
        try {
            //String osName = System.getProperty("os.name" );
            String[] cmd = new String[3];
            
            //String commandLine = "ant -f \"" + buildDirectory + "\\build.xml\"";
            String commandLine = buildCmd;
            
            cmd[0] = "cmd.exe" ;
            cmd[1] = "/C" ;
            cmd[2] = commandLine;
            
            Runtime rt = Runtime.getRuntime();
            printMessage(cmd[2]);
            Process proc = rt.exec(cmd);
            // any error message?
            StreamGobbler errorGobbler = new StreamGobbler(proc.getErrorStream(), "ERROR", this );
            
            // any output?
            StreamGobbler outputGobbler = new StreamGobbler(proc.getInputStream(), "OUTPUT", this );
            
            // kick them off
            errorGobbler.start();
            outputGobbler.start();
            
            // any error???
            if( proc.waitFor() == 0) {
                printMessage( "Ant build done");
            } else {
                printMessage( "Error: Wab archive was not created");
            }
            
        } catch (Throwable t) {
            t.printStackTrace();
        }
        
        return rvalue;
    }
    
    
    //
    public void sendArchive() {
        
        // Add your handling code here:
        // Add your handling code here:
        
        boolean ok = true;
        
        clientSetting client = new clientSetting( buildDirectory.trim() + '/' + "client.properties" );
        if( client.exists() ) {
            
            if( client.readSetting() ) {
                
                SSHServer = client.getServerName();
                serverPort = client.getReloadPort();
                String userID = client.getSSHUserName();
                SSHPassword = client.getSSHPassword();
                remoteDirectory = client.getSSHRemoteDirectory();
                
                // -------------------------------
                
                String warFileName = getWarFileName();
                
                String pass = SSHPassword;
                
                String warPath = buildDirectory;
                
                String remotedir = remoteDirectory;
                
                File warFile;
                
                if( (warFileName.trim()).length() == 0 ) {
                    
                    ok = false;
                    printMessage( "Error: Please specify war file name..." );
                    return;
                    
                }
                
                if( !warPath.endsWith( System.getProperty( "file.separator" ) ) ) {
                    warPath += System.getProperty( "file.separator" );
                }
                
                warFile = new File( warPath );
                
                // Check if war file exists
                if ( warFile.exists() ) {
                    
                    printMessage( "Sending " + warFile.toString()+ '\\'+ warFileName + " to " + SSHServer);
                    
                    remotedir += '/' + warFileName;
                    
                    // windows exec
                    try {
                        //String osName = System.getProperty("os.name" );
                        String[] cmd = new String[3];
                        
                        String commandLine = "pscp -pw " + pass + " \"" + warPath + warFileName + "\" " + userID + '@' + SSHServer + ':' + remotedir;
                        
                        cmd[0] = "cmd.exe" ;
                        cmd[1] = "/C" ;
                        cmd[2] = batch;
                        
                        batch = cmd[2];
                        
                        createUploadBatchFile( cmd[2], commandLine );
                        
                        Runtime rt = Runtime.getRuntime();
                        Process proc = rt.exec(cmd);
                        // any error message?
                        StreamGobbler errorGobbler = new StreamGobbler(proc.getErrorStream(), "ERROR", this );
                        
                        // any output?
                        StreamGobbler outputGobbler = new StreamGobbler(proc.getInputStream(), "OUTPUT", this);
                        
                        // kick them off
                        errorGobbler.start();
                        outputGobbler.start();
                        
                        // any error???
                        if( proc.waitFor() == 0) {
                            printMessage( "Sending done");
                        } else {
                            printMessage( "Error: File not sent");
                        }
                        
                        
                    } catch (Throwable t) {
                        t.printStackTrace();
                    }
                    
                } else {
                    
                    printMessage( "Error " + warFile.toString() + " does not exist");
                    
                }
                
            } else {
                printMessage( "Error: Incomplete client setting.");
            }
            
        } else {
            buildmessage.setText( "Error: Server hostname or email address is missing." );
        }
        
        createUploadBatchFile( batch, "" ); // overwrite batch
        
        
    }
    
    //
    public void sendFile() {
        
        String basePath = buildDirectory;
        String selectedFile = treePanel.getCurrentPath();
        String archiveName = warFileName;
        archiveName = archiveName.substring( 0, archiveName.indexOf( '.' ) );
        
        String relativePath = new String();
        
        File codeFile;
        
        
        if( selectedFile.length() != 0 ) {
            
            codeFile = new File(selectedFile);
            
            if( codeFile.isFile() ) {
                
                relativePath = selectedFile.substring(  basePath.length() ).replace( '\\', '/');
                
                // determine is /metadata or /lib or /classes or /src
                String remotedir = new String();
                if( relativePath.toUpperCase().startsWith( "/SRC" ) ) {
                    relativePath = relativePath.substring( "/SRC".length(), relativePath.lastIndexOf( '/' ) );
                    remotedir = remoteDirectory + '/' + archiveName + relativePath;
                } else if( relativePath.toUpperCase().startsWith( "/METADATA/MANIFEST.MF" ) ) {
                    relativePath = "/META-INF/MANIFEST.MF";
                    remotedir = remoteDirectory + '/' + archiveName + relativePath;
                } else if( relativePath.toUpperCase().startsWith( "/METADATA/WEB.XML" ) ) {
                    relativePath = "/WEB-INF";
                    remotedir = remoteDirectory + '/' + archiveName + relativePath;
                } else if( relativePath.toUpperCase().startsWith( "/LIB" ) ) {
                    relativePath = "/WEB-INF" + relativePath.substring( 0, relativePath.lastIndexOf( '/' ) );
                    remotedir = remoteDirectory + '/' + archiveName + relativePath;
                } else if( relativePath.toUpperCase().startsWith( "/CLASSES" ) ) {
                    relativePath = "/WEB-INF" + relativePath.substring( 0, relativePath.lastIndexOf( '/' ) );
                    remotedir = remoteDirectory + '/' + archiveName + relativePath;
                } else {
                    
                }
                
                // Check if war file exists
                clientSetting client = new clientSetting( buildDirectory.trim() + '/' + "client.properties" );
                
                if( client.exists() ) {
                    
                    if( client.readSetting() ) {
                        
                        SSHServer = client.getServerName();
                        serverPort = client.getReloadPort();
                        String userID = client.getSSHUserName();
                        SSHPassword = client.getSSHPassword();
                        remoteDirectory = client.getSSHRemoteDirectory();
                        
                        if ( codeFile.exists() ) {
                            
                            printMessage( "Sending " + codeFile.toString() + " to " + SSHServer);
                            
                            // windows exec
                            try {
                                //String osName = System.getProperty("os.name" );
                                String[] cmd = new String[3];
                                                                
                                String commandLine = "pscp -pw " + SSHPassword + " \"" + selectedFile + "\" " + userID + '@' + SSHServer + ':' + remotedir;
                                
                                cmd[0] = "cmd.exe" ;
                                cmd[1] = "/C" ;
                                cmd[2] = batch;
                                
                                batch = cmd[2];
                                
                                createUploadBatchFile( cmd[2], commandLine );
                                
                                Runtime rt = Runtime.getRuntime();
                                Process proc = rt.exec(cmd);
                                // any error message?
                                StreamGobbler errorGobbler = new StreamGobbler(proc.getErrorStream(), "ERROR", this );
                                
                                // any output?
                                StreamGobbler outputGobbler = new StreamGobbler(proc.getInputStream(), "OUTPUT", this);
                                
                                // kick them off
                                errorGobbler.start();
                                outputGobbler.start();
                                
                                // any error???
                                if( proc.waitFor() == 0) {
                                    printMessage( "Sending done");
                                } else {
                                    printMessage( "Error: File not sent");
                                }
                                
                            } catch (Throwable t) {
                                t.printStackTrace();
                            }
                            
                        } else {
                            printMessage( "Error " + codeFile.toString() + " does not exist");
                        }
                        
                    }
                    
                } else {
                    printMessage( "Error " + codeFile.toString() + " does not exist");
                }
                
            } else {
                printMessage( codeFile.toString() + " is not allowed to be sent to server." );
            }
            
        }
        
        createUploadBatchFile( batch, "" ); // overwrite batch
        
    }
    
    
    //
    public void sendFile( String selectedFile, String remotedir ) {
        
        File codeFile;
        
        if( selectedFile.length() != 0 ) {
            
            codeFile = new File(selectedFile);
            
            if( codeFile.isFile() ) {
                
                // Check if war file exists
                clientSetting client = new clientSetting( buildDirectory.trim() + '/' + "client.properties" );
                
                if( client.exists() ) {
                    
                    if( client.readSetting() ) {
                        
                        SSHServer = client.getServerName();
                        serverPort = client.getReloadPort();
                        String userID = client.getSSHUserName();
                        SSHPassword = client.getSSHPassword();
                        remoteDirectory = client.getSSHRemoteDirectory();
                        
                        if ( codeFile.exists() ) {
                            
                            printMessage( "Sending " + codeFile.toString() + " to " + SSHServer);
                            
                            // windows exec
                            try {
                                //String osName = System.getProperty("os.name" );
                                String[] cmd = new String[3];
                                                                
                                String commandLine = "pscp -pw " + SSHPassword + " \"" + selectedFile + "\" " + userID + '@' + SSHServer + ':' + remotedir;
                                
                                cmd[0] = "cmd.exe" ;
                                cmd[1] = "/C" ;
                                cmd[2] = batch;
                                
                                batch = cmd[2];
                                
                                createUploadBatchFile( cmd[2], commandLine );
                                
                                Runtime rt = Runtime.getRuntime();
                                Process proc = rt.exec(cmd);
                                // any error message?
                                StreamGobbler errorGobbler = new StreamGobbler(proc.getErrorStream(), "ERROR", this );
                                
                                // any output?
                                StreamGobbler outputGobbler = new StreamGobbler(proc.getInputStream(), "OUTPUT", this);
                                
                                // kick them off
                                errorGobbler.start();
                                outputGobbler.start();
                                
                                // any error???
                                if( proc.waitFor() == 0) {
                                    printMessage( "Sending done");
                                } else {
                                    printMessage( "Error: File not sent");
                                }
                                
                            } catch (Throwable t) {
                                t.printStackTrace();
                            }
                            
                        } else {
                            printMessage( "Error " + codeFile.toString() + " does not exist");
                        }
                        
                    }
                    
                } else {
                    printMessage( "Error " + codeFile.toString() + " does not exist");
                }
                
            } else {
                printMessage( codeFile.toString() + " is not allowed to be sent to server." );
            }
            
        }
        
        createUploadBatchFile( batch, "" ); // overwrite batch
        
    }
    
    
    public boolean saveCodeToFile(  String code, String filename ) {
        
        boolean rvalue = false;
        
        try {
            FileWriter fw = new FileWriter( filename, false);
            BufferedWriter br = new BufferedWriter(fw);
            PrintWriter pw = new PrintWriter(br);
            
            pw.println( code );
            
            pw.close();
            br.close();
            fw.close();
            
            rvalue = true;
            
        } catch (IOException io) {
            printMessage( io.toString() );
        } catch (Exception e) {
            printMessage( e.toString() );
        }
        
        return rvalue;
    }
    
    
    public void setSaveFile( boolean b ) {
        saveFile = b;
    }
    
    public boolean getSaveFile() {
        return saveFile;
    }
    
    public void setTitle() {
        String frameTitle = "LikhaSoftware DevCentre 2003 - Demo";
        this.setTitle( frameTitle + " - " + buildDirectory ); // + " [" + warFileName + "] ");
    }
    
    public boolean deleteFile( String fileName) {
        
        boolean rvalue = false;
        
        String[] okToDelete =
        { getBuildDirectory()+ "\\metadata",
          getBuildDirectory()+ "\\classes",
          getBuildDirectory()+ "\\src",
          getBuildDirectory()+ "\\lib"
        };
        
        for( int i = 0 ; i < okToDelete.length ; i++ ) {
            
            if( fileName.startsWith( okToDelete[i] ) ) {
                if( new File( fileName ).delete() ) {
                    rvalue = true;
                    printMessage( "Deleted " + fileName );
                    
                    JInternalFrame[] jif = codeDesktopPane.getAllFrames();
                    String frameTitle = new String();
                    
                    for( int j = 0 ; j < jif.length ; j++ ) {
                        frameTitle = jif[j].getTitle();
                        if( frameTitle.indexOf( fileName ) != -1 ) {
                            jif[j].dispose();  // close Internal Frame
                        }
                    }
                    
                }
                break;
            }
            
        }
        
        return rvalue;
    }
    
    
    public boolean deleteDirectory( String selectedFile ) {
        
        boolean rvalue = false;
        
        // delete this directory
        Calendar today = Calendar.getInstance();
        String date = today.getTime().toString().replace( ' ', '-' ).replace( ':', '-' );
        String backUpDir = getBuildDirectory() + "\\workarea\\" + date;
        
        if( new File( selectedFile ).renameTo( new File( backUpDir ) ) ) {
            printMessage( selectedFile + " - Moved to - " + backUpDir );
        } else {
            printMessage( "Error deleting " + selectedFile );
        }
        
        return rvalue;
        
    }
    
    
    public boolean renameFile( String oldFile, String newFile ) {
        
        boolean rvalue = false;
        
        File previousFile = new File( oldFile );
        
        if( previousFile.renameTo( new File( newFile ) ) ) {
            rvalue = true;
        }
        
        return rvalue;
        
    }
    
    
    public String readJspTemplate( String fileSource ) {
        
        final String SYSTEMDATE = "<SYSTEMDATE>";
        String rvalue = new String();
        String s = new String();
        DataInputStream in;
        
        try {
            in = new DataInputStream( new BufferedInputStream( new FileInputStream( fileSource ) ) );
            try {
                while( (s = in.readLine())!= null ) {
                    if( s.indexOf( SYSTEMDATE ) != -1 ) {
                        s = s.substring( 0, s.indexOf( SYSTEMDATE ) ) + new Date().toString() +
                        s.substring( s.indexOf( SYSTEMDATE ) +  SYSTEMDATE.length() );
                    }
                    rvalue += s + '\n';
                }
                
                try {
                    in.close();
                } catch( IOException exc ){
                    printMessage( exc.toString());
                }
            } catch( IOException exc ){
                printMessage( exc.toString());
            }
        } catch( IOException exc ) {
            printMessage( exc.toString());
        }
        
        return rvalue;
        
    }
    
    
    public String readJwsTemplate( String fileSource, String className ) {
        
        final String CLASSNAME = "<CLASSNAME>";
        final String SYSTEMDATE = "<SYSTEMDATE>";
        String rvalue = new String();
        String s = new String();
        DataInputStream in;
        
        try {
            in = new DataInputStream( new BufferedInputStream( new FileInputStream( fileSource ) ) );
            try {
                while( (s = in.readLine())!= null ) {
                    if( s.indexOf( CLASSNAME ) != -1 ) {
                        s = s.substring( 0, s.indexOf( CLASSNAME ) ) + className +
                        s.substring( s.indexOf( CLASSNAME ) +  CLASSNAME.length() );
                    }
                    if( s.indexOf( SYSTEMDATE ) != -1 ) {
                        s = s.substring( 0, s.indexOf( SYSTEMDATE ) ) + new Date().toString() +
                        s.substring( s.indexOf( SYSTEMDATE ) +  SYSTEMDATE.length() );
                    }
                    rvalue += s + '\n';
                }
                
                try {
                    in.close();
                } catch( IOException exc ){
                    printMessage( exc.toString());
                }
            } catch( IOException exc ){
                printMessage( exc.toString());
            }
        } catch( IOException exc ) {
            printMessage( exc.toString());
        }
        
        return rvalue;
        
    }
    
    
    public String createJspTemplate( String template, String targetFile ) {
        
        String rvalue = new String();
        String jspcTemplate = new String();
        
        
        jspcTemplate = getArchiverBaseDir() + "templates\\jsp\\" + template;
        
        printMessage( jspcTemplate );
        
        if( !new File( targetFile ).exists() ) {
            if( !saveCodeToFile( readJspTemplate( jspcTemplate ), targetFile ) ) {
                printMessage( "Error creating " + targetFile );
            } else {
                printMessage( "Created " + targetFile );
            }
        } else {
            printMessage( "Error target file " + targetFile + " already exists " );
        }
        
        
        return rvalue;
    }
    
    
    public String createJwsTemplate( String template, String targetFile ) {
        
        String rvalue = new String();
        String jwsTemplate = new String();
        String className = targetFile.substring( targetFile.lastIndexOf( '\\')+1, targetFile.lastIndexOf( '.') );
        
        jwsTemplate = getArchiverBaseDir() + "templates\\java\\jws\\" + template;
        
        if( !new File( targetFile ).exists() ) {
            if( !saveCodeToFile( readJwsTemplate( jwsTemplate, className ), targetFile ) ) {
                printMessage( "Error creating " + targetFile );
            } else {
                printMessage( "Created " + targetFile );
            }
        } else {
            printMessage( "Error target file " + targetFile + " already exists " );
        }
        
        
        return rvalue;
    }
    
    public String readBeanTemplate( String fileSource, String className, String packageName ) {
        
        final String CLASSNAME = "<CLASSNAME>";
        final String PACKAGENAME = "<PACKAGENAME>";
        final String SYSTEMDATE = "<SYSTEMDATE>";
        String rvalue = new String();
        String s = new String();
        DataInputStream in;
        
        try {
            in = new DataInputStream( new BufferedInputStream( new FileInputStream( fileSource ) ) );
            try {
                while( (s = in.readLine())!= null ) {
                    if( s.indexOf( CLASSNAME ) != -1 ) {
                        s = s.substring( 0, s.indexOf( CLASSNAME ) ) + className +
                        s.substring( s.indexOf( CLASSNAME ) +  CLASSNAME.length() );
                    }
                    if( s.indexOf( PACKAGENAME ) != -1 ) {
                        s = s.substring( 0, s.indexOf( PACKAGENAME ) ) + packageName +
                        s.substring( s.indexOf( PACKAGENAME ) +  PACKAGENAME.length() );
                    }
                    if( s.indexOf( SYSTEMDATE ) != -1 ) {
                        s = s.substring( 0, s.indexOf( SYSTEMDATE ) ) + new Date().toString() +
                        s.substring( s.indexOf( SYSTEMDATE ) +  SYSTEMDATE.length() );
                    }
                    rvalue += s + '\n';
                }
                
                try {
                    in.close();
                } catch( IOException exc ){
                    printMessage( exc.toString());
                }
            } catch( IOException exc ){
                printMessage( exc.toString());
            }
        } catch( IOException exc ) {
            printMessage( exc.toString());
        }
        
        return rvalue;
        
    }
    
    
    public String createBeanTemplate( String template, String targetFile ) {
        
        String rvalue = new String();
        String beanTemplate = new String();
        String className = targetFile.substring( targetFile.lastIndexOf( '\\')+1, targetFile.lastIndexOf( '.') );
        String packageName = new String( " " );
        
        packageName = targetFile.substring( 0, targetFile.lastIndexOf( '\\') );
        if( packageName.length() >= ( getBuildDirectory() + "\\classes" ).length()+1 ) {
            packageName = "package "  + packageName.substring( ( getBuildDirectory() + "\\classes" ).length()+1 ).replace( '\\', '.') + ';';
        } else {
            packageName = " ";
        }
        
        beanTemplate = getArchiverBaseDir() + "templates\\java\\bean\\" + template;
        
        if( !new File( targetFile ).exists() ) {
            if( !saveCodeToFile( readBeanTemplate( beanTemplate, className, packageName ), targetFile ) ) {
                printMessage( "Error creating " + targetFile );
            } else {
                printMessage( "Created " + targetFile );
            }
        } else {
            printMessage( "Error target file " + targetFile + " already exists " );
        }
        
        
        return rvalue;
    }
    
    
    public String readServletTemplate( String fileSource, String className, String packageName ) {
        
        final String CLASSNAME = "<CLASSNAME>";
        final String PACKAGENAME = "<PACKAGENAME>";
        final String SYSTEMDATE = "<SYSTEMDATE>";
        String rvalue = new String();
        String s = new String();
        DataInputStream in;
        
        try {
            in = new DataInputStream( new BufferedInputStream( new FileInputStream( fileSource ) ) );
            try {
                while( (s = in.readLine())!= null ) {
                    if( s.indexOf( CLASSNAME ) != -1 ) {
                        s = s.substring( 0, s.indexOf( CLASSNAME ) ) + className +
                        s.substring( s.indexOf( CLASSNAME ) +  CLASSNAME.length() );
                    }
                    if( s.indexOf( PACKAGENAME ) != -1 ) {
                        s = s.substring( 0, s.indexOf( PACKAGENAME ) ) + packageName +
                        s.substring( s.indexOf( PACKAGENAME ) +  PACKAGENAME.length() );
                    }
                    if( s.indexOf( SYSTEMDATE ) != -1 ) {
                        s = s.substring( 0, s.indexOf( SYSTEMDATE ) ) + new Date().toString() +
                        s.substring( s.indexOf( SYSTEMDATE ) +  SYSTEMDATE.length() );
                    }
                    rvalue += s + '\n';
                }
                
                try {
                    in.close();
                } catch( IOException exc ){
                    printMessage( exc.toString());
                }
            } catch( IOException exc ){
                printMessage( exc.toString());
            }
        } catch( IOException exc ) {
            printMessage( exc.toString());
        }
        
        return rvalue;
        
    }
    
    
    public String createServletTemplate( String template, String targetFile ) {
        
        String rvalue = new String();
        String servletTemplate = new String();
        String className = targetFile.substring( targetFile.lastIndexOf( '\\')+1, targetFile.lastIndexOf( '.') );
        String packageName = new String( " " );
        
        packageName = targetFile.substring( 0, targetFile.lastIndexOf( '\\') );
        if( packageName.length() >= ( getBuildDirectory() + "\\classes" ).length()+1 ) {
            packageName = "package "  + packageName.substring( ( getBuildDirectory() + "\\classes" ).length()+1 ).replace( '\\', '.') + ';';
        } else {
            packageName = " ";
        }
        
        servletTemplate = getArchiverBaseDir() + "templates\\java\\servlet\\" + template;
        
        if( !new File( targetFile ).exists() ) {
            if( !saveCodeToFile( readServletTemplate( servletTemplate, className, packageName ), targetFile ) ) {
                printMessage( "Error creating " + targetFile );
            } else {
                printMessage( "Created " + targetFile );
            }
        } else {
            printMessage( "Error target file " + targetFile + " already exists " );
        }
        
        return rvalue;
    }
    
    
    public String readHtmlTemplate( String fileSource ) {
        
        final String SYSTEMDATE = "<SYSTEMDATE>";
        String rvalue = new String();
        String s = new String();
        DataInputStream in;
        boolean found = false;
        
        try {
            in = new DataInputStream( new BufferedInputStream( new FileInputStream( fileSource ) ) );
            try {
                while( (s = in.readLine())!= null ) {
                    if( !found && ( s.trim().startsWith( "<HTML>" ) ) ) {
                        s = s + "<!-- #BeginTemplate \"/Templates/" + fileSource.substring( fileSource.lastIndexOf( "\\" )+1 ) + " -->";
                        found = true;
                    }
                    if( s.indexOf( SYSTEMDATE ) != -1 ) {
                        s = s.substring( 0, s.indexOf( SYSTEMDATE ) ) + new Date().toString() +
                        s.substring( s.indexOf( SYSTEMDATE ) +  SYSTEMDATE.length() );
                    }
                    rvalue += s + '\n';
                }
                
                try {
                    in.close();
                } catch( IOException exc ){
                    printMessage( exc.toString());
                }
            } catch( IOException exc ){
                printMessage( exc.toString());
            }
        } catch( IOException exc ) {
            printMessage( exc.toString());
        }
        
        return rvalue;
        
    }
    
    
    public String createHtmlTemplate( String template, String targetFile ) {
        
        String rvalue = new String();
        String htmlTemplate = new String();
        
        if( template.equalsIgnoreCase( "None" ) ) {
            htmlTemplate = getArchiverBaseDir() + "templates\\html\\generic.html.tpt";
        } else {
            htmlTemplate = getBuildDirectory() + "\\Templates\\" + template;
        }
        
        if( !new File( targetFile ).exists() ) {
            if( !saveCodeToFile( readHtmlTemplate( htmlTemplate ), targetFile ) ) {
                printMessage( "Error creating " + targetFile );
            } else {
                printMessage( "Created " + targetFile );
            }
        } else {
            printMessage( "Error target file " + targetFile + " already exists " );
        }
        
        
        return rvalue;
    }
    
    
    public String readPropertiesTemplate( String fileSource ) {
        
        final String SYSTEMDATE = "<SYSTEMDATE>";
        String rvalue = new String();
        String s = new String();
        DataInputStream in;
        
        try {
            in = new DataInputStream( new BufferedInputStream( new FileInputStream( fileSource ) ) );
            try {
                while( (s = in.readLine())!= null ) {
                    if( s.indexOf( SYSTEMDATE ) != -1 ) {
                        s = s.substring( 0, s.indexOf( SYSTEMDATE ) ) + new Date().toString() +
                        s.substring( s.indexOf( SYSTEMDATE ) +  SYSTEMDATE.length() );
                    }
                    rvalue += s + '\n';
                }
                
                try {
                    in.close();
                } catch( IOException exc ){
                    printMessage( exc.toString());
                }
            } catch( IOException exc ){
                printMessage( exc.toString());
            }
        } catch( IOException exc ) {
            printMessage( exc.toString());
        }
        
        return rvalue;
        
    }
    
    
    public String createPropertiesTemplate( String template, String targetFile ) {
        
        String rvalue = new String();
        String propertiesTemplate = new String();
        
        if( template.equalsIgnoreCase( "generic" ) ) {
            propertiesTemplate = getArchiverBaseDir() + "templates\\properties\\generic.properties.tpt";
        }
        
        if( !new File( targetFile ).exists() ) {
            if( !saveCodeToFile( readPropertiesTemplate( propertiesTemplate ), targetFile ) ) {
                printMessage( "Error creating " + targetFile );
            } else {
                printMessage( "Created " + targetFile );
            }
        } else {
            printMessage( "Error target file " + targetFile + " already exists " );
        }
        
        
        return rvalue;
    }
    
    
    public String readTextTemplate( String fileSource ) {
        
        final String SYSTEMDATE = "<SYSTEMDATE>";
        String rvalue = new String();
        String s = new String();
        DataInputStream in;
        
        try {
            in = new DataInputStream( new BufferedInputStream( new FileInputStream( fileSource ) ) );
            try {
                while( (s = in.readLine())!= null ) {
                    if( s.indexOf( SYSTEMDATE ) != -1 ) {
                        s = s.substring( 0, s.indexOf( SYSTEMDATE ) ) + new Date().toString() +
                        s.substring( s.indexOf( SYSTEMDATE ) +  SYSTEMDATE.length() );
                    }
                    rvalue += s + '\n';
                }
                
                try {
                    in.close();
                } catch( IOException exc ){
                    printMessage( exc.toString());
                }
            } catch( IOException exc ){
                printMessage( exc.toString());
            }
        } catch( IOException exc ) {
            printMessage( exc.toString());
        }
        
        return rvalue;
        
    }
    
    public String createTextTemplate( String template, String targetFile ) {
        
        String rvalue = new String();
        String textTemplate = new String();
        
        if( template.equalsIgnoreCase( "generic" ) ) {
            textTemplate = getArchiverBaseDir() + "templates\\text\\generic.txt.tpt";
        }
        
        if( !new File( targetFile ).exists() ) {
            if( !saveCodeToFile( readTextTemplate( textTemplate ), targetFile ) ) {
                printMessage( "Error creating " + targetFile );
            } else {
                printMessage( "Created " + targetFile );
            }
        } else {
            printMessage( "Error target file " + targetFile + " already exists " );
        }
        
        
        return rvalue;
    }
    
    
    // additional splash screen methods
    
    
    /**
     * Show the spash screen while the rest of the demo loads
     */
    public void createSplashScreen() {
        
        splashLabel = new JLabel(createImageIcon("likha.jpg", "Splash.accessible_description"));
        
        splashScreen = new JWindow( this.getFrame() );
        splashScreen.getContentPane().add(splashLabel);
        splashScreen.pack();
        
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        
        splashScreen.setLocation(
        screenSize.width/2 - splashScreen.getSize().width/2,
        screenSize.height/2 - splashScreen.getSize().height/2);
    }
    
    public void showSplashScreen() {
        splashScreen.show();
    }
    
    public static void hideSplashScreen() {
        splashScreen.setVisible(false);
        splashScreen = null;
        splashLabel = null;
    }
    
    public ImageIcon createImageIcon(String filename, String description) {
        String path = "/icons/" + filename;
        return new ImageIcon(getClass().getResource(path));
    }
    
    public JFrame getFrame() {
        return frame;
    }
    
    /**
     * End splash screen while the rest of the demo loads
     */
    
    // remote restart of Tomcat
    public void remoteCommand( String command ) {
        
        String message = new String();
        
        clientSetting client = new clientSetting( buildDirectory.trim() + '/' + "client.properties" );
        if( client.exists() ) {
            
            if( client.readSetting() ) {
                
                
                SSHServer = client.getServerName();
                serverPort = client.getReloadPort();
                userID = client.getSSHUserName();
                SSHPassword = client.getSSHPassword();
                remoteDirectory = client.getSSHRemoteDirectory();
                
                
                try {
                    
                    InetAddress ip = InetAddress.getByName( SSHServer );
                    
                  
                        try {
                            SSLSocketFactory factory = (SSLSocketFactory)
                            SSLSocketFactory.getDefault();
                            SSLSocket s = (SSLSocket) factory.createSocket( ip, serverPort);
                            //---------------
                            DataOutputStream output = new DataOutputStream( s.getOutputStream());
                            //BufferedWriter output = new BufferedWriter(new OutputStreamWriter(s.getOutputStream()));
                            BufferedReader input = new BufferedReader( new InputStreamReader(s.getInputStream()));
                            //printMessage( command + " " + warFileName );
                            output.writeBytes( command + " " + warFileName + "\n\n" );
                            output.flush();
                            
                            message += "OK - " + command + " " + warFileName;
                            message = input.readLine();
                            
                            //----------------
                            s.close(); 
                            
                        } catch(IOException e) {
                            //message += e.toString();
                        }                                                                                          
                    
                } catch( java.net.UnknownHostException e ) {
                    message += e.toString();
                } // try
                
            }
        }
        printMessage( message );
        
    }
    
    // remote restart of Tomcat
    public String remoteOtherCommand( String command, String webAppName ) {
        
        String rvalue = new String();
        String appName = webAppName.endsWith( ".war".toUpperCase() ) ? webAppName : webAppName + ".war";
        String message = new String();
        
        clientSetting client = new clientSetting( buildDirectory.trim() + '/' + "client.properties" );
        if( client.exists() ) {
            
            if( client.readSetting() ) {
                
                
                SSHServer = client.getServerName();
                serverPort = client.getReloadPort();
                userID = client.getSSHUserName();
                SSHPassword = client.getSSHPassword();
                remoteDirectory = client.getSSHRemoteDirectory();
                
                
                try {
                    
                    InetAddress ip = InetAddress.getByName( SSHServer );
                                       
                        
                        try {
                            
                            SSLSocketFactory factory = (SSLSocketFactory)
                            SSLSocketFactory.getDefault();
                            SSLSocket s = (SSLSocket) factory.createSocket( ip, serverPort);
                            
                            //---------------
                            DataOutputStream output = new DataOutputStream( s.getOutputStream());
                            //BufferedWriter output = new BufferedWriter(new OutputStreamWriter(s.getOutputStream()));
                            BufferedReader input = new BufferedReader( new InputStreamReader(s.getInputStream()));
                            //printMessage( command + " " + appName );
                            //output.write( command + " " + appName );
                            output.writeBytes( command + " " + appName + "\n\n" );
                            output.flush();
                            
                            char[] buffer = new char[1];
                            while( input.read( buffer ) != -1) {
                                rvalue += new String( buffer );//.trim();
                            }
                        
                            s.close();
                            
                        } catch(IOException e) {
                            //message += e.toString();
                        }
                                                                                                               
                } catch( java.net.UnknownHostException e ) {
                    message += e.toString();
                } // try
                
            }
            
        }
        
        printMessage( message );
        
        return rvalue;
    }
    
    
    // remote restart of Tomcat
    public String remoteOtherCommand( String serverName, int portNum, String userName, String userPassword, String command, String webAppName ) {
        
        String rvalue = new String();
        String appName = webAppName.endsWith( ".war".toUpperCase() ) ? webAppName : webAppName + ".war";
        String message = new String();
        
        SSHServer = serverName;
        serverPort = portNum;
        userID = userName;
        SSHPassword = userPassword;
        
        try {
            
            InetAddress ip = InetAddress.getByName( SSHServer );
            
                
                try {
                    
                    SSLSocketFactory factory = (SSLSocketFactory)
                    SSLSocketFactory.getDefault();
                    SSLSocket s = (SSLSocket) factory.createSocket( ip, serverPort);
                    
                    //---------------
                    DataOutputStream output = new DataOutputStream( s.getOutputStream());
                    //BufferedWriter output = new BufferedWriter(new OutputStreamWriter(s.getOutputStream()));
                    BufferedReader input = new BufferedReader( new InputStreamReader(s.getInputStream()));
                    
                    output.writeBytes( command + " " + appName + "\n\n" );
                    output.flush();
                    
                    char[] buffer = new char[1];
                    while( input.read( buffer ) != -1) {
                        rvalue += new String( buffer ).trim();
                    }
                 
                    s.close();
                    
                } catch(IOException e) {
                    //message += e.toString();
                }                                                           
            
        } catch( java.net.UnknownHostException e ) {
            message += e.toString();
        } // try
        
        printMessage( message );
        
        return rvalue;
    }
    
    
    // remote restart of Tomcat
    public String remoteOtherCommand( String command, String webAppName, String jarName ) {
        
        String rvalue = new String();
        String appName = webAppName.endsWith( ".war".toUpperCase() ) ? webAppName : webAppName + ".war";
        String message = new String();
        
        clientSetting client = new clientSetting( buildDirectory.trim() + '/' + "client.properties" );
        if( client.exists() ) {
            
            if( client.readSetting() ) {
                
                
                SSHServer = client.getServerName();
                serverPort = client.getReloadPort();
                userID = client.getSSHUserName();
                SSHPassword = client.getSSHPassword();
                remoteDirectory = client.getSSHRemoteDirectory();
                
                
                try {
                    
                    InetAddress ip = InetAddress.getByName( SSHServer );
                    
                    try {
                        
                        SSLSocketFactory factory = (SSLSocketFactory)
                        SSLSocketFactory.getDefault();
                        SSLSocket s = (SSLSocket) factory.createSocket( ip, serverPort);
                        
                        //Socket s = new Socket( ip, serverPort );
                        
                        try {
                            //---------------
                            DataOutputStream output = new DataOutputStream( s.getOutputStream());
                            //BufferedWriter output = new BufferedWriter(new OutputStreamWriter(s.getOutputStream()));
                            BufferedReader input = new BufferedReader( new InputStreamReader(s.getInputStream()));
                            //printMessage( command + " " + appName );
                            //output.write( command + " " + appName );
                            output.writeBytes( command + " " + appName + " " + jarName + "\n\n" );
                            output.flush();
                            
                            char[] buffer = new char[1];
                            while( input.read( buffer ) != -1) {
                                rvalue += new String( buffer ).trim();
                            }
                            
                        } catch(IOException e) {
                            message += e.toString();
                        }
                        
                        s.close();
                        
                    } catch( java.io.IOException e ) {
                        message += e.toString();
                    } // try
                    
                } catch( java.net.UnknownHostException e ) {
                    message += e.toString();
                } // try
                
            }
            
        }
        
        printMessage( message );
        
        return rvalue;
    }
    
    
    
    public boolean createConfigFile( String filename, String[] configline ) {
        
        boolean rvalue = false;
        
        try {
            FileWriter fw = new FileWriter( filename, false);
            BufferedWriter br = new BufferedWriter(fw);
            PrintWriter pw = new PrintWriter(br);
            
            for( int i = 0 ; i < configline.length ; i++ ) {
                pw.println( configline[i] );
            }
            
            pw.close();
            br.close();
            fw.close();
            
        } catch (IOException io) {
            printMessage( io.toString() );
        } catch (Exception e) {
            printMessage( e.toString() );
        }
        
        return rvalue;
    }
    
    
    // read data
    public String readJvmSetting() {
        
        String fileName = getBuildDirectory() + "\\jvmversion.properties";
        String rvalue = "default";
        DataInputStream in;
        String s = new String();
        
        if( new File( fileName ).exists() ) {
            
            try {
                in = new DataInputStream( new BufferedInputStream( new FileInputStream( new File( fileName ) ) ) );
                try {
                    while( (s = in.readLine())!= null ) {
                        if( s.toUpperCase().indexOf( "JVMVERSION" ) != -1 ) {
                            rvalue = s.substring( s.indexOf( '=')+1, s.length() ).trim();
                        }
                    }
                    
                    try {
                        in.close();
                    } catch( IOException e ){
                        rvalue = "default";
                    }
                } catch( IOException e){
                    rvalue = "default";
                }
                
            } catch( IOException e) {
                rvalue = "default";
            }
            
        } else {
            rvalue = "default";
        }
        
        return rvalue;
        
    }
    
    public String getJavaHome() {
        return javaHome;
    }
    
    
    public void undoEdit() {
        
        JInternalFrame[] jif = codeDesktopPane.getAllFrames();
        
        if( jif.length < 1 ) {
            return; // nothing to save
        }
        
        String className = codeDesktopPane.getSelectedFrame().getClass().toString();
        
        if( className.endsWith( "mvcController" ) ) {
            
            mvcController frame = (mvcController) codeDesktopPane.getSelectedFrame();
            frame.undoEdit();
            
        } else if( className.endsWith( "mvcWappDescriptor" ) ) {
            
            mvcWappDescriptor frame = (mvcWappDescriptor) codeDesktopPane.getSelectedFrame();
            frame.undoEdit();
            
        } else if( className.endsWith( "mvcControllerSettingIF" ) ) {
            
            mvcControllerSettingIF frame = (mvcControllerSettingIF) codeDesktopPane.getSelectedFrame();
            frame.undoEdit();
            
        } else if( className.endsWith( "mvcDBConnectionPoolIF" ) ) {
            
            mvcDBConnectionPoolIF frame = (mvcDBConnectionPoolIF) codeDesktopPane.getSelectedFrame();
            frame.undoEdit();
            
        } else if( className.endsWith( "sourceJSPEditorIF" ) ) {
            
            sourceJSPEditorIF frame = (sourceJSPEditorIF) codeDesktopPane.getSelectedFrame();
            frame.undoEdit();
            
        } else if( className.endsWith( "sourceJAVAEditorIF" ) ) {
            
            sourceJAVAEditorIF frame = (sourceJAVAEditorIF) codeDesktopPane.getSelectedFrame();
            frame.undoEdit();
            
        } else if( className.endsWith( "sourceHTMLEditorIF" ) ) {
            
            sourceHTMLEditorIF frame = (sourceHTMLEditorIF) codeDesktopPane.getSelectedFrame();
            frame.undoEdit();
            
        } else if( className.endsWith( "sourceHTMLTemplateEditorIF" ) ) {
            
            sourceHTMLTemplateEditorIF frame = (sourceHTMLTemplateEditorIF) codeDesktopPane.getSelectedFrame();
            frame.undoEdit();
            
        } else if( className.endsWith( "sourceOtherEditorIF" ) ) {
            
            sourceOtherEditorIF frame = (sourceOtherEditorIF) codeDesktopPane.getSelectedFrame();
            frame.undoEdit();
            
        } else if( className.endsWith( "mvcAntBuilder" ) ) {
            
            mvcAntBuilder frame = (mvcAntBuilder) codeDesktopPane.getSelectedFrame();
            frame.undoEdit();
            
        } else if( className.endsWith( "sourceJWSEditorIF" ) ) {
            
            sourceJWSEditorIF frame = (sourceJWSEditorIF) codeDesktopPane.getSelectedFrame();
            frame.undoEdit();
            
        } else if( className.endsWith( "sourceHTMLTemplateEditorIF" ) ) {
            
            sourceHTMLTemplateEditorIF frame = (sourceHTMLTemplateEditorIF) codeDesktopPane.getSelectedFrame();
            frame.undoEdit();
            
        }
        
    }
    
    
    public void redoEdit() {
        
        JInternalFrame[] jif = codeDesktopPane.getAllFrames();
        
        if( jif.length < 1 ) {
            return; // nothing to save
        }
        
        String className = codeDesktopPane.getSelectedFrame().getClass().toString();
        
        if( className.endsWith( "mvcController" ) ) {
            
            mvcController frame = (mvcController) codeDesktopPane.getSelectedFrame();
            frame.redoEdit();
            
        } else if( className.endsWith( "mvcWappDescriptor" ) ) {
            
            mvcWappDescriptor frame = (mvcWappDescriptor) codeDesktopPane.getSelectedFrame();
            frame.redoEdit();
            
        } else if( className.endsWith( "mvcControllerSettingIF" ) ) {
            
            mvcControllerSettingIF frame = (mvcControllerSettingIF) codeDesktopPane.getSelectedFrame();
            frame.redoEdit();
            
        } else if( className.endsWith( "mvcDBConnectionPoolIF" ) ) {
            
            mvcDBConnectionPoolIF frame = (mvcDBConnectionPoolIF) codeDesktopPane.getSelectedFrame();
            frame.redoEdit();
            
        } else if( className.endsWith( "sourceJSPEditorIF" ) ) {
            
            sourceJSPEditorIF frame = (sourceJSPEditorIF) codeDesktopPane.getSelectedFrame();
            frame.redoEdit();
            
        } else if( className.endsWith( "sourceJAVAEditorIF" ) ) {
            
            sourceJAVAEditorIF frame = (sourceJAVAEditorIF) codeDesktopPane.getSelectedFrame();
            frame.redoEdit();
            
        } else if( className.endsWith( "sourceHTMLEditorIF" ) ) {
            
            sourceHTMLEditorIF frame = (sourceHTMLEditorIF) codeDesktopPane.getSelectedFrame();
            frame.redoEdit();
            
        }  else if( className.endsWith( "sourceOtherEditorIF" ) ) {
            
            sourceOtherEditorIF frame = (sourceOtherEditorIF) codeDesktopPane.getSelectedFrame();
            frame.redoEdit();
            
        } else if( className.endsWith( "sourceHTMLTemplateEditorIF" ) ) {
            
            sourceHTMLTemplateEditorIF frame = (sourceHTMLTemplateEditorIF) codeDesktopPane.getSelectedFrame();
            frame.redoEdit();
            
        } else if( className.endsWith( "mvcAntBuilder" ) ) {
            
            mvcAntBuilder frame = (mvcAntBuilder) codeDesktopPane.getSelectedFrame();
            frame.redoEdit();
            
        } else if( className.endsWith( "sourceJWSEditorIF" ) ) {
            
            sourceJWSEditorIF frame = (sourceJWSEditorIF) codeDesktopPane.getSelectedFrame();
            frame.redoEdit();
            
        } else if( className.endsWith( "sourceHTMLTemplateEditorIF" ) ) {
            
            sourceHTMLTemplateEditorIF frame = (sourceHTMLTemplateEditorIF) codeDesktopPane.getSelectedFrame();
            frame.redoEdit();
            
        }
        
    }
    
    public boolean hasOpenIF() {
        
        boolean rvalue = false;
        
        JInternalFrame[] jif = codeDesktopPane.getAllFrames();
        
        if( jif.length > 0 ) {
            
            for( int i = 0 ; i < jif.length ; i++ ) {
                String className = jif[i].getClass().toString();
                
                if( className.endsWith( "mvcController" ) ) {
                    rvalue = true;
                } else if( className.endsWith( "mvcWappDescriptor" ) ) {
                    rvalue = true;
                } else if( className.endsWith( "mvcControllerSettingIF" ) ) {
                    rvalue = true;
                } else if( className.endsWith( "mvcDBConnectionPoolIF" ) ) {
                    rvalue = true;
                } else if( className.endsWith( "sourceJSPEditorIF" ) ) {
                    rvalue = true;
                } else if( className.endsWith( "sourceJAVAEditorIF" ) ) {
                    rvalue = true;
                } else if( className.endsWith( "sourceJWSEditorIF" ) ) {
                    rvalue = true;
                } else if( className.endsWith( "sourceHTMLEditorIF" ) ) {
                    rvalue = true;
                } else if( className.endsWith( "sourceOtherEditorIF" ) ) {
                    rvalue = true;
                } else if( className.endsWith( "sourceServerResourceFactoryIF" ) ) {
                    rvalue = true;
                } else if( className.endsWith( "sourceHTMLTemplateEditorIF" ) ) {
                    rvalue = true;
                } else if( className.endsWith( "mvcAntBuilder" ) ) {
                    rvalue = true;
                } else {
                    printMessage( "No open Internal Frames" );
                }
            }
            
            
        }
        
        return rvalue;
    }
    
    
    
    public boolean hasOpenCompilableIF() {
        
        boolean rvalue = false;
        
        JInternalFrame[] jif = codeDesktopPane.getAllFrames();
        
        for( int i = 0 ; i < jif.length ; i++ ) {
            
            String className = codeDesktopPane.getSelectedFrame().getClass().toString();
            
            if( className.endsWith( "sourceJSPEditorIF" ) ) {
                rvalue = true;
                break;
            } else if( className.endsWith( "sourceJAVAEditorIF" ) ) {
                rvalue = true;
                break;
            } else if( className.endsWith( "sourceJWSEditorIF" ) ) {
                rvalue = true;
                break;
            }
            
        }
        
        return rvalue;
    }
    
    
    public boolean isOpenCompilable() {
        
        boolean rvalue = false;
        
        String className = codeDesktopPane.getSelectedFrame().getClass().toString();
        
        if( className.endsWith( "sourceJSPEditorIF" ) ) {
            rvalue = true;
        } else if( className.endsWith( "sourceJAVAEditorIF" ) ) {
            rvalue = true;
        } else if( className.endsWith( "sourceJWSEditorIF" ) ) {
            rvalue = true;
        }
        
        return rvalue;
    }
    
    public JInternalFrame getSelectedFrame() {
        
        JInternalFrame rvalue = null ;
        JInternalFrame[] jif = codeDesktopPane.getAllFrames();
        
        if( jif.length > 0 ) {
            rvalue = codeDesktopPane.getSelectedFrame();
        }
        
        return rvalue;
    }
    
    public void deleteItem() {
        
        String selectedFile = getTreeCurrentPath();
        if( selectedFile.length() > 0 ) {
            if( new File( selectedFile ).isFile() ) {
                if( selectedFile.startsWith( getBuildDirectory()+ "\\metadata\\web.xml" ) ||
                selectedFile.startsWith( getBuildDirectory()+ "\\metadata\\controllerActionMap.properties" ) ||
                selectedFile.startsWith( getBuildDirectory()+ "\\metadata\\dbConnectionPool.properties" ) ) {
                    printMessage( "No option to delete this file" );
                } else if( selectedFile.startsWith( getBuildDirectory()+ "\\metadata" ) ||
                selectedFile.startsWith( getBuildDirectory()+ "\\classes" ) ||
                selectedFile.startsWith( getBuildDirectory()+ "\\src" ) ||
                selectedFile.startsWith( getBuildDirectory()+ "\\lib" ) ) {
                    deleteYesNo dyn = new deleteYesNo( this, true );
                    dyn.show();
                } else {
                    printMessage( "No option to delete this file" );
                }
            } else if( new File( selectedFile ).isDirectory() ) {
                if( selectedFile.equalsIgnoreCase( getBuildDirectory()+ "\\metadata" ) ||
                selectedFile.equalsIgnoreCase( getBuildDirectory()+ "\\lib" ) ||
                selectedFile.equalsIgnoreCase( getBuildDirectory()+ "\\classes" ) ||
                selectedFile.equalsIgnoreCase( getBuildDirectory()+ "\\src" ) ) {
                    printMessage( "No option to delete this directory" );
                } else {
                    deleteDirectoryYesNo dyn = new deleteDirectoryYesNo( this, false );
                    dyn.show();
                }
                
            }
        } else {
            printMessage( "No selected file to delete." );
        }
        
    }
    
    
    
    public void renameItem() {
        
        String selectedFile = getTreeCurrentPath();
        if( selectedFile.length() > 0 ) {
            if( new File( selectedFile ).isFile() ) {
                if( selectedFile.startsWith( getBuildDirectory()+ "\\metadata" ) ||
                selectedFile.startsWith( getBuildDirectory()+ "\\classes" ) ||
                selectedFile.startsWith( getBuildDirectory()+ "\\src" ) ||
                selectedFile.startsWith( getBuildDirectory()+ "\\lib" ) ) {
                    renameYesNo ryn = new renameYesNo( this, true );
                    ryn.show();
                } else {
                    printMessage( "No option to rename this file" );
                }
            } else if( new File( selectedFile ).isDirectory() ) {
                if( selectedFile.equalsIgnoreCase( getBuildDirectory()+ "\\metadata" ) ||
                selectedFile.equalsIgnoreCase( getBuildDirectory()+ "\\lib" ) ||
                selectedFile.equalsIgnoreCase( getBuildDirectory()+ "\\classes" ) ||
                selectedFile.equalsIgnoreCase( getBuildDirectory()+ "\\src" ) ) {
                    printMessage( "No option to rename this directory" );
                } else {
                    renameYesNo ryn = new renameYesNo( this, true );
                    ryn.show();
                }
                
            }
        } else {
            printMessage( "No selected file to rename." );
        }
        
    }
    
    
    public String readBuildXml( String fileSource, String warFileName ) {
        
        final String WARFILE = "<WEBARCHIVE>";
        
        String rvalue = new String();
        String s = new String();
        DataInputStream in;
        
        try {
            in = new DataInputStream( new BufferedInputStream( new FileInputStream( fileSource ) ) );
            try {
                while( (s = in.readLine())!= null ) {
                    if( s.indexOf( WARFILE ) != -1 ) {
                        s = s.substring( 0, s.indexOf( WARFILE ) ) + warFileName +
                        s.substring( s.indexOf( WARFILE ) +  WARFILE.length() );
                    }
                    
                    rvalue += s + '\n';
                }
                
                try {
                    in.close();
                } catch( IOException exc ){
                    printMessage( exc.toString());
                }
            } catch( IOException exc ){
                printMessage( exc.toString());
            }
        } catch( IOException exc ) {
            printMessage( exc.toString());
        }
        
        return rvalue;
        
    }
    
    
    public boolean isFrameOpen( String selectedFile ) {
        
        boolean rvalue = false;
        
        JInternalFrame[] jif = codeDesktopPane.getAllFrames();
        
        String title = "";
        
        for( int i = 0 ; i < jif.length ; i++ ) {
            title = jif[i].getTitle();
            title = title.substring( title.indexOf( '[' ) + 1,  title.indexOf( ']' ) ).trim();
            if( selectedFile.endsWith( title )  ) {
                try {
                    jif[i].setSelected( true );
                    rvalue = true;
                    break;
                } catch( java.beans.PropertyVetoException pve ) {
                    printMessage( pve.toString() );
                }
            }
        }
        
        return rvalue;
        
    }
    
    //
    public void sendJarLibrary( String jarFile, String remoteDirectory ) {
        
        String basePath = buildDirectory;
        String selectedFile = jarFile;
        String remotedir = remoteDirectory;
        File codeFile;
        
        if( selectedFile.length() != 0 ) {
            
            codeFile = new File( selectedFile );
            
            if( codeFile.isFile() ) {
                
                // Check if war file exists
                clientSetting client = new clientSetting( buildDirectory.trim() + '/' + "client.properties" );
                
                if( client.exists() ) {
                    
                    if( client.readSetting() ) {
                        
                        SSHServer = client.getServerName();
                        serverPort = client.getReloadPort();
                        String userID = client.getSSHUserName();
                        SSHPassword = client.getSSHPassword();
                        
                        if ( codeFile.exists() ) {
                            
                            printMessage( "Sending " + codeFile.toString() + " to " + SSHServer);
                            
                            // windows exec
                            try {
                                //String osName = System.getProperty("os.name" );
                                String[] cmd = new String[3];
                                                                
                                String commandLine = "pscp -pw " + SSHPassword + " \"" + selectedFile + "\" " + userID + '@' + SSHServer + ':' + remotedir;
                                
                                cmd[0] = "cmd.exe" ;
                                cmd[1] = "/C" ;
                                cmd[2] = batch;
                                
                                batch = cmd[2];
                                
                                createUploadBatchFile( cmd[2], commandLine );
                                
                                Runtime rt = Runtime.getRuntime();
                                Process proc = rt.exec(cmd);
                                // any error message?
                                StreamGobbler errorGobbler = new StreamGobbler(proc.getErrorStream(), "ERROR", this );
                                
                                // any output?
                                StreamGobbler outputGobbler = new StreamGobbler(proc.getInputStream(), "OUTPUT", this);
                                
                                // kick them off
                                errorGobbler.start();
                                outputGobbler.start();
                                
                                // any error???
                                if( proc.waitFor() == 0) {
                                    printMessage( "Sending done");
                                } else {
                                    printMessage( "Error: File not sent");
                                }
                                
                            } catch (Throwable t) {
                                t.printStackTrace();
                            }
                            
                            createUploadBatchFile( batch, "" ); // overwrite batch
                            
                        } else {
                            printMessage( "Error " + codeFile.toString() + " does not exist");
                        }
                        
                    }
                    
                } else {
                    printMessage( "Error " + codeFile.toString() + " does not exist");
                }
                
            } else {
                printMessage( codeFile.toString() + " is not allowed to be sent to server." );
            }
            
        }
        
    }
    
    
    private boolean createCompileJspBatchFile() {
        
        String targetFile = getCompileJspBatch();
        String classpath = "set CLASSPATH=" + getClassPath().replace( '\"', ' ' ).trim();
        
        // ----------------------------------
        String[] antJars = getAntJars();
        
        // String basePath = getArchiverBaseDir() + "lib\\ant\\lib\\";
        String basePath = getArchiverBaseDir() + "ant\\lib\\";
        String projectPath = getBuildDirectory();
        String antHome = '\"' + getArchiverBaseDir() + "ant\"";
        
        String antClassPath = "";
        for( int i = 0 ; i < antJars.length ; i++ ) {
            if( i == 0 ) {
                antClassPath += basePath + antJars[i];
            } else {
                antClassPath += ';' + basePath + antJars[i];
            }
            
        }
        classpath += antClassPath;
        
        // -----------------------------
        //String antcommand = "ant -f \"" + getBuildDirectory() + "\\jspc.xml\"";
        String antcommand =  getJavaHomeDir() + "\\bin\\java -Dant.home=" + antHome + " org.apache.tools.ant.Main -f " + '\"' + projectPath + "\\jspc.xml\"";
        
        boolean rvalue = false;
        
        try {
            FileWriter fw = new FileWriter( targetFile, false);
            BufferedWriter br = new BufferedWriter(fw);
            PrintWriter pw = new PrintWriter(br);
            
            pw.println( classpath );
            pw.println( antcommand );
            
            pw.close();
            br.close();
            fw.close();
            
        } catch (IOException io) {
            printMessage( "Error: create uploadbatch " + io.getMessage() );
        } catch (Exception e) {
            printMessage( "Error: create uploadbatch " + e.getMessage());
        }
        
        return rvalue;
    }
    
    
    public String getCompileJspBatch() {
        
        compilejspbatch = getBuildDirectory() + '\\' + "compilejsp.bat";
        return compilejspbatch;
    }
    
    
    public boolean hasStringOccurence( boolean caseSensitive, String srchText, String relativeFileName ) {
        
        String fileName = getBuildDirectory() + "\\" + relativeFileName;
        boolean rvalue = false;
        
        DataInputStream in;
        String s = new String();
        
        if( new File( fileName ).exists() ) {
            
            try {
                in = new DataInputStream( new BufferedInputStream( new FileInputStream( new File( fileName ) ) ) );
                try {
                    while( (s = in.readLine())!= null ) {
                        if( caseSensitive ) {
                            if( s.indexOf( srchText ) != -1 ) { // found
                                rvalue = true;
                                break;
                            }
                        } else {
                            if( s.toUpperCase().indexOf( srchText.toUpperCase() ) != -1 ) { // found
                                rvalue = true;
                                break;
                            }
                        }
                    }
                    
                    try {
                        in.close();
                    } catch( IOException e ){
                        //rvalue = false;
                    }
                } catch( IOException e){
                    //rvalue = false;
                }
                
            } catch( IOException e) {
                //rvalue = false;
            }
            
        } else {
            rvalue = false;
        }
        
        return rvalue;
        
    }
    
    public String getStringOccurence( boolean caseSensitive, String srchText, String relativeFileName ) {
        
        String fileName = getBuildDirectory() + "\\" + relativeFileName;
        String rvalue = "";
        
        DataInputStream in;
        String s = new String();
        
        if( new File( fileName ).exists() ) {
            
            try {
                in = new DataInputStream( new BufferedInputStream( new FileInputStream( new File( fileName ) ) ) );
                try {
                    while( (s = in.readLine())!= null ) {
                        if( caseSensitive ) {
                            if( s.indexOf( srchText ) != -1 ) { // found
                                rvalue = rvalue + "     " + s + '\n';
                            }
                        } else {
                            if( s.toUpperCase().indexOf( srchText.toUpperCase() ) != -1 ) { // found
                                rvalue = rvalue + "     " + s + '\n';
                            }
                        }
                    }
                    
                    try {
                        in.close();
                    } catch( IOException e ){
                        //rvalue = false;
                    }
                } catch( IOException e){
                    //rvalue = false;
                }
                
            } catch( IOException e) {
                //rvalue = false;
            }
            
        }
        
        return rvalue;
        
    }
    
    
    public boolean unjar( String dir, String warFile ) {
        
        boolean rvalue = false;
        
        File workDir = new File( dir );
        
        File file = new File( dir + '\\' + warFile );
        
        if( file.exists() ) {
            
            try {
                String[] envp = new String[] { "dummy=dummy" };
                String execStr = getJavaHomeDir() + "\\bin\\jar -xf " + warFile;
                
                Runtime rt = Runtime.getRuntime();
                Process proc = rt.exec( execStr, envp, workDir );
                
                // ------------
                StreamGobbler errorGobbler = new StreamGobbler(proc.getErrorStream(), "ERROR", this );
                StreamGobbler outputGobbler = new StreamGobbler(proc.getInputStream(), "OUTPUT", this );
                errorGobbler.start();
                outputGobbler.start();
                // ------------
                
                int exit = proc.waitFor();
                if( exit == 0 ) {
                    printMessage( "Ok: Unwar " + warFile );
                    rvalue = true;
                } else {
                    printMessage( "Error: Unwar " + warFile );
                }
                
                rvalue = true;
                
            } catch (Throwable t) {
                rvalue = false;
                t.printStackTrace();
            }
        } else {
            System.out.println( file.toString() + " does not exist" );
            rvalue = false;
        }
        
        return rvalue;
        
    }
    
    // add template
    public void addHTMLTemplateDirectory() {
        treePanel.addTemplateToTree();
    }
    
    // clear message
    public void clearMessages() {
        buildmessage.setText( "" );
    }
    
    
    public String[] getAntJars() {
        
        String baseDir = getArchiverBaseDir() + "\\ant\\lib";
        DirectoryScanner ds = new DirectoryScanner();
        String[] includes = { "*.jar" };
        
        
        ds.setBasedir( baseDir );
        ds.setCaseSensitive( true );
        ds.setIncludes( includes );
        
        ds.scan();
        
        String[] files = ds.getIncludedFiles();
        
        return files;
    }
    
    
    public String[] listFiles( String baseDir ) {
        
        DirectoryScanner ds = new DirectoryScanner();
        String[] includes = { "**" };
        
        ds.setBasedir( baseDir );
        ds.setCaseSensitive( true );
        ds.setIncludes( includes );
        
        ds.scan();
        
        String[] files = ds.getIncludedFiles();
        
        return files;
    }
    
    
    public String[] listFiles( String baseDir, String[] excludes ) {
        
        DirectoryScanner ds = new DirectoryScanner();
        String[] includes = { "**" };
        
        ds.setBasedir( baseDir );
        ds.setCaseSensitive( true );
        ds.setIncludes( includes );
        ds.setExcludes( excludes );
        
        ds.scan();
        
        String[] files = ds.getIncludedFiles();
        
        return files;
    }
    
    
    public String[] listFiles( String baseDir, String[] excludes, String[] includes ) {
        
        DirectoryScanner ds = new DirectoryScanner();
        
        ds.setBasedir( baseDir );
        ds.setCaseSensitive( true );
        ds.setIncludes( includes );
        ds.setExcludes( excludes );
        
        ds.scan();
        
        String[] files = ds.getIncludedFiles();
        
        return files;
    }
    
    public String[] listDirs( String baseDir ) {
        
        DirectoryScanner ds = new DirectoryScanner();
        String[] includes = { "**" };
        
        ds.setBasedir( baseDir );
        ds.setCaseSensitive( true );
        ds.setIncludes( includes );
        
        ds.scan();
        
        String[] dirs = ds.getIncludedDirectories();
        
        return dirs;
    }
    
    public String[] listDirs( String baseDir, String[] excludes ) {
        
        DirectoryScanner ds = new DirectoryScanner();
        String[] includes = { "**" };
        
        ds.setBasedir( baseDir );
        ds.setCaseSensitive( true );
        ds.setIncludes( includes );
        ds.setExcludes( excludes );
        
        ds.scan();
        
        String[] dirs = ds.getIncludedDirectories();
        
        return dirs;
    }
    
    
    // read data
    public void storeJavaHome() {
        
        String fileName = getArchiverBaseDir() + sdkHome;
        String rvalue = new String();
        DataInputStream javaHomeConfig = null;
        File home = new File( fileName );
        
        if( home.exists() ) {
            try {
                javaHomeConfig = new DataInputStream( new BufferedInputStream( new FileInputStream( fileName ) ) );
                try {
                    rvalue = javaHomeConfig.readLine();
                    //DataInputStream in;
                } catch( IOException e ){
                }
            } catch( IOException e){
            }
        }
        
        java_home = rvalue;
        
    }
    
    
    public String getJavaHomeDir() {
        return java_home;
    }
    
    
}