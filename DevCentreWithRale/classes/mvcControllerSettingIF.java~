/*
 * mvcController.java
 *
 * Created on December 24, 2002, 3:47 PM
 */
import java.io.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.undo.*;
import javax.swing.event.*;
import javax.swing.text.*;

/**
 *
 * @author  test1
 */
public class mvcControllerSettingIF extends javax.swing.JInternalFrame {
    
    
    /** Creates new form mvcController */
    public mvcControllerSettingIF(mainForm mainSource) {
        
        initComponents();
        
        try {
            UIManager.setLookAndFeel( LnF );
            SwingUtilities.updateComponentTreeUI( this );
            
        } catch (UnsupportedLookAndFeelException exc) {
            main.printMessage( exc.toString() );
        } catch (IllegalAccessException exc) {
            main.printMessage( exc.toString() );
        } catch (ClassNotFoundException exc) {
            main.printMessage( exc.toString() );
        } catch (InstantiationException exc) {
            main.printMessage( exc.toString() );
        }
        
        main = mainSource;
        fileSource = main.getBuildDirectory() + "\\classes\\controller.properties";
        setTitle( getTitle() + " [ " + fileSource + " ]");
        
        initCodeTextArea();
        codeTextArea.setText( readFile() );
        codeTextArea.setCaretPosition( 0 );        
        CaretListenerLabel cll = new CaretListenerLabel( "Ready" );
        codeTextArea.addCaretListener( cll );
        
        linePosPanel.add( cll );
        
        setUndoRedo();
        
    }
    
    
    private void initCodeTextArea() {
        codeTextArea = new CodeTextArea( main );                
        jScrollPane1.setViewportView(codeTextArea);

    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        linePosPanel = new javax.swing.JPanel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Controller Setting");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/favorites.gif")));
        setVisible(true);
        jPanel1.setLayout(new java.awt.GridLayout(1, 0));

        jPanel1.add(jScrollPane1);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        linePosPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        linePosPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        getContentPane().add(linePosPanel, java.awt.BorderLayout.SOUTH);

        pack();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setSize(new java.awt.Dimension(700, 500));
        setLocation((screenSize.width-700)/2,(screenSize.height-500)/2);
    }//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel linePosPanel;
    // End of variables declaration//GEN-END:variables
    private String LnF = "com.sun.java.swing.plaf.windows.WindowsLookAndFeel";
    private mainForm main;
    private String fileSource = new String();
    private DataInputStream in;
    
    protected UndoManager undoManager = new UndoManager();
    private boolean canUndo = false;
    private boolean canRedo = false;
    
    // caret text positions
    private int textPosBegin = 0;
    private int textPosEnd = 0;
    private int caretX = 0;
    private int caretY = 0;
    
    private CodeTextArea codeTextArea;
    
    // read data
    public String readFile() {
        
        String rvalue = new String();
        String s = new String();
        
        try {
            in = new DataInputStream( new BufferedInputStream( new FileInputStream( fileSource ) ) );
            try {
                while( (s = in.readLine())!= null ) {
                    rvalue += s + '\n';
                }
                
                try {
                    in.close();
                } catch( IOException exc ){
                    main.printMessage( exc.toString());
                }
            } catch( IOException exc ){
                main.printMessage( exc.toString());
            }
        } catch( IOException exc ) {
            main.printMessage( exc.toString());
        }
        
        return rvalue;
        
    }
    
    
    // inner class
    class outFile extends DataOutputStream {
        
        public outFile( String filename ) throws IOException {
            super( new BufferedOutputStream( new FileOutputStream( filename ) ) );
        }
        
        public outFile(File file) throws IOException {
            this(file.getPath());
        }
        
    }
    
    
    // inner class
    class filter extends Object implements FilenameFilter {
        
        String afn;
        
        public filter( String afn ) {
            this.afn = afn;
        }
        
        public boolean accept(File dir, String name) {
            // Strip path information:
            String f = new File(name).getName();
            return f.indexOf(afn) != -1;
        }
        
    }
    
    public String getText() {
        return codeTextArea.getText();
    }
    
    public String getFileSource() {
        return fileSource;
    }

    
    // undo/redo
    private void updateUndoRedoFlags() {
        canUndo = undoManager.canUndo();
        canRedo = undoManager.canRedo();
    }
    
    public void setUndoRedo() {
        // test undo/redo
        codeTextArea.getDocument().addUndoableEditListener(new UndoableEditListener() {
            public void undoableEditHappened(UndoableEditEvent e) {
                undoManager.addEdit(e.getEdit());
                updateUndoRedoFlags();
            }
        });
                
    }
    
    
    public void undoEdit() {
        
        if( canUndo ) {
            try {
                undoManager.undo();                
            } catch (CannotRedoException cre) {
            }
            updateUndoRedoFlags();
        }
    }
    
    
    public void redoEdit() {
        
        if( canRedo ) {
            try {
                undoManager.redo();                
            } catch (CannotRedoException cre) {
            }
            updateUndoRedoFlags();
        }
    }

    
    //This listens for and reports caret movements.
    protected class CaretListenerLabel extends JLabel implements CaretListener {
        
        String newline = "\n";
        int dot = 0;
        int mark = 0;
        String text = "";
        
        public CaretListenerLabel(String label) {
            super(label);
        }
        
        public void caretUpdate(CaretEvent e) {
            //Get the location in the text
            dot = e.getDot();
            mark = e.getMark();
            text = codeTextArea.getText().substring(0, dot);
            
            if (dot == mark) {  // no selection
                try {
                    Rectangle caretCoords = codeTextArea.modelToView(dot);
                    //Convert it to view coordinates.
                    
                    // do the following on the gui thread
                    SwingUtilities.invokeLater(new Runnable() {
                        public void run() {
                            setText( "Line: "+countLine( text ) +" Column: "+ countColumn( text ) );
                        }
                    });
                    
                    textPosBegin = dot;
                    textPosEnd = dot;
                    caretX = caretCoords.x;
                    caretY = caretCoords.y;
                    
                } catch (BadLocationException ble) {
                    setText("caret: text position: " + dot + newline);
                }
            } else {
                //setText("selection from: " + mark + " to " + dot + newline);
                textPosBegin = dot;
                textPosEnd = mark;
            }
        }
        
    }
    
    private int countLine( String txt ) {
        
        int rvalue = 1;
        int len = txt.length();
        for( int i = 0 ; i < len ; i++ ) {
            if( txt.charAt(i) == '\n' ) {
                rvalue++;
            }
        }
        return rvalue;
    }
    
    private int countColumn( String txt ) {
        
        int rvalue = 0;
        
        if( txt.indexOf( '\n' ) == -1 ) {
            rvalue = txt.length()+1;
        } else {
            rvalue = txt.substring( txt.lastIndexOf( '\n' ) ).length();
        }
        return rvalue;
    }
    
    public int[] getCaretXY() {
        int[] rvalue = { caretX, caretY };
        return rvalue;
    }
    
    
    public int[] getTextPosition() {
        int[] rvalue = { textPosBegin, textPosEnd };
        return rvalue;
    }
    
    public int getCaretTextPosition() {
        return textPosBegin;
    }
    
    public void setCaretTextPosition( int pos ) {
        String txt = codeTextArea.getText();
        if( pos > txt.length() ) {
            codeTextArea.setCaretPosition( txt.length() );
        } else if( pos >= 0 ) {
            codeTextArea.setCaretPosition( pos );
        }
        codeTextArea.requestFocus();
    }
    
    
    public void appendCode( String code ) {
        codeTextArea.append( code );
        codeTextArea.requestFocus();
    }
    
    public void setSelection( int start, int end ) {
        codeTextArea.setSelectionStart( start );
        codeTextArea.setSelectionEnd( end );
        codeTextArea.requestFocus();
    }

    public void setText( String code, int start, int end ) {
        codeTextArea.replaceRange( code, start, end );
        codeTextArea.requestFocus();                       
    }
    
}
