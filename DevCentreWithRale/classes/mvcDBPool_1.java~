/*
 * mvcDBPool.java
 *
 * Created on December 31, 2002, 12:35 PM
 */
import java.io.*;
import javax.swing.*;
import javax.swing.tree.*;
import javax.swing.filechooser.*;

import java.awt.*;
//import java.io.File;
import java.awt.event.*;
import java.beans.*;
import java.util.*;

import java.io.*;
import java.awt.Point;
import java.net.*;
/**
 *
 * @author  test1
 */
public class mvcDBPool extends javax.swing.JDialog {
    
    /** Creates new form mvcDBPool */
    public mvcDBPool( mainForm parent, boolean modal ) {
        super(parent, modal);
        initComponents();
        
        try {
            UIManager.setLookAndFeel( LnF );
            SwingUtilities.updateComponentTreeUI( this );
        } catch (UnsupportedLookAndFeelException exc) {
            main.printMessage( exc.toString() );
        } catch (IllegalAccessException exc) {
            main.printMessage( exc.toString() );
        } catch (ClassNotFoundException exc) {
            main.printMessage( exc.toString() );
        } catch (InstantiationException exc) {
            main.printMessage( exc.toString() );
        }
        
        main = parent;        
        fileSource = main.getBuildDirectory() + "\\classes\\dbConnectionPool.properties";
        
        if( new File( fileSource ).exists() ) {
            readSetting();
        } else {
            main.printMessage( fileSource + " is not existing." );
            logFile.setText( "/tmp/" + main.getWarFileName() + ".log" );
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        driverClass = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel111 = new javax.swing.JLabel();
        dbURL = new javax.swing.JTextField();
        jLabel1111 = new javax.swing.JLabel();
        userName = new javax.swing.JTextField();
        userPassword = new javax.swing.JPasswordField();
        jLabel11111 = new javax.swing.JLabel();
        jLabel11112 = new javax.swing.JLabel();
        minConnect = new javax.swing.JTextField();
        jLabel111121 = new javax.swing.JLabel();
        maxConnect = new javax.swing.JTextField();
        jLabel1111211 = new javax.swing.JLabel();
        logFile = new javax.swing.JTextField();
        jLabel11112111 = new javax.swing.JLabel();
        connectTime = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        ok = new javax.swing.JButton();
        cancel = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();

        setTitle("DB Connection Pool");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel1.setBorder(new javax.swing.border.EtchedBorder());
        jLabel1.setFont(new java.awt.Font("Default", 0, 11));
        jLabel1.setText("DB Driver Class:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jLabel1, gridBagConstraints);

        driverClass.setFont(new java.awt.Font("Default", 0, 11));
        driverClass.setText("com.mysql.jdbc.Driver");
        driverClass.setPreferredSize(new java.awt.Dimension(200, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(driverClass, gridBagConstraints);

        jLabel11.setFont(new java.awt.Font("Default", 0, 11));
        jLabel11.setText("            jdbc:mysql://<servername>:<port>/<dbname>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jLabel11, gridBagConstraints);

        jLabel111.setFont(new java.awt.Font("Default", 0, 11));
        jLabel111.setText("Connection URL:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jLabel111, gridBagConstraints);

        dbURL.setFont(new java.awt.Font("Default", 0, 11));
        dbURL.setText("jdbc:mysql://dbserver:3306/dbname");
        dbURL.setPreferredSize(new java.awt.Dimension(300, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(dbURL, gridBagConstraints);

        jLabel1111.setFont(new java.awt.Font("Default", 0, 11));
        jLabel1111.setText("User Name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jLabel1111, gridBagConstraints);

        userName.setFont(new java.awt.Font("Default", 0, 11));
        userName.setPreferredSize(new java.awt.Dimension(150, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(userName, gridBagConstraints);

        userPassword.setFont(new java.awt.Font("Default", 0, 11));
        userPassword.setPreferredSize(new java.awt.Dimension(150, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(userPassword, gridBagConstraints);

        jLabel11111.setFont(new java.awt.Font("Default", 0, 11));
        jLabel11111.setText("Password:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jLabel11111, gridBagConstraints);

        jLabel11112.setFont(new java.awt.Font("Default", 0, 11));
        jLabel11112.setText("Min. Connections:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jLabel11112, gridBagConstraints);

        minConnect.setFont(new java.awt.Font("Default", 0, 11));
        minConnect.setText("2");
        minConnect.setPreferredSize(new java.awt.Dimension(55, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(minConnect, gridBagConstraints);

        jLabel111121.setFont(new java.awt.Font("Default", 0, 11));
        jLabel111121.setText("Max. Connections:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jLabel111121, gridBagConstraints);

        maxConnect.setFont(new java.awt.Font("Default", 0, 11));
        maxConnect.setText("3");
        maxConnect.setPreferredSize(new java.awt.Dimension(55, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(maxConnect, gridBagConstraints);

        jLabel1111211.setFont(new java.awt.Font("Default", 0, 11));
        jLabel1111211.setText("Log File:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jLabel1111211, gridBagConstraints);

        logFile.setFont(new java.awt.Font("Default", 0, 11));
        logFile.setPreferredSize(new java.awt.Dimension(200, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(logFile, gridBagConstraints);

        jLabel11112111.setFont(new java.awt.Font("Default", 0, 11));
        jLabel11112111.setText("Max. Connection Time:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jLabel11112111, gridBagConstraints);

        connectTime.setFont(new java.awt.Font("Default", 0, 11));
        connectTime.setText("0.01");
        connectTime.setPreferredSize(new java.awt.Dimension(55, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(connectTime, gridBagConstraints);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.NORTH);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        ok.setFont(new java.awt.Font("Default", 0, 11));
        ok.setText("Ok");
        ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okActionPerformed(evt);
            }
        });

        jPanel3.add(ok);

        cancel.setFont(new java.awt.Font("Default", 0, 11));
        cancel.setText("Cancel");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        jPanel3.add(cancel);

        getContentPane().add(jPanel3, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanel4, java.awt.BorderLayout.EAST);

        getContentPane().add(jPanel5, java.awt.BorderLayout.WEST);

        pack();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setSize(new java.awt.Dimension(521, 392));
        setLocation((screenSize.width-521)/2,(screenSize.height-392)/2);
    }//GEN-END:initComponents
    
    private void okActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okActionPerformed
        // Add your handling code here:
        if( saveToFile() ) {
            main.openDBConnectionPoolSetting();
            setVisible(false);
            dispose();
        }
    }//GEN-LAST:event_okActionPerformed
    
    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        // Add your handling code here:
        setVisible(false);
        dispose();
    }//GEN-LAST:event_cancelActionPerformed
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new mvcDBPool( new mainForm(), true ).show();
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField minConnect;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JButton ok;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTextField connectTime;
    private javax.swing.JTextField dbURL;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel jLabel11112111;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JButton cancel;
    private javax.swing.JTextField userName;
    private javax.swing.JLabel jLabel111;
    private javax.swing.JLabel jLabel11111;
    private javax.swing.JLabel jLabel1111;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JPasswordField userPassword;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField driverClass;
    private javax.swing.JTextField logFile;
    private javax.swing.JTextField maxConnect;
    private javax.swing.JLabel jLabel111121;
    private javax.swing.JLabel jLabel11112;
    private javax.swing.JLabel jLabel1111211;
    // End of variables declaration//GEN-END:variables
    
    private String LnF = "com.sun.java.swing.plaf.windows.WindowsLookAndFeel";
    private mainForm main;
    private String fileSource = new String();
    private DataInputStream in;
    
    private String PdriverClass = new String();
    private String PdbURL = new String();
    private String PuserName = new String();
    private String PuserPassword = new String();
    private int PminConnect = 2;
    private int PmaxConnect = 3;
    private String PlogFile = new String();
    private double PconnectTime = 0.01;
    
    // read data
    public boolean readSetting() {
        
        boolean rvalue = true;        
        String s = new String();
        
        try {
            in = new DataInputStream( new BufferedInputStream( new FileInputStream( fileSource ) ) );
            try {
                while( (s = in.readLine())!= null ) {
                    if( s.startsWith( "driverClass" ) ) {
                        driverClass.setText( s.substring( s.indexOf( '=' )+1).trim() );
                    } else if( s.startsWith( "dbURL" ) ) {
                        dbURL.setText( s.substring( s.indexOf( '=' )+1).trim() );
                    } else if( s.startsWith( "userName" ) ) {
                        userName.setText( s.substring( s.indexOf( '=' )+1).trim() );
                    } else if( s.startsWith( "userPassword" ) ) {
                        userPassword.setText( s.substring( s.indexOf( '=' )+1).trim() );
                    } else if( s.startsWith( "logFile" ) ) {
                        logFile.setText( s.substring( s.indexOf( '=' )+1).trim() );
                    } else if( s.startsWith( "minConnection" ) ) {
                        minConnect.setText( s.substring( s.indexOf( '=' )+1).trim() );
                    } else if( s.startsWith( "maxConnection" ) ) {
                        maxConnect.setText( s.substring( s.indexOf( '=' )+1).trim() );
                    } else if( s.startsWith( "connectTime" ) ) {
                        connectTime.setText( s.substring( s.indexOf( '=' )+1).trim() );
                    } 
                }
                
                try {
                    in.close();
                } catch( IOException exc ){
                    main.printMessage( exc.toString());
                    rvalue = false;
                }
            } catch( IOException exc ){
                main.printMessage( exc.toString());
                rvalue = false;
            }
        } catch( IOException exc ) {
            main.printMessage( exc.toString());
            rvalue = false;
        }
        
        return rvalue;
        
    }
    
    
    // inner class
    class outFile extends DataOutputStream {
        
        public outFile( String filename ) throws IOException {
            super( new BufferedOutputStream( new FileOutputStream( filename ) ) );
        }
        
        public outFile(File file) throws IOException {
            this(file.getPath());
        }
        
    }
    
    
    // inner class
    class filter extends Object implements FilenameFilter {
        
        String afn;
        
        public filter( String afn ) {
            this.afn = afn;
        }
        
        public boolean accept(File dir, String name) {
            // Strip path information:
            String f = new File(name).getName();
            return f.indexOf(afn) != -1;
        }
        
    }
    
    
    public String getFileSource() {
        return fileSource;
    }
    
    private boolean saveCodeToFile(  String code, String filename ) {
        
        boolean rvalue = false;
        
        try {
            FileWriter fw = new FileWriter( filename, false);
            BufferedWriter br = new BufferedWriter(fw);
            PrintWriter pw = new PrintWriter(br);
            
            pw.println( code );
            
            pw.close();
            br.close();
            fw.close();
            
            rvalue = true;
            
        } catch (IOException io) {
            main.printMessage( io.toString() );
        } catch (Exception e) {
            main.printMessage( e.toString() );
        }
        
        return rvalue;
    }
    
    private boolean saveToFile() {
        
        boolean rvalue = true;
        
        PdriverClass = driverClass.getText().trim();
        PdbURL = dbURL.getText().trim();
        PuserName = userName.getText().trim();
        PuserPassword = userPassword.getText().trim();
        PlogFile = logFile.getText().trim();
        
        if( PdriverClass.equals( "" ) || PdbURL.equals( "" ) || PuserName.equals( "" ) ||
        PuserPassword.equals( "") || PlogFile.equals( "" ) ) {
            rvalue = false;
        } else {
            try {
                PminConnect = new Integer( minConnect.getText().trim() ).intValue();
                try {
                    PmaxConnect = new Integer( maxConnect.getText().trim() ).intValue();
                    PmaxConnect = PmaxConnect < PminConnect ? PminConnect : PmaxConnect;
                    try {
                        PconnectTime = new Double( connectTime.getText().trim() ).doubleValue();
                    } catch( NumberFormatException nfe ) {
                        main.printMessage( "DB Connection Time: " + nfe.toString() );
                        rvalue = false;
                    }
                } catch( NumberFormatException nfe ) {
                    main.printMessage( "Maximum DB Connections: " + nfe.toString() );
                    rvalue = false;
                }
            } catch( NumberFormatException nfe ) {
                main.printMessage( "Minimum DB Connections: " + nfe.toString() );
                rvalue = false;
            }
        }
        
        if( PconnectTime > 0.09 ) {
            PconnectTime = 0.01;
        }
        
        
        if( rvalue ) {
            String dbprop = "# DB Connection Pool properties\n\n" +
            "driverClass   = " + PdriverClass + "\n" +
            "dbURL         = " + PdbURL + "\n" +
            "userName      = " + PuserName + "\n" +
            "userPassword  = " + PuserPassword + "\n" +
            "logFile       = " + PlogFile + "\n" +
            "minConnection = " + PminConnect + "\n" +
            "maxConnection = " + PmaxConnect + "\n" +
            "connectTime   = " + PconnectTime;
            
            if( !saveCodeToFile( dbprop, fileSource) ) {
                main.printMessage( "Error: " + fileSource + " not saved." );
                rvalue = false;
            }
        }
        
        
        return rvalue;
    }
    
}
